%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1801.m10.i311.n021.P.c25.567799015 Retro space arcade game pixel elements. Invaders, spaceships, planets and ufo vector set.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: ≈фим “уркин
%%CreationDate: 1/30/2018
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="пїњ" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">–Ь–Є–Ї—А–Њ–≤–µ–Ї—В–Њ—А</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-01-30T23:37:52+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-01-30T23:37:52+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-01-30T23:37:52+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A865c1OxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVdSP061POvTtTFG9rcUuxV2KuxV2KuxV2KrpHDGoULtSgxQBS3FLsVXRxtIw&#xA;VRUnFBNNEEEg9RirWKXYq7FXYq7FUXaR2rRSGQnkFPatMIachlYpCtx5Hiar2OBtDWKVxMfpgBaO&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e4aa2061-db60-d440-957a-ad1c6613c888</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e4aa2061-db60-d440-957a-ad1c6613c888</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:fd835b5d-1d0b-4c39-9721-8b560010a220</stRef:instanceID>
            <stRef:documentID>xmp.did:d5b01073-dd0a-4848-a095-237052b693d3</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e4aa2061-db60-d440-957a-ad1c6613c888</stEvt:instanceID>
                  <stEvt:when>2018-01-30T23:37:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>–У—А—Г–њ–њ–∞ –Њ–±—А–∞–Ј—Ж–Њ–≤ –њ–Њ —Г–Љ–Њ–ї—З–∞–љ–Є—О</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0705882 .101961 .129412 rgb
f
330 32 mo
330 28 li
334 28 li
334 32 li
330 32 li
cp
.0823529 .192157 .215686 rgb
f
338 32 mo
338 28 li
342 28 li
342 32 li
338 32 li
cp
f
334 24 mo
338 24 li
338 28 li
334 28 li
334 24 li
cp
f
338 36 mo
334 36 li
334 32 li
338 32 li
338 36 li
cp
f
338 32 mo
334 32 li
334 28 li
338 28 li
338 32 li
cp
.0941176 .286275 .301961 rgb
f
10 80 mo
10 76 li
14 76 li
14 80 li
10 80 li
cp
.0823529 .192157 .215686 rgb
f
18 80 mo
18 76 li
22 76 li
22 80 li
18 80 li
cp
f
14 72 mo
18 72 li
18 76 li
14 76 li
14 72 li
cp
f
18 84 mo
14 84 li
14 80 li
18 80 li
18 84 li
cp
f
18 80 mo
14 80 li
14 76 li
18 76 li
18 80 li
cp
.0941176 .286275 .301961 rgb
f
230 208 mo
230 204 li
234 204 li
234 208 li
230 208 li
cp
.0823529 .192157 .215686 rgb
f
238 208 mo
238 204 li
242 204 li
242 208 li
238 208 li
cp
f
234 200 mo
238 200 li
238 204 li
234 204 li
234 200 li
cp
f
238 212 mo
234 212 li
234 208 li
238 208 li
238 212 li
cp
f
238 208 mo
234 208 li
234 204 li
238 204 li
238 208 li
cp
.0941176 .286275 .301961 rgb
f
414 140 mo
414 136 li
418 136 li
418 140 li
414 140 li
cp
.0823529 .192157 .215686 rgb
f
422 140 mo
422 136 li
426 136 li
426 140 li
422 140 li
cp
f
418 132 mo
422 132 li
422 136 li
418 136 li
418 132 li
cp
f
422 144 mo
418 144 li
418 140 li
422 140 li
422 144 li
cp
f
422 140 mo
418 140 li
418 136 li
422 136 li
422 140 li
cp
.0941176 .286275 .301961 rgb
f
306 276 mo
306 272 li
310 272 li
310 276 li
306 276 li
cp
.0823529 .192157 .215686 rgb
f
314 276 mo
314 272 li
318 272 li
318 276 li
314 276 li
cp
f
310 268 mo
314 268 li
314 272 li
310 272 li
310 268 li
cp
f
314 280 mo
310 280 li
310 276 li
314 276 li
314 280 li
cp
f
314 276 mo
310 276 li
310 272 li
314 272 li
314 276 li
cp
.0941176 .286275 .301961 rgb
f
426 24 mo
426 20 li
430 20 li
430 24 li
426 24 li
cp
.0823529 .192157 .215686 rgb
f
434 24 mo
434 20 li
438 20 li
438 24 li
434 24 li
cp
f
430 16 mo
434 16 li
434 20 li
430 20 li
430 16 li
cp
f
434 28 mo
430 28 li
430 24 li
434 24 li
434 28 li
cp
f
434 24 mo
430 24 li
430 20 li
434 20 li
434 24 li
cp
.0941176 .286275 .301961 rgb
f
394 308 mo
394 304 li
398 304 li
398 308 li
394 308 li
cp
.0823529 .192157 .215686 rgb
f
402 308 mo
402 304 li
406 304 li
406 308 li
402 308 li
cp
f
398 300 mo
402 300 li
402 304 li
398 304 li
398 300 li
cp
f
402 312 mo
398 312 li
398 308 li
402 308 li
402 312 li
cp
f
402 308 mo
398 308 li
398 304 li
402 304 li
402 308 li
cp
.0941176 .286275 .301961 rgb
f
218 304 mo
218 300 li
222 300 li
222 304 li
218 304 li
cp
.0823529 .192157 .215686 rgb
f
226 304 mo
226 300 li
230 300 li
230 304 li
226 304 li
cp
f
222 296 mo
226 296 li
226 300 li
222 300 li
222 296 li
cp
f
226 308 mo
222 308 li
222 304 li
226 304 li
226 308 li
cp
f
226 304 mo
222 304 li
222 300 li
226 300 li
226 304 li
cp
.0941176 .286275 .301961 rgb
f
122 424 mo
122 420 li
126 420 li
126 424 li
122 424 li
cp
.0823529 .192157 .215686 rgb
f
130 424 mo
130 420 li
134 420 li
134 424 li
130 424 li
cp
f
126 416 mo
130 416 li
130 420 li
126 420 li
126 416 li
cp
f
130 428 mo
126 428 li
126 424 li
130 424 li
130 428 li
cp
f
130 424 mo
126 424 li
126 420 li
130 420 li
130 424 li
cp
.0941176 .286275 .301961 rgb
f
410 420 mo
410 416 li
414 416 li
414 420 li
410 420 li
cp
.0823529 .192157 .215686 rgb
f
418 420 mo
418 416 li
422 416 li
422 420 li
418 420 li
cp
f
414 412 mo
418 412 li
418 416 li
414 416 li
414 412 li
cp
f
418 424 mo
414 424 li
414 420 li
418 420 li
418 424 li
cp
f
418 420 mo
414 420 li
414 416 li
418 416 li
418 420 li
cp
.0941176 .286275 .301961 rgb
f
26 412 mo
26 408 li
30 408 li
30 412 li
26 412 li
cp
.0823529 .192157 .215686 rgb
f
34 412 mo
34 408 li
38 408 li
38 412 li
34 412 li
cp
f
30 404 mo
34 404 li
34 408 li
30 408 li
30 404 li
cp
f
34 416 mo
30 416 li
30 412 li
34 412 li
34 416 li
cp
f
34 412 mo
30 412 li
30 408 li
34 408 li
34 412 li
cp
.0941176 .286275 .301961 rgb
f
66 340 mo
66 336 li
70 336 li
70 340 li
66 340 li
cp
.0823529 .192157 .215686 rgb
f
74 340 mo
74 336 li
78 336 li
78 340 li
74 340 li
cp
f
70 332 mo
74 332 li
74 336 li
70 336 li
70 332 li
cp
f
74 344 mo
70 344 li
70 340 li
74 340 li
74 344 li
cp
f
74 340 mo
70 340 li
70 336 li
74 336 li
74 340 li
cp
.0941176 .286275 .301961 rgb
f
250 428 mo
250 424 li
254 424 li
254 428 li
250 428 li
cp
.0823529 .192157 .215686 rgb
f
258 428 mo
258 424 li
262 424 li
262 428 li
258 428 li
cp
f
254 420 mo
258 420 li
258 424 li
254 424 li
254 420 li
cp
f
258 432 mo
254 432 li
254 428 li
258 428 li
258 432 li
cp
f
258 428 mo
254 428 li
254 424 li
258 424 li
258 428 li
cp
.0941176 .286275 .301961 rgb
f
162 348 mo
158 348 li
158 344 li
162 344 li
162 348 li
cp
.0823529 .192157 .215686 rgb
f
206 292 mo
202 292 li
202 288 li
206 288 li
206 292 li
cp
f
262 252 mo
258 252 li
258 248 li
262 248 li
262 252 li
cp
f
226 32 mo
222 32 li
222 28 li
226 28 li
226 32 li
cp
f
342 56 mo
338 56 li
338 52 li
342 52 li
342 56 li
cp
f
286 20 mo
282 20 li
282 16 li
286 16 li
286 20 li
cp
f
426 48 mo
422 48 li
422 44 li
426 44 li
426 48 li
cp
f
402 108 mo
398 108 li
398 104 li
402 104 li
402 108 li
cp
f
178 24 mo
174 24 li
174 20 li
178 20 li
178 24 li
cp
f
102 36 mo
98 36 li
98 32 li
102 32 li
102 36 li
cp
f
22 36 mo
18 36 li
18 32 li
22 32 li
22 36 li
cp
f
10 196 mo
6 196 li
6 192 li
10 192 li
10 196 li
cp
f
18 280 mo
14 280 li
14 276 li
18 276 li
18 280 li
cp
f
30 328 mo
26 328 li
26 324 li
30 324 li
30 328 li
cp
f
218 420 mo
214 420 li
214 416 li
218 416 li
218 420 li
cp
f
158 436 mo
154 436 li
154 432 li
158 432 li
158 436 li
cp
f
54 436 mo
50 436 li
50 432 li
54 432 li
54 436 li
cp
f
330 424 mo
326 424 li
326 420 li
330 420 li
330 424 li
cp
f
434 336 mo
430 336 li
430 332 li
434 332 li
434 336 li
cp
f
102 148 mo
102 144 li
98 144 li
98 148 li
102 148 li
cp
f
94 148 mo
94 144 li
90 144 li
90 148 li
94 148 li
cp
f
98 140 mo
94 140 li
94 144 li
98 144 li
98 140 li
cp
f
94 152 mo
98 152 li
98 148 li
94 148 li
94 152 li
cp
f
94 148 mo
98 148 li
98 144 li
94 144 li
94 148 li
cp
.0941176 .286275 .301961 rgb
f
142 96 mo
146 96 li
146 92 li
142 92 li
142 96 li
cp
.0823529 .192157 .215686 rgb
f
158 176 mo
162 176 li
162 172 li
158 172 li
158 176 li
cp
f
326 168 mo
330 168 li
330 164 li
326 164 li
326 168 li
cp
f
262 132 mo
266 132 li
266 128 li
262 128 li
262 132 li
cp
f
26 144 mo
30 144 li
30 140 li
26 140 li
26 144 li
cp
f
38 96 mo
42 96 li
42 92 li
38 92 li
38 96 li
cp
f
402 398 mo
406 398 li
406 394 li
402 394 li
402 398 li
cp
.6 .654902 .811765 rgb
f
398 402 mo
402 402 li
402 398 li
398 398 li
398 402 li
cp
f
394 406 mo
398 406 li
398 402 li
394 402 li
394 406 li
cp
f
350 406 mo
354 406 li
354 402 li
350 402 li
350 406 li
cp
f
354 402 mo
358 402 li
358 398 li
354 398 li
354 402 li
cp
f
378 358 mo
386 358 li
386 354 li
382 354 li
382 350 li
378 350 li
378 354 li
374 354 li
374 358 li
370 358 li
370 362 li
378 362 li
378 358 li
cp
f
378 390 mo
382 390 li
382 386 li
378 386 li
378 390 li
cp
f
390 350 mo
394 350 li
394 346 li
386 346 li
386 354 li
390 354 li
390 350 li
cp
f
390 374 mo
394 374 li
394 366 li
390 366 li
390 374 li
cp
f
386 382 mo
390 382 li
390 378 li
386 378 li
386 382 li
cp
f
410 382 mo
410 386 li
414 386 li
414 382 li
410 382 li
cp
f
358 374 mo
362 374 li
362 370 li
358 370 li
358 374 li
cp
f
338 382 mo
338 386 li
346 386 li
346 382 li
338 382 li
cp
f
326 378 mo
330 378 li
330 374 li
326 374 li
326 378 li
cp
f
322 370 mo
322 366 li
330 366 li
330 362 li
326 362 li
326 358 li
318 358 li
318 366 li
310 366 li
310 370 li
318 370 li
318 374 li
326 374 li
326 370 li
322 370 li
cp
f
334 390 mo
338 390 li
338 386 li
334 386 li
334 390 li
cp
f
330 354 mo
326 354 li
326 358 li
330 358 li
330 354 li
cp
f
342 366 mo
342 362 li
334 362 li
334 366 li
342 366 li
cp
f
334 362 mo
334 358 li
330 358 li
330 362 li
334 362 li
cp
f
334 366 mo
330 366 li
330 374 li
334 374 li
334 366 li
cp
f
350 378 mo
346 378 li
346 382 li
350 382 li
350 378 li
cp
f
386 362 mo
386 366 li
390 366 li
390 362 li
386 362 li
cp
f
382 386 mo
386 386 li
386 382 li
382 382 li
382 386 li
cp
f
406 374 mo
410 374 li
410 370 li
406 370 li
406 374 li
cp
.356863 .384314 .486275 rgb
f
406 390 mo
410 390 li
410 386 li
406 386 li
406 390 li
cp
f
402 394 mo
406 394 li
406 390 li
402 390 li
402 394 li
cp
f
382 406 mo
382 410 li
390 410 li
390 406 li
382 406 li
cp
f
342 410 mo
346 410 li
346 406 li
342 406 li
342 410 li
cp
f
346 406 mo
350 406 li
350 402 li
346 402 li
346 406 li
cp
f
358 394 mo
358 398 li
366 398 li
366 394 li
358 394 li
cp
f
366 394 mo
370 394 li
370 390 li
366 390 li
366 394 li
cp
f
370 390 mo
374 390 li
374 382 li
370 382 li
370 390 li
cp
f
378 378 mo
374 378 li
374 382 li
378 382 li
378 378 li
cp
f
390 342 mo
390 346 li
394 346 li
394 342 li
390 342 li
cp
f
382 350 mo
382 354 li
386 354 li
386 350 li
382 350 li
cp
f
394 358 mo
394 354 li
398 354 li
398 346 li
394 346 li
394 350 li
390 350 li
390 354 li
386 354 li
386 358 li
378 358 li
378 362 li
370 362 li
370 366 li
374 366 li
374 370 li
378 370 li
378 366 li
382 366 li
382 362 li
390 362 li
390 358 li
394 358 li
cp
f
398 362 mo
398 358 li
394 358 li
394 362 li
398 362 li
cp
f
402 374 mo
398 374 li
398 378 li
394 378 li
394 374 li
390 374 li
390 386 li
394 386 li
394 382 li
402 382 li
402 374 li
cp
f
398 370 mo
402 370 li
402 366 li
394 366 li
394 374 li
398 374 li
398 370 li
cp
f
390 406 mo
394 406 li
394 402 li
390 402 li
390 406 li
cp
f
386 386 mo
382 386 li
382 390 li
386 390 li
386 386 li
cp
f
382 390 mo
378 390 li
378 394 li
382 394 li
382 390 li
cp
f
414 374 mo
414 382 li
418 382 li
418 374 li
414 374 li
cp
f
346 366 mo
346 362 li
350 362 li
350 366 li
346 366 li
cp
362 382 mo
362 378 li
358 378 li
358 374 li
354 374 li
354 366 li
358 366 li
358 362 li
354 362 li
354 354 li
350 354 li
350 358 li
334 358 li
334 362 li
342 362 li
342 366 li
334 366 li
334 374 li
330 374 li
330 378 li
326 378 li
326 374 li
318 374 li
318 370 li
314 370 li
314 378 li
322 378 li
322 382 li
334 382 li
334 378 li
342 378 li
342 374 li
346 374 li
346 370 li
350 370 li
350 382 li
346 382 li
346 386 li
354 386 li
354 382 li
362 382 li
cp
f
366 370 mo
362 370 li
362 374 li
366 374 li
366 370 li
cp
f
338 386 mo
338 390 li
330 390 li
330 398 li
334 398 li
334 394 li
342 394 li
342 390 li
346 390 li
346 386 li
338 386 li
cp
f
330 366 mo
322 366 li
322 370 li
326 370 li
326 374 li
330 374 li
330 366 li
cp
f
314 366 mo
318 366 li
318 362 li
314 362 li
314 366 li
cp
f
326 358 mo
326 362 li
330 362 li
330 358 li
326 358 li
cp
f
334 354 mo
330 354 li
330 358 li
334 358 li
334 354 li
cp
f
334 362 mo
330 362 li
330 366 li
334 366 li
334 362 li
cp
f
390 362 mo
390 366 li
394 366 li
394 362 li
390 362 li
cp
f
382 410 mo
382 406 li
378 406 li
378 410 li
382 410 li
cp
.239216 .262745 .352941 rgb
f
370 390 mo
370 394 li
374 394 li
374 390 li
370 390 li
cp
f
342 410 mo
342 406 li
338 406 li
338 410 li
342 410 li
cp
f
378 382 mo
374 382 li
374 386 li
378 386 li
378 382 li
cp
f
378 374 mo
378 370 li
370 370 li
370 366 li
366 366 li
366 362 li
362 362 li
362 358 li
358 358 li
358 354 li
354 354 li
354 362 li
358 362 li
358 366 li
354 366 li
354 374 li
358 374 li
358 370 li
366 370 li
366 374 li
358 374 li
358 378 li
362 378 li
362 382 li
366 382 li
366 378 li
370 378 li
370 374 li
374 374 li
374 378 li
382 378 li
382 374 li
378 374 li
cp
f
410 370 mo
410 374 li
406 374 li
406 366 li
402 366 li
402 370 li
398 370 li
398 374 li
402 374 li
402 382 li
406 382 li
406 378 li
414 378 li
414 374 li
418 374 li
418 370 li
410 370 li
cp
f
394 342 mo
394 346 li
398 346 li
398 342 li
394 342 li
cp
f
390 358 mo
390 362 li
394 362 li
394 358 li
390 358 li
cp
f
402 346 mo
398 346 li
398 354 li
394 354 li
394 358 li
398 358 li
398 362 li
394 362 li
394 366 li
402 366 li
402 346 li
cp
f
394 378 mo
398 378 li
398 374 li
394 374 li
394 378 li
cp
f
394 382 mo
394 386 li
390 386 li
390 382 li
386 382 li
386 390 li
382 390 li
382 394 li
374 394 li
374 406 li
378 406 li
378 398 li
386 398 li
386 394 li
394 394 li
394 390 li
398 390 li
398 386 li
402 386 li
402 382 li
394 382 li
cp
f
390 366 mo
386 366 li
386 362 li
382 362 li
382 370 li
386 370 li
386 378 li
390 378 li
390 366 li
cp
f
354 382 mo
354 386 li
346 386 li
346 390 li
342 390 li
342 394 li
334 394 li
334 398 li
330 398 li
330 402 li
334 402 li
334 406 li
338 406 li
338 398 li
346 398 li
346 394 li
354 394 li
354 390 li
358 390 li
358 386 li
362 386 li
362 382 li
354 382 li
cp
f
334 382 mo
342 382 li
342 378 li
334 378 li
334 382 li
cp
f
310 374 mo
314 374 li
314 370 li
310 370 li
310 374 li
cp
f
334 390 mo
334 386 li
330 386 li
330 382 li
322 382 li
322 378 li
314 378 li
314 382 li
318 382 li
318 386 li
326 386 li
326 390 li
334 390 li
cp
f
338 354 mo
334 354 li
334 358 li
338 358 li
338 354 li
cp
f
346 374 mo
342 374 li
342 378 li
346 378 li
346 374 li
cp
f
350 370 mo
346 370 li
346 374 li
350 374 li
350 370 li
cp
f
350 362 mo
346 362 li
346 366 li
350 366 li
350 362 li
cp
f
382 378 mo
382 382 li
386 382 li
386 378 li
382 378 li
cp
f
406 386 mo
410 386 li
410 382 li
406 382 li
406 386 li
cp
.168627 .207843 .243137 rgb
f
398 398 mo
402 398 li
402 394 li
398 394 li
398 398 li
cp
f
378 406 mo
382 406 li
382 402 li
378 402 li
378 406 li
cp
f
370 398 mo
374 398 li
374 394 li
370 394 li
370 398 li
cp
f
338 406 mo
342 406 li
342 402 li
338 402 li
338 406 li
cp
f
350 402 mo
354 402 li
354 398 li
350 398 li
350 402 li
cp
f
362 394 mo
366 394 li
366 390 li
362 390 li
362 394 li
cp
f
406 350 mo
402 350 li
402 358 li
406 358 li
406 350 li
cp
f
410 358 mo
406 358 li
406 366 li
410 366 li
410 358 li
cp
f
394 402 mo
398 402 li
398 398 li
394 398 li
394 402 li
cp
f
410 366 mo
410 370 li
414 370 li
414 366 li
410 366 li
cp
f
410 382 mo
414 382 li
414 378 li
410 378 li
410 382 li
cp
f
370 370 mo
374 370 li
374 366 li
370 366 li
370 370 li
cp
f
378 374 mo
382 374 li
382 366 li
378 366 li
378 374 li
cp
f
366 362 mo
366 366 li
370 366 li
370 362 li
366 362 li
cp
f
330 386 mo
334 386 li
334 382 li
330 382 li
330 386 li
cp
f
350 374 mo
346 374 li
346 378 li
350 378 li
350 374 li
cp
f
406 382 mo
410 382 li
410 378 li
406 378 li
406 382 li
cp
.101961 .145098 .180392 rgb
f
374 374 mo
370 374 li
370 378 li
366 378 li
366 382 li
362 382 li
362 386 li
358 386 li
358 390 li
354 390 li
354 394 li
346 394 li
346 398 li
338 398 li
338 402 li
342 402 li
342 406 li
346 406 li
346 402 li
350 402 li
350 398 li
358 398 li
358 394 li
362 394 li
362 390 li
370 390 li
370 382 li
374 382 li
374 374 li
cp
f
378 386 mo
374 386 li
374 394 li
378 394 li
378 386 li
cp
f
382 378 mo
378 378 li
378 386 li
382 386 li
382 378 li
cp
f
406 358 mo
402 358 li
402 366 li
406 366 li
406 358 li
cp
f
402 386 mo
398 386 li
398 390 li
394 390 li
394 394 li
386 394 li
386 398 li
378 398 li
378 402 li
382 402 li
382 406 li
390 406 li
390 402 li
394 402 li
394 398 li
398 398 li
398 394 li
402 394 li
402 390 li
406 390 li
406 382 li
402 382 li
402 386 li
cp
f
406 366 mo
406 370 li
410 370 li
410 366 li
406 366 li
cp
f
346 378 mo
342 378 li
342 382 li
346 382 li
346 378 li
cp
f
338 382 mo
334 382 li
334 386 li
338 386 li
338 382 li
cp
f
386 370 mo
382 370 li
382 378 li
386 378 li
386 370 li
cp
f
306 410 mo
310 410 li
310 406 li
306 406 li
306 410 li
cp
.6 .654902 .811765 rgb
f
286 394 mo
290 394 li
290 390 li
286 390 li
286 394 li
cp
f
286 386 mo
290 386 li
290 382 li
286 382 li
286 386 li
cp
f
274 370 mo
270 370 li
270 374 li
278 374 li
278 366 li
274 366 li
274 370 li
cp
f
274 390 mo
278 390 li
278 386 li
274 386 li
274 390 li
cp
f
266 390 mo
266 394 li
270 394 li
270 398 li
274 398 li
274 390 li
266 390 li
cp
f
282 394 mo
282 390 li
278 390 li
278 394 li
282 394 li
cp
f
278 386 mo
282 386 li
282 382 li
278 382 li
278 386 li
cp
f
278 406 mo
278 410 li
306 410 li
306 406 li
278 406 li
cp
.356863 .384314 .486275 rgb
f
310 406 mo
314 406 li
314 402 li
310 402 li
310 406 li
cp
f
298 398 mo
298 394 li
294 394 li
294 398 li
298 398 li
cp
f
294 394 mo
294 390 li
290 390 li
290 394 li
294 394 li
cp
f
290 390 mo
290 386 li
278 386 li
278 390 li
290 390 li
cp
f
294 378 mo
290 378 li
290 382 li
294 382 li
294 378 li
cp
f
278 366 mo
278 374 li
286 374 li
286 370 li
282 370 li
282 366 li
278 366 li
cp
f
270 374 mo
270 378 li
278 378 li
278 374 li
270 374 li
cp
f
266 394 mo
266 398 li
270 398 li
270 394 li
266 394 li
cp
f
282 402 mo
286 402 li
286 398 li
282 398 li
282 402 li
cp
f
278 390 mo
274 390 li
274 398 li
270 398 li
270 402 li
278 402 li
278 390 li
cp
f
286 398 mo
290 398 li
290 394 li
286 394 li
286 398 li
cp
f
298 394 mo
298 398 li
294 398 li
294 394 li
290 394 li
290 398 li
286 398 li
286 402 li
294 402 li
294 406 li
298 406 li
298 402 li
302 402 li
302 398 li
306 398 li
306 394 li
298 394 li
cp
.239216 .262745 .352941 rgb
f
310 402 mo
314 402 li
314 398 li
310 398 li
310 402 li
cp
f
298 390 mo
294 390 li
294 394 li
298 394 li
298 390 li
cp
f
290 386 mo
290 390 li
294 390 li
294 386 li
290 386 li
cp
f
294 378 mo
294 374 li
290 374 li
290 378 li
294 378 li
cp
f
286 370 mo
286 374 li
290 374 li
290 370 li
286 370 li
cp
f
266 374 mo
266 378 li
270 378 li
270 374 li
266 374 li
cp
f
278 382 mo
278 378 li
270 378 li
270 382 li
278 382 li
cp
f
266 398 mo
266 394 li
262 394 li
262 402 li
270 402 li
270 398 li
266 398 li
cp
f
286 390 mo
282 390 li
282 394 li
278 394 li
278 402 li
270 402 li
270 406 li
274 406 li
274 410 li
278 410 li
278 406 li
282 406 li
282 398 li
286 398 li
286 390 li
cp
f
282 374 mo
278 374 li
278 378 li
282 378 li
282 374 li
cp
f
298 394 mo
302 394 li
302 390 li
298 390 li
298 394 li
cp
.168627 .207843 .243137 rgb
f
306 406 mo
310 406 li
310 402 li
306 402 li
306 406 li
cp
f
306 398 mo
310 398 li
310 394 li
306 394 li
306 398 li
cp
f
282 386 mo
286 386 li
286 382 li
282 382 li
282 386 li
cp
f
266 378 mo
266 382 li
270 382 li
270 378 li
266 378 li
cp
f
270 386 mo
274 386 li
274 382 li
270 382 li
270 386 li
cp
f
266 406 mo
270 406 li
270 402 li
266 402 li
266 406 li
cp
f
282 374 mo
282 378 li
286 378 li
286 382 li
290 382 li
290 374 li
282 374 li
cp
f
302 398 mo
302 402 li
298 402 li
298 406 li
306 406 li
306 402 li
310 402 li
310 398 li
302 398 li
cp
.101961 .145098 .180392 rgb
f
274 386 mo
278 386 li
278 382 li
274 382 li
274 386 li
cp
f
282 402 mo
282 406 li
294 406 li
294 402 li
282 402 li
cp
f
286 382 mo
286 378 li
278 378 li
278 382 li
286 382 li
cp
f
172 374 mo
172 378 li
176 378 li
176 374 li
172 374 li
cp
f
168 370 mo
168 374 li
172 374 li
172 370 li
168 370 li
cp
f
164 382 mo
164 386 li
168 386 li
168 382 li
164 382 li
cp
f
160 378 mo
160 382 li
164 382 li
164 378 li
160 378 li
cp
f
176 382 mo
180 382 li
180 378 li
176 378 li
176 382 li
cp
f
168 390 mo
172 390 li
172 386 li
168 386 li
168 390 li
cp
f
192 342 mo
188 342 li
188 350 li
192 350 li
192 342 li
cp
f
188 350 mo
184 350 li
184 358 li
188 358 li
188 350 li
cp
f
184 390 mo
188 390 li
188 378 li
184 378 li
184 390 li
cp
f
184 370 mo
184 374 li
188 374 li
188 370 li
184 370 li
cp
f
188 378 mo
192 378 li
192 374 li
188 374 li
188 378 li
cp
f
180 366 mo
180 370 li
184 370 li
184 366 li
180 366 li
cp
f
196 334 mo
192 334 li
192 342 li
196 342 li
196 334 li
cp
f
188 358 mo
188 362 li
192 362 li
192 358 li
188 358 li
cp
f
200 330 mo
196 330 li
196 334 li
200 334 li
200 330 li
cp
f
224 374 mo
220 374 li
220 378 li
224 378 li
224 374 li
cp
f
228 370 mo
224 370 li
224 374 li
228 374 li
228 370 li
cp
f
228 386 mo
232 386 li
232 382 li
228 382 li
228 386 li
cp
f
232 382 mo
236 382 li
236 378 li
232 378 li
232 382 li
cp
f
216 382 mo
220 382 li
220 378 li
216 378 li
216 382 li
cp
f
208 390 mo
212 390 li
212 378 li
208 378 li
208 390 li
cp
f
224 390 mo
228 390 li
228 386 li
224 386 li
224 390 li
cp
f
204 350 mo
208 350 li
208 342 li
204 342 li
204 350 li
cp
f
208 374 mo
212 374 li
212 370 li
208 370 li
208 374 li
cp
f
204 378 mo
208 378 li
208 374 li
204 374 li
204 378 li
cp
f
216 366 mo
212 366 li
212 370 li
216 370 li
216 366 li
cp
f
200 342 mo
204 342 li
204 334 li
200 334 li
200 342 li
cp
f
204 362 mo
192 362 li
192 366 li
204 366 li
204 362 li
cp
f
204 362 mo
208 362 li
208 358 li
204 358 li
204 362 li
cp
f
208 358 mo
212 358 li
212 350 li
208 350 li
208 358 li
cp
f
184 346 mo
188 346 li
188 338 li
184 338 li
184 346 li
cp
.737255 .780392 .705882 rgb
f
184 362 mo
184 366 li
188 366 li
188 362 li
184 362 li
cp
f
176 366 mo
180 366 li
180 354 li
176 354 li
176 366 li
cp
f
192 330 mo
188 330 li
188 334 li
192 334 li
192 330 li
cp
f
196 322 mo
200 322 li
200 330 li
204 330 li
204 318 li
200 318 li
200 306 li
196 306 li
196 318 li
192 318 li
192 330 li
196 330 li
196 322 li
cp
f
208 346 mo
212 346 li
212 338 li
208 338 li
208 346 li
cp
f
208 366 mo
212 366 li
212 362 li
208 362 li
208 366 li
cp
f
188 366 mo
188 370 li
192 370 li
192 374 li
196 374 li
196 378 li
200 378 li
200 374 li
204 374 li
204 370 li
208 370 li
208 366 li
188 366 li
cp
f
216 366 mo
220 366 li
220 354 li
216 354 li
216 366 li
cp
f
208 334 mo
208 330 li
204 330 li
204 334 li
208 334 li
cp
f
148 350 mo
148 354 li
156 354 li
156 350 li
148 350 li
cp
f
240 350 mo
240 354 li
248 354 li
248 350 li
240 350 li
cp
f
192 342 mo
192 338 li
188 338 li
188 342 li
192 342 li
cp
.282353 .329412 .317647 rgb
f
192 374 mo
192 370 li
188 370 li
188 374 li
192 374 li
cp
f
188 370 mo
188 366 li
184 366 li
184 370 li
188 370 li
cp
f
180 378 mo
180 382 li
172 382 li
172 378 li
168 378 li
168 370 li
172 370 li
172 374 li
176 374 li
176 378 li
180 378 li
cp
176 358 mo
172 358 li
172 366 li
164 366 li
164 370 li
160 370 li
160 378 li
164 378 li
164 382 li
168 382 li
168 386 li
172 386 li
172 390 li
164 390 li
164 386 li
160 386 li
160 378 li
156 378 li
156 362 li
152 362 li
152 370 li
148 370 li
148 374 li
152 374 li
152 386 li
148 386 li
148 390 li
152 390 li
152 394 li
156 394 li
156 390 li
160 390 li
160 394 li
176 394 li
176 390 li
180 390 li
180 386 li
184 386 li
184 374 li
180 374 li
180 366 li
176 366 li
176 358 li
cp
f
184 350 mo
188 350 li
188 346 li
180 346 li
180 366 li
184 366 li
184 350 li
cp
f
192 314 mo
196 314 li
196 310 li
192 310 li
192 314 li
cp
f
196 330 mo
200 330 li
200 322 li
196 322 li
196 330 li
cp
f
192 326 mo
188 326 li
188 330 li
192 330 li
192 326 li
cp
f
184 334 mo
184 338 li
188 338 li
188 334 li
184 334 li
cp
f
196 306 mo
200 306 li
200 302 li
196 302 li
196 306 li
cp
f
204 386 mo
192 386 li
192 382 li
188 382 li
188 390 li
208 390 li
208 382 li
204 382 li
204 386 li
cp
f
204 342 mo
208 342 li
208 338 li
204 338 li
204 342 li
cp
f
204 374 mo
208 374 li
208 370 li
204 370 li
204 374 li
cp
f
208 370 mo
212 370 li
212 366 li
208 366 li
208 370 li
cp
f
216 346 mo
208 346 li
208 350 li
212 350 li
212 366 li
216 366 li
216 346 li
cp
f
200 314 mo
204 314 li
204 310 li
200 310 li
200 314 li
cp
f
204 330 mo
208 330 li
208 326 li
204 326 li
204 330 li
cp
f
208 338 mo
212 338 li
212 334 li
208 334 li
208 338 li
cp
f
216 378 mo
220 378 li
220 374 li
224 374 li
224 370 li
228 370 li
228 378 li
224 378 li
224 382 li
216 382 li
216 378 li
cp
244 362 mo
240 362 li
240 378 li
236 378 li
236 386 li
232 386 li
232 390 li
224 390 li
224 386 li
228 386 li
228 382 li
232 382 li
232 378 li
236 378 li
236 370 li
232 370 li
232 366 li
224 366 li
224 358 li
220 358 li
220 366 li
216 366 li
216 374 li
212 374 li
212 386 li
216 386 li
216 390 li
220 390 li
220 394 li
236 394 li
236 390 li
240 390 li
240 394 li
244 394 li
244 390 li
248 390 li
248 386 li
244 386 li
244 374 li
248 374 li
248 370 li
244 370 li
244 362 li
cp
f
168 374 mo
168 378 li
172 378 li
172 374 li
168 374 li
cp
.509804 .580392 .560784 rgb
f
164 366 mo
160 366 li
160 370 li
164 370 li
164 366 li
cp
f
168 366 mo
172 366 li
172 362 li
168 362 li
168 366 li
cp
f
148 386 mo
152 386 li
152 378 li
148 378 li
148 386 li
cp
f
160 370 mo
156 370 li
156 378 li
160 378 li
160 370 li
cp
f
168 390 mo
168 386 li
164 386 li
164 390 li
168 390 li
cp
f
164 382 mo
160 382 li
160 386 li
164 386 li
164 382 li
cp
f
172 382 mo
176 382 li
176 378 li
172 378 li
172 382 li
cp
f
184 342 mo
180 342 li
180 346 li
184 346 li
184 342 li
cp
f
180 346 mo
176 346 li
176 354 li
180 354 li
180 346 li
cp
f
180 370 mo
180 374 li
184 374 li
184 370 li
180 370 li
cp
f
184 374 mo
184 378 li
188 378 li
188 374 li
184 374 li
cp
f
192 366 mo
192 362 li
188 362 li
188 366 li
192 366 li
cp
f
184 358 mo
184 362 li
188 362 li
188 358 li
184 358 li
cp
f
172 358 mo
176 358 li
176 354 li
172 354 li
172 358 li
cp
f
196 314 mo
192 314 li
192 318 li
196 318 li
196 314 li
cp
f
196 330 mo
192 330 li
192 334 li
196 334 li
196 330 li
cp
f
192 334 mo
188 334 li
188 338 li
192 338 li
192 334 li
cp
f
156 354 mo
148 354 li
148 370 li
152 370 li
152 362 li
156 362 li
156 354 li
cp
f
228 374 mo
224 374 li
224 378 li
228 378 li
228 374 li
cp
f
232 366 mo
232 370 li
236 370 li
236 366 li
232 366 li
cp
f
224 366 mo
228 366 li
228 362 li
224 362 li
224 366 li
cp
f
244 386 mo
248 386 li
248 378 li
244 378 li
244 386 li
cp
f
236 378 mo
240 378 li
240 370 li
236 370 li
236 378 li
cp
f
228 390 mo
232 390 li
232 386 li
228 386 li
228 390 li
cp
f
232 386 mo
236 386 li
236 382 li
232 382 li
232 386 li
cp
f
224 378 mo
220 378 li
220 382 li
224 382 li
224 378 li
cp
f
164 394 mo
164 398 li
172 398 li
172 394 li
164 394 li
cp
f
224 394 mo
224 398 li
232 398 li
232 394 li
224 394 li
cp
f
212 342 mo
212 346 li
216 346 li
216 342 li
212 342 li
cp
f
216 354 mo
220 354 li
220 346 li
216 346 li
216 354 li
cp
f
212 374 mo
216 374 li
216 370 li
212 370 li
212 374 li
cp
f
208 378 mo
212 378 li
212 374 li
208 374 li
208 378 li
cp
f
208 362 mo
204 362 li
204 366 li
208 366 li
208 362 li
cp
f
204 374 mo
200 374 li
200 378 li
196 378 li
196 374 li
192 374 li
192 378 li
188 378 li
188 382 li
192 382 li
192 386 li
204 386 li
204 382 li
208 382 li
208 378 li
204 378 li
204 374 li
cp
f
212 358 mo
208 358 li
208 362 li
212 362 li
212 358 li
cp
f
224 358 mo
224 354 li
220 354 li
220 358 li
224 358 li
cp
f
200 318 mo
204 318 li
204 314 li
200 314 li
200 318 li
cp
f
204 330 mo
200 330 li
200 334 li
204 334 li
204 330 li
cp
f
208 338 mo
208 334 li
204 334 li
204 338 li
208 338 li
cp
f
240 354 mo
240 362 li
244 362 li
244 370 li
248 370 li
248 354 li
240 354 li
cp
f
188 390 mo
188 394 li
192 394 li
192 398 li
196 398 li
196 402 li
200 402 li
200 398 li
204 398 li
204 394 li
208 394 li
208 390 li
188 390 li
cp
1 1 1 rgb
f
164 398 mo
164 402 li
172 402 li
172 398 li
164 398 li
cp
f
224 398 mo
224 402 li
232 402 li
232 398 li
224 398 li
cp
f
208 394 mo
212 394 li
212 390 li
208 390 li
208 394 li
cp
.368627 .694118 1 rgb
f
184 390 mo
184 394 li
188 394 li
188 390 li
184 390 li
cp
f
160 398 mo
160 402 li
164 402 li
164 398 li
160 398 li
cp
f
152 398 mo
156 398 li
156 394 li
152 394 li
152 398 li
cp
f
240 398 mo
244 398 li
244 394 li
240 394 li
240 398 li
cp
f
172 402 mo
176 402 li
176 398 li
172 398 li
172 402 li
cp
f
164 402 mo
164 406 li
172 406 li
172 402 li
164 402 li
cp
f
220 398 mo
220 402 li
224 402 li
224 398 li
220 398 li
cp
f
232 402 mo
236 402 li
236 398 li
232 398 li
232 402 li
cp
f
224 402 mo
224 406 li
232 406 li
232 402 li
224 402 li
cp
f
188 394 mo
188 398 li
192 398 li
192 394 li
188 394 li
cp
f
192 398 mo
192 402 li
196 402 li
196 398 li
192 398 li
cp
f
204 398 mo
208 398 li
208 394 li
204 394 li
204 398 li
cp
f
200 402 mo
204 402 li
204 398 li
200 398 li
200 402 li
cp
f
196 406 mo
200 406 li
200 402 li
196 402 li
196 406 li
cp
f
160 402 mo
160 406 li
164 406 li
164 402 li
160 402 li
cp
.156863 .32549 .878431 rgb
f
172 406 mo
176 406 li
176 402 li
172 402 li
172 406 li
cp
f
164 406 mo
164 410 li
172 410 li
172 406 li
164 406 li
cp
f
220 402 mo
220 406 li
224 406 li
224 402 li
220 402 li
cp
f
232 406 mo
236 406 li
236 402 li
232 402 li
232 406 li
cp
f
224 406 mo
224 410 li
232 410 li
232 406 li
224 406 li
cp
f
208 398 mo
212 398 li
212 394 li
208 394 li
208 398 li
cp
f
184 394 mo
184 398 li
188 398 li
188 394 li
184 394 li
cp
f
188 398 mo
188 402 li
192 402 li
192 398 li
188 398 li
cp
f
204 402 mo
208 402 li
208 398 li
204 398 li
204 402 li
cp
f
192 402 mo
192 406 li
196 406 li
196 402 li
192 402 li
cp
f
200 406 mo
204 406 li
204 402 li
200 402 li
200 406 li
cp
f
196 410 mo
200 410 li
200 406 li
196 406 li
196 410 li
cp
f
204 350 mo
204 342 li
200 342 li
200 334 li
196 334 li
196 342 li
192 342 li
192 350 li
204 350 li
cp
.368627 .694118 1 rgb
f
188 358 mo
192 358 li
192 362 li
204 362 li
204 358 li
208 358 li
208 350 li
188 350 li
188 358 li
cp
.156863 .32549 .878431 rgb
f
120 394 mo
120 390 li
92 390 li
92 394 li
88 394 li
88 390 li
84 390 li
84 394 li
68 394 li
68 390 li
64 390 li
64 394 li
56 394 li
56 402 li
60 402 li
60 398 li
64 398 li
64 402 li
72 402 li
72 398 li
76 398 li
76 402 li
84 402 li
84 398 li
88 398 li
88 402 li
96 402 li
96 398 li
100 398 li
100 402 li
108 402 li
108 398 li
112 398 li
112 402 li
120 402 li
120 398 li
124 398 li
124 402 li
128 402 li
128 394 li
120 394 li
cp
1 .941176 .34902 rgb
f
124 390 mo
120 390 li
120 394 li
124 394 li
124 390 li
cp
1 .545098 0 rgb
f
56 402 mo
56 406 li
64 406 li
64 410 li
120 410 li
120 406 li
128 406 li
128 402 li
56 402 li
cp
f
128 402 mo
132 402 li
132 394 li
128 394 li
128 402 li
cp
f
64 390 mo
60 390 li
60 394 li
64 394 li
64 390 li
cp
f
56 394 mo
52 394 li
52 402 li
56 402 li
56 394 li
cp
f
80 370 mo
84 370 li
84 366 li
80 366 li
80 370 li
cp
1 1 1 rgb
f
84 362 mo
84 366 li
92 366 li
92 362 li
84 362 li
cp
f
76 386 mo
80 386 li
80 370 li
76 370 li
76 386 li
cp
f
104 386 mo
108 386 li
108 382 li
104 382 li
104 386 li
cp
f
68 390 mo
68 394 li
84 394 li
84 390 li
68 390 li
cp
f
88 394 mo
92 394 li
92 390 li
88 390 li
88 394 li
cp
f
120 402 mo
124 402 li
124 398 li
120 398 li
120 402 li
cp
.65098 .180392 .0980392 rgb
f
108 402 mo
112 402 li
112 398 li
108 398 li
108 402 li
cp
f
96 402 mo
100 402 li
100 398 li
96 398 li
96 402 li
cp
f
84 402 mo
88 402 li
88 398 li
84 398 li
84 402 li
cp
f
72 402 mo
76 402 li
76 398 li
72 398 li
72 402 li
cp
f
60 402 mo
64 402 li
64 398 li
60 398 li
60 402 li
cp
f
72 374 mo
76 374 li
76 366 li
72 366 li
72 374 li
cp
.368627 .694118 1 rgb
f
76 366 mo
80 366 li
80 362 li
76 362 li
76 366 li
cp
f
80 358 mo
80 362 li
88 362 li
88 358 li
80 358 li
cp
f
84 366 mo
84 370 li
80 370 li
80 386 li
92 386 li
92 366 li
84 366 li
cp
f
112 366 mo
108 366 li
108 374 li
112 374 li
112 366 li
cp
f
108 362 mo
104 362 li
104 366 li
108 366 li
108 362 li
cp
f
96 358 mo
96 362 li
104 362 li
104 358 li
96 358 li
cp
f
88 354 mo
88 358 li
96 358 li
96 354 li
88 354 li
cp
f
104 366 mo
100 366 li
100 386 li
104 386 li
104 382 li
108 382 li
108 374 li
104 374 li
104 366 li
cp
f
68 390 mo
72 390 li
72 374 li
68 374 li
68 390 li
cp
f
112 390 mo
116 390 li
116 374 li
112 374 li
112 390 li
cp
f
80 366 mo
76 366 li
76 370 li
80 370 li
80 366 li
cp
.156863 .32549 .878431 rgb
f
84 362 mo
80 362 li
80 366 li
84 366 li
84 362 li
cp
f
104 374 mo
108 374 li
108 366 li
104 366 li
104 374 li
cp
f
108 386 mo
100 386 li
100 366 li
104 366 li
104 362 li
96 362 li
96 358 li
88 358 li
88 362 li
92 362 li
92 386 li
76 386 li
76 374 li
72 374 li
72 390 li
112 390 li
112 374 li
108 374 li
108 386 li
cp
f
354 326 mo
354 322 li
358 322 li
358 326 li
354 326 li
cp
1 1 1 rgb
f
358 326 mo
358 322 li
362 322 li
362 326 li
358 326 li
cp
f
370 318 mo
370 314 li
374 314 li
374 318 li
370 318 li
cp
f
358 342 mo
358 338 li
362 338 li
362 342 li
358 342 li
cp
f
338 334 mo
338 330 li
342 330 li
342 334 li
338 334 li
cp
f
338 310 mo
338 306 li
342 306 li
342 310 li
338 310 li
cp
.368627 .694118 1 rgb
f
374 310 mo
374 306 li
378 306 li
378 310 li
374 310 li
cp
f
370 334 mo
370 330 li
374 330 li
374 334 li
370 334 li
cp
f
370 342 mo
370 338 li
374 338 li
374 342 li
370 342 li
cp
.156863 .32549 .878431 rgb
f
334 342 mo
334 338 li
338 338 li
338 342 li
334 342 li
cp
f
346 346 mo
346 342 li
350 342 li
350 346 li
346 346 li
cp
f
334 318 mo
334 314 li
338 314 li
338 318 li
334 318 li
cp
f
362 306 mo
362 302 li
366 302 li
366 306 li
362 306 li
cp
f
346 314 mo
346 310 li
350 310 li
350 314 li
346 314 li
cp
1 1 1 rgb
f
362 326 mo
362 322 li
366 322 li
366 326 li
362 326 li
cp
.368627 .694118 1 rgb
f
366 326 mo
366 322 li
370 322 li
370 326 li
366 326 li
cp
f
370 326 mo
370 322 li
374 322 li
374 326 li
370 326 li
cp
.156863 .32549 .878431 rgb
f
350 326 mo
350 322 li
354 322 li
354 326 li
350 326 li
cp
1 1 1 rgb
f
346 326 mo
346 322 li
350 322 li
350 326 li
346 326 li
cp
.368627 .694118 1 rgb
f
346 322 mo
346 318 li
350 318 li
350 322 li
346 322 li
cp
.156863 .32549 .878431 rgb
f
350 318 mo
350 314 li
354 314 li
354 318 li
350 318 li
cp
f
358 318 mo
358 314 li
362 314 li
362 318 li
358 318 li
cp
f
362 322 mo
362 318 li
366 318 li
366 322 li
362 322 li
cp
f
362 330 mo
362 326 li
366 326 li
366 330 li
362 330 li
cp
f
358 334 mo
358 330 li
362 330 li
362 334 li
358 334 li
cp
f
350 334 mo
350 330 li
354 330 li
354 334 li
350 334 li
cp
f
346 334 mo
346 330 li
350 330 li
350 334 li
346 334 li
cp
.0823529 .192157 .215686 rgb
f
342 338 mo
342 334 li
346 334 li
346 338 li
342 338 li
cp
f
342 314 mo
342 310 li
346 310 li
346 314 li
342 314 li
cp
f
346 318 mo
346 314 li
350 314 li
350 318 li
346 318 li
cp
f
366 314 mo
366 310 li
370 310 li
370 314 li
366 314 li
cp
f
362 318 mo
362 314 li
366 314 li
366 318 li
362 318 li
cp
f
362 334 mo
362 330 li
366 330 li
366 334 li
362 334 li
cp
f
366 338 mo
366 334 li
370 334 li
370 338 li
366 338 li
cp
f
346 330 mo
346 326 li
350 326 li
350 330 li
346 330 li
cp
.156863 .32549 .878431 rgb
f
342 326 mo
342 322 li
346 322 li
346 326 li
342 326 li
cp
.368627 .694118 1 rgb
f
338 326 mo
338 322 li
342 322 li
342 326 li
338 326 li
cp
.156863 .32549 .878431 rgb
f
350 330 mo
350 326 li
354 326 li
354 330 li
350 330 li
cp
.368627 .694118 1 rgb
f
354 330 mo
354 326 li
358 326 li
358 330 li
354 330 li
cp
1 1 1 rgb
f
354 334 mo
354 330 li
358 330 li
358 334 li
354 334 li
cp
.368627 .694118 1 rgb
f
354 338 mo
354 334 li
358 334 li
358 338 li
354 338 li
cp
f
354 342 mo
354 338 li
358 338 li
358 342 li
354 342 li
cp
.156863 .32549 .878431 rgb
f
358 330 mo
358 326 li
362 326 li
362 330 li
358 330 li
cp
.368627 .694118 1 rgb
f
350 322 mo
350 318 li
354 318 li
354 322 li
350 322 li
cp
f
354 322 mo
354 318 li
358 318 li
358 322 li
354 322 li
cp
1 1 1 rgb
f
354 318 mo
354 314 li
358 314 li
358 318 li
354 318 li
cp
.368627 .694118 1 rgb
f
354 314 mo
354 310 li
358 310 li
358 314 li
354 314 li
cp
f
354 310 mo
354 306 li
358 306 li
358 310 li
354 310 li
cp
.156863 .32549 .878431 rgb
f
358 322 mo
358 318 li
362 318 li
362 322 li
358 322 li
cp
.368627 .694118 1 rgb
f
286 306 mo
282 306 li
282 302 li
274 302 li
274 306 li
278 306 li
278 310 li
286 310 li
286 306 li
cp
.6 .654902 .811765 rgb
f
274 314 mo
274 310 li
270 310 li
270 306 li
262 306 li
262 310 li
254 310 li
254 314 li
246 314 li
246 318 li
242 318 li
242 322 li
250 322 li
250 318 li
262 318 li
262 314 li
274 314 li
cp
f
290 314 mo
290 310 li
286 310 li
286 314 li
290 314 li
cp
f
298 318 mo
302 318 li
302 310 li
298 310 li
298 318 li
cp
f
306 306 mo
302 306 li
302 310 li
306 310 li
306 306 li
cp
f
322 326 mo
318 326 li
318 330 li
322 330 li
322 326 li
cp
f
310 342 mo
314 342 li
314 338 li
310 338 li
310 342 li
cp
f
306 346 mo
310 346 li
310 342 li
306 342 li
306 346 li
cp
f
278 334 mo
282 334 li
282 330 li
278 330 li
278 334 li
cp
f
286 330 mo
290 330 li
290 326 li
286 326 li
286 330 li
cp
f
290 326 mo
294 326 li
294 322 li
290 322 li
290 326 li
cp
f
278 318 mo
270 318 li
270 322 li
278 322 li
278 318 li
cp
f
270 306 mo
270 310 li
278 310 li
278 306 li
270 306 li
cp
.356863 .384314 .486275 rgb
f
282 302 mo
282 306 li
286 306 li
286 302 li
282 302 li
cp
f
278 310 mo
278 314 li
282 314 li
282 310 li
278 310 li
cp
f
294 314 mo
294 306 li
286 306 li
286 310 li
290 310 li
290 314 li
294 314 li
cp
f
310 306 mo
306 306 li
306 310 li
302 310 li
302 318 li
306 318 li
306 314 li
310 314 li
310 306 li
cp
f
314 318 mo
314 314 li
310 314 li
310 318 li
314 318 li
cp
f
326 322 mo
322 322 li
322 326 li
326 326 li
326 322 li
cp
f
318 330 mo
314 330 li
314 334 li
318 334 li
318 330 li
cp
f
310 338 mo
314 338 li
314 334 li
310 334 li
310 338 li
cp
f
278 342 mo
278 346 li
306 346 li
306 342 li
278 342 li
cp
f
270 334 mo
270 338 li
282 338 li
282 334 li
270 334 li
cp
f
270 330 mo
270 326 li
258 326 li
258 330 li
270 330 li
cp
f
286 326 mo
286 322 li
290 322 li
290 318 li
286 318 li
286 314 li
282 314 li
282 318 li
278 318 li
278 322 li
270 322 li
270 326 li
286 326 li
cp
f
270 322 mo
270 318 li
274 318 li
274 314 li
262 314 li
262 318 li
254 318 li
254 322 li
246 322 li
246 326 li
258 326 li
258 322 li
270 322 li
cp
f
298 322 mo
294 322 li
294 326 li
290 326 li
290 330 li
282 330 li
282 334 li
294 334 li
294 330 li
298 330 li
298 326 li
302 326 li
302 318 li
298 318 li
298 322 li
cp
f
262 342 mo
274 342 li
274 346 li
278 346 li
278 342 li
286 342 li
286 338 li
294 338 li
294 334 li
282 334 li
282 338 li
270 338 li
270 334 li
266 334 li
266 330 li
258 330 li
258 326 li
246 326 li
246 322 li
242 322 li
242 330 li
246 330 li
246 334 li
254 334 li
254 338 li
262 338 li
262 342 li
cp
.239216 .262745 .352941 rgb
f
290 302 mo
286 302 li
286 306 li
290 306 li
290 302 li
cp
f
278 310 mo
274 310 li
274 318 li
282 318 li
282 314 li
278 314 li
278 310 li
cp
f
282 310 mo
282 314 li
286 314 li
286 310 li
282 310 li
cp
f
298 306 mo
294 306 li
294 310 li
298 310 li
298 306 li
cp
f
286 314 mo
286 318 li
294 318 li
294 314 li
286 314 li
cp
f
314 318 mo
318 318 li
318 326 li
322 326 li
322 322 li
326 322 li
326 318 li
322 318 li
322 314 li
318 314 li
318 310 li
314 310 li
314 306 li
310 306 li
310 314 li
314 314 li
314 318 li
cp
f
314 330 mo
310 330 li
310 334 li
314 334 li
314 330 li
cp
f
310 338 mo
306 338 li
306 342 li
310 342 li
310 338 li
cp
f
278 334 mo
278 330 li
274 330 li
274 334 li
278 334 li
cp
f
302 334 mo
302 330 li
306 330 li
306 322 li
314 322 li
314 318 li
310 318 li
310 314 li
306 314 li
306 318 li
302 318 li
302 326 li
298 326 li
298 330 li
294 330 li
294 334 li
302 334 li
cp
f
274 330 mo
274 326 li
270 326 li
270 330 li
274 330 li
cp
f
282 330 mo
286 330 li
286 326 li
282 326 li
282 330 li
cp
f
270 326 mo
270 322 li
258 322 li
258 326 li
270 326 li
cp
f
286 326 mo
290 326 li
290 322 li
286 322 li
286 326 li
cp
f
250 322 mo
254 322 li
254 318 li
250 318 li
250 322 li
cp
f
298 322 mo
298 318 li
294 318 li
294 322 li
298 322 li
cp
f
298 310 mo
294 310 li
294 314 li
298 314 li
298 310 li
cp
.168627 .207843 .243137 rgb
f
314 330 mo
318 330 li
318 326 li
314 326 li
314 330 li
cp
f
302 342 mo
306 342 li
306 338 li
302 338 li
302 342 li
cp
f
306 338 mo
310 338 li
310 334 li
306 334 li
306 338 li
cp
f
290 322 mo
294 322 li
294 318 li
290 318 li
290 322 li
cp
f
294 318 mo
298 318 li
298 314 li
294 314 li
294 318 li
cp
.101961 .145098 .180392 rgb
f
274 330 mo
266 330 li
266 334 li
274 334 li
274 330 li
cp
f
282 330 mo
282 326 li
274 326 li
274 330 li
282 330 li
cp
f
314 322 mo
306 322 li
306 330 li
302 330 li
302 334 li
294 334 li
294 338 li
286 338 li
286 342 li
302 342 li
302 338 li
306 338 li
306 334 li
310 334 li
310 330 li
314 330 li
314 326 li
318 326 li
318 318 li
314 318 li
314 322 li
cp
f
325.999 262 mo
321.999 262 li
321.999 266 li
325.999 266 li
325.999 262 li
cp
.239216 .262745 .352941 rgb
f
390 250 mo
394 250 li
394 246 li
398 246 li
398 242 li
390 242 li
390 250 li
cp
.6 .654902 .811765 rgb
f
406 270 mo
402 270 li
402 274 li
406 274 li
406 270 li
cp
f
350 230 mo
345.999 230 li
345.999 234 li
350 234 li
350 230 li
cp
f
366 286 mo
370 286 li
370 282 li
366 282 li
366 286 li
cp
f
325.999 250 mo
325.999 254 li
329.999 254 li
329.999 250 li
325.999 250 li
cp
f
341.999 242 mo
341.999 246 li
350 246 li
350 242 li
354 242 li
354 238 li
345.999 238 li
345.999 242 li
341.999 242 li
cp
f
366 246 mo
366 242 li
362 242 li
362 238 li
358 238 li
358 246 li
366 246 li
cp
f
366 258 mo
370 258 li
370 254 li
366 254 li
366 258 li
cp
f
362 286 mo
358 286 li
358 290 li
362 290 li
362 286 li
cp
f
337.999 262 mo
337.999 266 li
345.999 266 li
345.999 262 li
341.999 262 li
341.999 258 li
345.999 258 li
345.999 254 li
341.999 254 li
341.999 250 li
337.999 250 li
337.999 242 li
341.999 242 li
341.999 238 li
345.999 238 li
345.999 234 li
337.999 234 li
337.999 238 li
333.999 238 li
333.999 242 li
329.999 242 li
329.999 246 li
333.999 246 li
333.999 254 li
337.999 254 li
337.999 258 li
333.999 258 li
333.999 254 li
329.999 254 li
329.999 258 li
321.999 258 li
321.999 262 li
337.999 262 li
cp
f
390 286 mo
394 286 li
394 282 li
390 282 li
390 286 li
cp
f
394 282 mo
398 282 li
398 278 li
394 278 li
394 282 li
cp
f
394 238 mo
390 238 li
390 242 li
394 242 li
394 238 li
cp
.356863 .384314 .486275 rgb
f
390 242 mo
386 242 li
386 246 li
390 246 li
390 242 li
cp
f
394 254 mo
398 254 li
398 246 li
394 246 li
394 254 li
cp
f
402 242 mo
398 242 li
398 246 li
402 246 li
402 242 li
cp
f
390 258 mo
394 258 li
394 254 li
390 254 li
390 258 li
cp
f
410 262 mo
414 262 li
414 258 li
410 258 li
410 262 li
cp
f
406 270 mo
410 270 li
410 262 li
406 262 li
406 270 li
cp
f
402 270 mo
398 270 li
398 274 li
402 274 li
402 270 li
cp
f
366 282 mo
362 282 li
362 286 li
366 286 li
366 282 li
cp
f
329.999 254 mo
325.999 254 li
325.999 258 li
329.999 258 li
329.999 254 li
cp
f
345.999 238 mo
341.999 238 li
341.999 242 li
345.999 242 li
345.999 238 li
cp
f
370 282 mo
374 282 li
374 278 li
370 278 li
370 282 li
cp
f
337.999 274 mo
337.999 278 li
345.999 278 li
345.999 274 li
337.999 274 li
cp
f
354 250 mo
354 254 li
362 254 li
362 250 li
370 250 li
370 246 li
374 246 li
374 238 li
362 238 li
362 242 li
366 242 li
366 246 li
358 246 li
358 238 li
362 238 li
362 234 li
354 234 li
354 230 li
350 230 li
350 234 li
345.999 234 li
345.999 238 li
354 238 li
354 242 li
350 242 li
350 246 li
341.999 246 li
341.999 242 li
337.999 242 li
337.999 250 li
341.999 250 li
341.999 254 li
345.999 254 li
345.999 250 li
354 250 li
cp
f
333.999 246 mo
329.999 246 li
329.999 254 li
333.999 254 li
333.999 246 li
cp
f
337.999 258 mo
337.999 254 li
333.999 254 li
333.999 258 li
337.999 258 li
cp
f
374 254 mo
370 254 li
370 258 li
374 258 li
374 254 li
cp
f
366 262 mo
366 258 li
358 258 li
358 262 li
366 262 li
cp
f
333.999 266 mo
333.999 270 li
345.999 270 li
345.999 266 li
337.999 266 li
337.999 262 li
325.999 262 li
325.999 266 li
333.999 266 li
cp
f
350 274 mo
350 270 li
345.999 270 li
345.999 274 li
350 274 li
cp
f
354 266 mo
354 258 li
350 258 li
350 254 li
345.999 254 li
345.999 258 li
341.999 258 li
341.999 262 li
345.999 262 li
345.999 266 li
354 266 li
cp
f
350 286 mo
350 290 li
358 290 li
358 286 li
350 286 li
cp
f
382 278 mo
378 278 li
378 282 li
382 282 li
382 278 li
cp
f
390 290 mo
390 286 li
382 286 li
382 290 li
390 290 li
cp
f
386 270 mo
382 270 li
382 274 li
386 274 li
386 270 li
cp
f
394 278 mo
398 278 li
398 274 li
394 274 li
394 278 li
cp
f
394 242 mo
398 242 li
398 238 li
394 238 li
394 242 li
cp
.239216 .262745 .352941 rgb
f
358 230 mo
354 230 li
354 234 li
358 234 li
358 230 li
cp
f
370 238 mo
370 234 li
362 234 li
362 238 li
370 238 li
cp
f
374 274 mo
378 274 li
378 270 li
374 270 li
374 274 li
cp
f
362 290 mo
366 290 li
366 286 li
362 286 li
362 290 li
cp
f
358 258 mo
366 258 li
366 254 li
374 254 li
374 258 li
366 258 li
366 262 li
358 262 li
358 258 li
cp
350 274 mo
345.999 274 li
345.999 278 li
358 278 li
358 274 li
362 274 li
362 270 li
366 270 li
366 266 li
370 266 li
370 262 li
374 262 li
374 266 li
378 266 li
378 270 li
382 270 li
382 266 li
386 266 li
386 274 li
390 274 li
390 266 li
394 266 li
394 262 li
398 262 li
398 258 li
402 258 li
402 254 li
406 254 li
406 258 li
414 258 li
414 254 li
410 254 li
410 250 li
406 250 li
406 242 li
402 242 li
402 246 li
398 246 li
398 254 li
394 254 li
394 258 li
390 258 li
390 254 li
394 254 li
394 250 li
386 250 li
386 258 li
382 258 li
382 262 li
378 262 li
378 258 li
382 258 li
382 250 li
378 250 li
378 238 li
374 238 li
374 246 li
370 246 li
370 250 li
362 250 li
362 254 li
354 254 li
354 250 li
345.999 250 li
345.999 254 li
350 254 li
350 258 li
354 258 li
354 266 li
345.999 266 li
345.999 270 li
350 270 li
350 274 li
cp
f
329.999 270 mo
329.999 278 li
333.999 278 li
333.999 282 li
337.999 282 li
337.999 286 li
345.999 286 li
345.999 290 li
350 290 li
350 282 li
341.999 282 li
341.999 278 li
337.999 278 li
337.999 274 li
345.999 274 li
345.999 270 li
333.999 270 li
333.999 266 li
325.999 266 li
325.999 270 li
329.999 270 li
cp
f
378 290 mo
382 290 li
382 282 li
378 282 li
378 290 li
cp
f
382 282 mo
386 282 li
386 274 li
382 274 li
382 282 li
cp
f
382 242 mo
382 246 li
386 246 li
386 242 li
382 242 li
cp
.168627 .207843 .243137 rgb
f
386 250 mo
390 250 li
390 246 li
386 246 li
386 250 li
cp
f
410 246 mo
406 246 li
406 250 li
410 250 li
410 246 li
cp
f
398 266 mo
402 266 li
402 258 li
398 258 li
398 262 li
394 262 li
394 270 li
398 270 li
398 266 li
cp
f
406 270 mo
406 266 li
402 266 li
402 270 li
406 270 li
cp
f
358 286 mo
362 286 li
362 282 li
358 282 li
358 286 li
cp
f
366 278 mo
366 282 li
370 282 li
370 278 li
366 278 li
cp
f
358 278 mo
362 278 li
362 274 li
358 274 li
358 278 li
cp
f
382 258 mo
378 258 li
378 262 li
382 262 li
382 258 li
cp
f
374 262 mo
370 262 li
370 266 li
374 266 li
374 262 li
cp
f
366 270 mo
362 270 li
362 274 li
366 274 li
366 270 li
cp
f
378 274 mo
374 274 li
374 282 li
370 282 li
370 286 li
378 286 li
378 278 li
382 278 li
382 270 li
378 270 li
378 274 li
cp
f
354 282 mo
354 278 li
341.999 278 li
341.999 282 li
354 282 li
cp
f
370 266 mo
366 266 li
366 270 li
370 270 li
370 266 li
cp
f
382 270 mo
386 270 li
386 266 li
382 266 li
382 270 li
cp
f
390 282 mo
394 282 li
394 278 li
390 278 li
390 282 li
cp
f
406 262 mo
410 262 li
410 258 li
406 258 li
406 254 li
402 254 li
402 266 li
406 266 li
406 262 li
cp
.101961 .145098 .180392 rgb
f
358 286 mo
358 282 li
366 282 li
366 278 li
374 278 li
374 270 li
378 270 li
378 266 li
370 266 li
370 270 li
366 270 li
366 274 li
362 274 li
362 278 li
354 278 li
354 282 li
350 282 li
350 286 li
358 286 li
cp
f
382 250 mo
382 258 li
386 258 li
386 246 li
382 246 li
382 242 li
378 242 li
378 250 li
382 250 li
cp
f
386 282 mo
382 282 li
382 286 li
390 286 li
390 278 li
394 278 li
394 274 li
398 274 li
398 270 li
402 270 li
402 266 li
398 266 li
398 270 li
394 270 li
394 266 li
390 266 li
390 274 li
386 274 li
386 282 li
cp
f
254 274 mo
258 274 li
258 270 li
254 270 li
254 274 li
cp
.6 .654902 .811765 rgb
f
278 282 mo
274 282 li
274 286 li
278 286 li
278 282 li
cp
f
282 278 mo
278 278 li
278 282 li
282 282 li
282 278 li
cp
f
286 270 mo
282 270 li
282 274 li
286 274 li
286 270 li
cp
f
270 230 mo
270 222 li
266 222 li
266 226 li
262 226 li
262 230 li
270 230 li
cp
f
262 250 mo
258 250 li
258 254 li
262 254 li
262 250 li
cp
f
258 270 mo
266 270 li
266 266 li
258 266 li
258 270 li
cp
f
246 250 mo
250 250 li
250 242 li
254 242 li
254 238 li
266 238 li
266 234 li
262 234 li
262 230 li
258 230 li
258 234 li
250 234 li
250 238 li
246 238 li
246 246 li
242 246 li
242 254 li
246 254 li
246 250 li
cp
f
258 246 mo
258 242 li
254 242 li
254 246 li
258 246 li
cp
f
290 246 mo
294 246 li
294 242 li
290 242 li
290 246 li
cp
f
298 238 mo
302 238 li
302 234 li
294 234 li
294 242 li
298 242 li
298 238 li
cp
f
310 254 mo
306 254 li
306 258 li
310 258 li
310 254 li
cp
f
246 258 mo
250 258 li
250 250 li
246 250 li
246 258 li
cp
.356863 .384314 .486275 rgb
f
270 286 mo
274 286 li
274 282 li
270 282 li
270 286 li
cp
f
278 278 mo
282 278 li
282 274 li
278 274 li
278 278 li
cp
f
286 266 mo
282 266 li
282 270 li
286 270 li
286 266 li
cp
f
290 262 mo
286 262 li
286 266 li
290 266 li
290 262 li
cp
f
278 254 mo
278 250 li
274 250 li
274 254 li
278 254 li
cp
f
274 222 mo
270 222 li
270 230 li
274 230 li
274 222 li
cp
f
250 262 mo
254 262 li
254 258 li
250 258 li
250 262 li
cp
f
254 258 mo
258 258 li
258 250 li
262 250 li
262 246 li
270 246 li
270 242 li
262 242 li
262 238 li
254 238 li
254 242 li
258 242 li
258 246 li
254 246 li
254 242 li
250 242 li
250 250 li
254 250 li
254 258 li
cp
f
258 274 mo
262 274 li
262 270 li
258 270 li
258 274 li
cp
f
266 238 mo
274 238 li
274 234 li
270 234 li
270 230 li
262 230 li
262 234 li
266 234 li
266 238 li
cp
f
274 266 mo
266 266 li
266 274 li
274 274 li
274 266 li
cp
f
270 250 mo
262 250 li
262 258 li
274 258 li
274 254 li
270 254 li
270 250 li
cp
f
274 250 mo
274 246 li
270 246 li
270 250 li
274 250 li
cp
f
246 242 mo
242 242 li
242 246 li
246 246 li
246 242 li
cp
f
238 254 mo
242 254 li
242 250 li
238 250 li
238 254 li
cp
f
294 258 mo
290 258 li
290 262 li
294 262 li
294 258 li
cp
f
294 254 mo
298 254 li
298 242 li
294 242 li
294 246 li
290 246 li
290 250 li
294 250 li
294 254 li
cp
f
302 262 mo
306 262 li
306 258 li
302 258 li
302 262 li
cp
f
302 246 mo
306 246 li
306 234 li
302 234 li
302 238 li
298 238 li
298 242 li
302 242 li
302 246 li
cp
f
298 230 mo
298 234 li
302 234 li
302 230 li
298 230 li
cp
f
314 246 mo
310 246 li
310 254 li
314 254 li
314 246 li
cp
f
250 274 mo
254 274 li
254 270 li
258 270 li
258 266 li
250 266 li
250 274 li
cp
.239216 .262745 .352941 rgb
f
258 278 mo
258 274 li
254 274 li
254 278 li
258 278 li
cp
f
266 282 mo
266 278 li
258 278 li
258 282 li
266 282 li
cp
f
270 286 mo
270 282 li
266 282 li
266 286 li
270 286 li
cp
f
286 238 mo
286 234 li
282 234 li
282 238 li
286 238 li
cp
f
278 246 mo
274 246 li
274 250 li
278 250 li
278 246 li
cp
f
282 234 mo
282 230 li
278 230 li
278 234 li
282 234 li
cp
f
278 226 mo
274 226 li
274 230 li
278 230 li
278 226 li
cp
f
254 250 mo
250 250 li
250 258 li
254 258 li
254 250 li
cp
f
262 254 mo
258 254 li
258 258 li
262 258 li
262 254 li
cp
f
274 266 mo
274 270 li
278 270 li
278 266 li
282 266 li
282 262 li
286 262 li
286 254 li
290 254 li
290 250 li
278 250 li
278 254 li
274 254 li
274 258 li
270 258 li
270 262 li
258 262 li
258 266 li
274 266 li
cp
f
262 274 mo
266 274 li
266 270 li
262 270 li
262 274 li
cp
f
262 246 mo
262 250 li
270 250 li
270 246 li
262 246 li
cp
f
270 230 mo
270 234 li
274 234 li
274 230 li
270 230 li
cp
f
242 262 mo
246 262 li
246 266 li
250 266 li
250 258 li
246 258 li
246 254 li
238 254 li
238 258 li
242 258 li
242 262 li
cp
f
282 246 mo
286 246 li
286 242 li
282 242 li
282 246 li
cp
f
290 242 mo
290 238 li
286 238 li
286 242 li
290 242 li
cp
f
298 254 mo
294 254 li
294 258 li
298 258 li
298 254 li
cp
f
302 262 mo
302 258 li
298 258 li
298 262 li
302 262 li
cp
f
302 242 mo
298 242 li
298 250 li
302 250 li
302 242 li
cp
f
306 230 mo
302 230 li
302 234 li
306 234 li
306 230 li
cp
f
314 246 mo
314 242 li
310 242 li
310 246 li
314 246 li
cp
f
306 242 mo
310 242 li
310 234 li
306 234 li
306 242 li
cp
f
278 242 mo
278 234 li
274 234 li
274 238 li
262 238 li
262 242 li
278 242 li
cp
f
270 250 mo
270 254 li
274 254 li
274 250 li
270 250 li
cp
f
274 282 mo
278 282 li
278 278 li
274 278 li
274 282 li
cp
.168627 .207843 .243137 rgb
f
282 270 mo
278 270 li
278 274 li
282 274 li
282 270 li
cp
f
278 230 mo
274 230 li
274 234 li
278 234 li
278 230 li
cp
f
258 258 mo
254 258 li
254 262 li
258 262 li
258 258 li
cp
f
266 274 mo
258 274 li
258 278 li
266 278 li
266 274 li
cp
f
274 242 mo
270 242 li
270 246 li
274 246 li
274 242 li
cp
f
290 258 mo
294 258 li
294 254 li
290 254 li
290 258 li
cp
f
286 250 mo
290 250 li
290 242 li
286 242 li
286 250 li
cp
f
298 254 mo
298 258 li
306 258 li
306 254 li
298 254 li
cp
f
306 254 mo
310 254 li
310 242 li
306 242 li
306 254 li
cp
f
278 242 mo
286 242 li
286 238 li
282 238 li
282 234 li
278 234 li
278 242 li
cp
f
250 262 mo
250 266 li
258 266 li
258 262 li
250 262 li
cp
.101961 .145098 .180392 rgb
f
286 262 mo
282 262 li
282 266 li
286 266 li
286 262 li
cp
f
290 254 mo
286 254 li
286 262 li
290 262 li
290 254 li
cp
f
278 250 mo
286 250 li
286 246 li
282 246 li
282 242 li
274 242 li
274 246 li
278 246 li
278 250 li
cp
f
282 266 mo
278 266 li
278 270 li
282 270 li
282 266 li
cp
f
266 274 mo
266 282 li
274 282 li
274 278 li
278 278 li
278 270 li
274 270 li
274 274 li
266 274 li
cp
f
270 262 mo
270 258 li
258 258 li
258 262 li
270 262 li
cp
f
294 250 mo
290 250 li
290 254 li
294 254 li
294 250 li
cp
f
294 238 mo
290 238 li
290 242 li
294 242 li
294 238 li
cp
f
306 254 mo
306 246 li
302 246 li
302 250 li
298 250 li
298 254 li
306 254 li
cp
f
200 270 mo
200 266 li
204 266 li
204 270 li
200 270 li
cp
1 1 1 rgb
f
196 270 mo
196 266 li
200 266 li
200 270 li
196 270 li
cp
f
196 266 mo
196 262 li
200 262 li
200 266 li
196 266 li
cp
f
192 270 mo
192 266 li
196 266 li
196 270 li
192 270 li
cp
f
200 266 mo
200 262 li
204 262 li
204 266 li
200 266 li
cp
1 .545098 0 rgb
f
196 262 mo
196 258 li
200 258 li
200 262 li
196 262 li
cp
f
192 266 mo
192 262 li
196 262 li
196 266 li
192 266 li
cp
f
188 270 mo
188 266 li
192 266 li
192 270 li
188 270 li
cp
f
204 270 mo
204 266 li
208 266 li
208 270 li
204 270 li
cp
f
204 274 mo
204 270 li
208 270 li
208 274 li
204 274 li
cp
f
200 274 mo
200 270 li
204 270 li
204 274 li
200 274 li
cp
1 .941176 .34902 rgb
f
196 274 mo
196 270 li
200 270 li
200 274 li
196 274 li
cp
1 1 1 rgb
f
192 274 mo
192 270 li
196 270 li
196 274 li
192 274 li
cp
1 .941176 .34902 rgb
f
188 274 mo
188 270 li
192 270 li
192 274 li
188 274 li
cp
1 .545098 0 rgb
f
204 278 mo
204 274 li
208 274 li
208 278 li
204 278 li
cp
.65098 .180392 .0980392 rgb
f
188 278 mo
188 274 li
192 274 li
192 278 li
188 278 li
cp
f
192 278 mo
192 274 li
196 274 li
196 278 li
192 278 li
cp
1 .941176 .34902 rgb
f
196 278 mo
196 274 li
200 274 li
200 278 li
196 278 li
cp
f
200 278 mo
200 274 li
204 274 li
204 278 li
200 278 li
cp
f
200 282 mo
200 278 li
204 278 li
204 282 li
200 282 li
cp
1 .545098 0 rgb
f
196 282 mo
196 278 li
200 278 li
200 282 li
196 282 li
cp
1 .941176 .34902 rgb
f
192 282 mo
192 278 li
196 278 li
196 282 li
192 282 li
cp
1 .545098 0 rgb
f
192 286 mo
192 282 li
196 282 li
196 286 li
192 286 li
cp
.65098 .180392 .0980392 rgb
f
196 286 mo
196 282 li
200 282 li
200 286 li
196 286 li
cp
1 .545098 0 rgb
f
200 286 mo
200 282 li
204 282 li
204 286 li
200 286 li
cp
.65098 .180392 .0980392 rgb
f
196 290 mo
196 286 li
200 286 li
200 290 li
196 290 li
cp
1 .545098 0 rgb
f
196 294 mo
196 290 li
200 290 li
200 294 li
196 294 li
cp
.65098 .180392 .0980392 rgb
f
116 290 mo
120 290 li
120 294 li
116 294 li
116 290 li
cp
1 1 1 rgb
f
116 286 mo
120 286 li
120 290 li
116 290 li
116 286 li
cp
f
120 286 mo
124 286 li
124 290 li
120 290 li
120 286 li
cp
f
116 282 mo
120 282 li
120 286 li
116 286 li
116 282 li
cp
f
112 286 mo
116 286 li
116 290 li
112 290 li
112 286 li
cp
f
124 278 mo
128 278 li
128 282 li
124 282 li
124 278 li
cp
1 .545098 0 rgb
f
124 294 mo
128 294 li
128 298 li
124 298 li
124 294 li
cp
f
128 294 mo
132 294 li
132 298 li
128 298 li
128 294 li
cp
.0862745 .239216 .258824 rgb
f
128 298 mo
132 298 li
132 302 li
128 302 li
128 298 li
cp
1 .545098 0 rgb
f
116 274 mo
120 274 li
120 278 li
116 278 li
116 274 li
cp
f
104 274 mo
108 274 li
108 278 li
104 278 li
104 274 li
cp
f
100 274 mo
104 274 li
104 278 li
100 278 li
100 274 li
cp
.0862745 .239216 .258824 rgb
f
100 290 mo
104 290 li
104 294 li
100 294 li
100 290 li
cp
1 .545098 0 rgb
f
100 298 mo
104 298 li
104 302 li
100 302 li
100 298 li
cp
f
96 274 mo
100 274 li
100 278 li
96 278 li
96 274 li
cp
f
96 282 mo
100 282 li
100 286 li
96 286 li
96 282 li
cp
f
96 290 mo
100 290 li
100 294 li
96 294 li
96 290 li
cp
f
136 278 mo
140 278 li
140 282 li
136 282 li
136 278 li
cp
f
136 286 mo
140 286 li
140 290 li
136 290 li
136 286 li
cp
f
136 294 mo
140 294 li
140 298 li
136 298 li
136 294 li
cp
f
136 298 mo
140 298 li
140 302 li
136 302 li
136 298 li
cp
f
104 302 mo
108 302 li
108 306 li
104 306 li
104 302 li
cp
f
108 302 mo
112 302 li
112 306 li
108 306 li
108 302 li
cp
.0823529 .192157 .215686 rgb
f
116 302 mo
120 302 li
120 306 li
116 306 li
116 302 li
cp
1 .545098 0 rgb
f
128 302 mo
132 302 li
132 306 li
128 306 li
128 302 li
cp
f
132 294 mo
136 294 li
136 298 li
132 298 li
132 294 li
cp
.0823529 .192157 .215686 rgb
f
132 286 mo
136 286 li
136 290 li
132 290 li
132 286 li
cp
.0862745 .239216 .258824 rgb
f
132 282 mo
136 282 li
136 286 li
132 286 li
132 282 li
cp
1 .545098 0 rgb
f
132 278 mo
136 278 li
136 282 li
132 282 li
132 278 li
cp
.0862745 .239216 .258824 rgb
f
132 274 mo
136 274 li
136 278 li
132 278 li
132 274 li
cp
1 .545098 0 rgb
f
120 270 mo
124 270 li
124 274 li
120 274 li
120 270 li
cp
f
108 270 mo
112 270 li
112 274 li
108 274 li
108 270 li
cp
f
100 302 mo
104 302 li
104 306 li
100 306 li
100 302 li
cp
1 .941176 .34902 rgb
f
100 270 mo
104 270 li
104 274 li
100 274 li
100 270 li
cp
f
128 266 mo
132 266 li
132 270 li
128 270 li
128 266 li
cp
1 .545098 0 rgb
f
120 266 mo
124 266 li
124 270 li
120 270 li
120 266 li
cp
.0823529 .192157 .215686 rgb
f
104 266 mo
108 266 li
108 270 li
104 270 li
104 266 li
cp
.0862745 .239216 .258824 rgb
f
128 262 mo
132 262 li
132 266 li
128 266 li
128 262 li
cp
.65098 .180392 .0980392 rgb
f
120 262 mo
124 262 li
124 266 li
120 266 li
120 262 li
cp
f
124 250 mo
128 250 li
128 254 li
124 254 li
124 250 li
cp
.0823529 .192157 .215686 rgb
f
116 258 mo
120 258 li
120 262 li
116 262 li
116 258 li
cp
.168627 .113725 .12549 rgb
f
108 258 mo
112 258 li
112 262 li
108 262 li
108 258 li
cp
.65098 .180392 .0980392 rgb
f
84 250 mo
88 250 li
88 254 li
84 254 li
84 250 li
cp
f
80 322 mo
84 322 li
84 326 li
80 326 li
80 322 li
cp
f
144 326 mo
148 326 li
148 330 li
144 330 li
144 326 li
cp
f
164 286 mo
168 286 li
168 290 li
164 290 li
164 286 li
cp
f
152 254 mo
156 254 li
156 258 li
152 258 li
152 254 li
cp
f
120 310 mo
124 310 li
124 314 li
120 314 li
120 310 li
cp
.168627 .113725 .12549 rgb
f
104 310 mo
108 310 li
108 314 li
104 314 li
104 310 li
cp
.0823529 .192157 .215686 rgb
f
144 294 mo
144 298 li
140 298 li
140 294 li
144 294 li
cp
.65098 .180392 .0980392 rgb
f
144 274 mo
144 278 li
140 278 li
140 274 li
144 274 li
cp
.168627 .113725 .12549 rgb
f
148 290 mo
148 294 li
144 294 li
144 290 li
148 290 li
cp
.0862745 .239216 .258824 rgb
f
148 278 mo
148 282 li
144 282 li
144 278 li
148 278 li
cp
.168627 .113725 .12549 rgb
f
140 270 mo
140 274 li
136 274 li
136 270 li
140 270 li
cp
.65098 .180392 .0980392 rgb
f
104 262 mo
104 266 li
100 266 li
100 262 li
104 262 li
cp
f
96 302 mo
96 306 li
92 306 li
92 302 li
96 302 li
cp
.0823529 .192157 .215686 rgb
f
132 258 mo
136 258 li
136 262 li
132 262 li
132 258 li
cp
.65098 .180392 .0980392 rgb
f
156 278 mo
156 282 li
152 282 li
152 278 li
156 278 li
cp
.168627 .113725 .12549 rgb
f
144 262 mo
144 266 li
140 266 li
140 262 li
144 262 li
cp
.0823529 .192157 .215686 rgb
f
152 302 mo
152 306 li
148 306 li
148 302 li
152 302 li
cp
f
148 306 mo
148 310 li
144 310 li
144 306 li
148 306 li
cp
.65098 .180392 .0980392 rgb
f
160 294 mo
160 298 li
156 298 li
156 294 li
160 294 li
cp
.168627 .113725 .12549 rgb
f
160 274 mo
160 278 li
156 278 li
156 274 li
160 274 li
cp
.0823529 .192157 .215686 rgb
f
92 294 mo
92 298 li
88 298 li
88 294 li
92 294 li
cp
.168627 .113725 .12549 rgb
f
92 302 mo
92 306 li
88 306 li
88 302 li
92 302 li
cp
.65098 .180392 .0980392 rgb
f
88 282 mo
88 286 li
84 286 li
84 282 li
88 282 li
cp
.0862745 .239216 .258824 rgb
f
108 254 mo
112 254 li
112 258 li
108 258 li
108 254 li
cp
f
112 250 mo
116 250 li
116 254 li
112 254 li
112 250 li
cp
.168627 .113725 .12549 rgb
f
104 246 mo
108 246 li
108 250 li
104 250 li
104 246 li
cp
.0823529 .192157 .215686 rgb
f
132 246 mo
136 246 li
136 250 li
132 250 li
132 246 li
cp
.168627 .113725 .12549 rgb
f
132 314 mo
136 314 li
136 318 li
132 318 li
132 314 li
cp
.0823529 .192157 .215686 rgb
f
116 314 mo
120 314 li
120 318 li
116 318 li
116 314 li
cp
.65098 .180392 .0980392 rgb
f
116 322 mo
120 322 li
120 326 li
116 326 li
116 322 li
cp
.0823529 .192157 .215686 rgb
f
128 322 mo
132 322 li
132 326 li
128 326 li
128 322 li
cp
.168627 .113725 .12549 rgb
f
108 326 mo
112 326 li
112 330 li
108 330 li
108 326 li
cp
f
136 318 mo
140 318 li
140 322 li
136 322 li
136 318 li
cp
f
100 314 mo
104 314 li
104 318 li
100 318 li
100 314 li
cp
.65098 .180392 .0980392 rgb
f
96 262 mo
96 266 li
92 266 li
92 262 li
96 262 li
cp
f
96 310 mo
96 314 li
92 314 li
92 310 li
96 310 li
cp
f
80 298 mo
80 302 li
76 302 li
76 298 li
80 298 li
cp
.0823529 .192157 .215686 rgb
f
80 274 mo
80 278 li
76 278 li
76 274 li
80 274 li
cp
.65098 .180392 .0980392 rgb
f
96 298 mo
96 302 li
92 302 li
92 298 li
96 298 li
cp
.168627 .113725 .12549 rgb
f
96 290 mo
96 294 li
92 294 li
92 290 li
96 290 li
cp
.0862745 .239216 .258824 rgb
f
96 278 mo
96 282 li
92 282 li
92 278 li
96 278 li
cp
.0823529 .192157 .215686 rgb
f
116 306 mo
120 306 li
120 310 li
116 310 li
116 306 li
cp
1 .545098 0 rgb
f
120 290 mo
124 290 li
124 294 li
120 294 li
120 290 li
cp
1 .941176 .34902 rgb
f
120 282 mo
124 282 li
124 286 li
120 286 li
120 282 li
cp
f
112 282 mo
116 282 li
116 286 li
112 286 li
112 282 li
cp
f
112 290 mo
116 290 li
116 294 li
112 294 li
112 290 li
cp
f
112 294 mo
116 294 li
116 298 li
112 298 li
112 294 li
cp
.65098 .180392 .0980392 rgb
f
108 290 mo
112 290 li
112 294 li
108 294 li
108 290 li
cp
1 .545098 0 rgb
f
104 290 mo
108 290 li
108 294 li
104 294 li
104 290 li
cp
1 .941176 .34902 rgb
f
104 286 mo
108 286 li
108 290 li
104 290 li
104 286 li
cp
.0823529 .192157 .215686 rgb
f
104 278 mo
108 278 li
108 282 li
104 282 li
104 278 li
cp
1 .941176 .34902 rgb
f
112 274 mo
116 274 li
116 278 li
112 278 li
112 274 li
cp
.0862745 .239216 .258824 rgb
f
120 274 mo
124 274 li
124 278 li
120 278 li
120 274 li
cp
.168627 .113725 .12549 rgb
f
124 274 mo
128 274 li
128 278 li
124 278 li
124 274 li
cp
1 .941176 .34902 rgb
f
128 278 mo
132 278 li
132 282 li
128 282 li
128 278 li
cp
f
128 286 mo
132 286 li
132 290 li
128 290 li
128 286 li
cp
.168627 .113725 .12549 rgb
f
128 290 mo
132 290 li
132 294 li
128 294 li
128 290 li
cp
1 .941176 .34902 rgb
f
124 298 mo
128 298 li
128 302 li
124 302 li
124 298 li
cp
f
116 298 mo
120 298 li
120 302 li
116 302 li
116 298 li
cp
f
108 298 mo
112 298 li
112 302 li
108 302 li
108 298 li
cp
f
108 282 mo
112 282 li
112 286 li
108 286 li
108 282 li
cp
f
112 278 mo
116 278 li
116 282 li
112 282 li
112 278 li
cp
f
120 278 mo
124 278 li
124 282 li
120 282 li
120 278 li
cp
f
124 282 mo
128 282 li
128 286 li
124 286 li
124 282 li
cp
f
124 290 mo
128 290 li
128 294 li
124 294 li
124 290 li
cp
f
120 294 mo
124 294 li
124 298 li
120 298 li
120 294 li
cp
f
108 286 mo
112 286 li
112 290 li
108 290 li
108 286 li
cp
f
116 278 mo
120 278 li
120 282 li
116 282 li
116 278 li
cp
f
124 286 mo
128 286 li
128 290 li
124 290 li
124 286 li
cp
f
116 294 mo
120 294 li
120 298 li
116 298 li
116 294 li
cp
f
378 206 mo
374 206 li
374 210 li
378 210 li
378 206 li
cp
.6 .654902 .811765 rgb
f
390 206 mo
390 202 li
382 202 li
382 206 li
390 206 li
cp
f
402 218 mo
406 218 li
406 214 li
402 214 li
402 218 li
cp
f
402 206 mo
398 206 li
398 210 li
402 210 li
402 206 li
cp
f
398 210 mo
394 210 li
394 214 li
398 214 li
398 210 li
cp
f
382 206 mo
378 206 li
378 210 li
382 210 li
382 206 li
cp
.356863 .384314 .486275 rgb
f
410 202 mo
406 202 li
406 206 li
410 206 li
410 202 li
cp
f
410 214 mo
410 210 li
406 210 li
406 214 li
410 214 li
cp
f
402 222 mo
402 218 li
398 218 li
398 222 li
402 222 li
cp
f
390 218 mo
386 218 li
386 222 li
390 222 li
390 218 li
cp
f
398 206 mo
398 202 li
394 202 li
394 198 li
390 198 li
390 206 li
398 206 li
cp
f
406 206 mo
402 206 li
402 210 li
406 210 li
406 206 li
cp
f
402 210 mo
398 210 li
398 214 li
402 214 li
402 210 li
cp
f
398 218 mo
398 214 li
390 214 li
390 218 li
398 218 li
cp
f
378 210 mo
374 210 li
374 214 li
378 214 li
378 210 li
cp
f
394 198 mo
394 202 li
398 202 li
398 198 li
394 198 li
cp
.239216 .262745 .352941 rgb
f
398 202 mo
398 206 li
406 206 li
406 202 li
398 202 li
cp
f
410 206 mo
406 206 li
406 210 li
410 210 li
410 206 li
cp
f
406 210 mo
402 210 li
402 214 li
406 214 li
406 210 li
cp
f
402 214 mo
398 214 li
398 218 li
402 218 li
402 214 li
cp
f
398 222 mo
398 218 li
390 218 li
390 222 li
398 222 li
cp
f
382 218 mo
390 218 li
390 214 li
386 214 li
386 206 li
382 206 li
382 210 li
378 210 li
378 214 li
382 214 li
382 218 li
cp
f
390 206 mo
390 210 li
398 210 li
398 206 li
390 206 li
cp
f
402 198 mo
398 198 li
398 202 li
402 202 li
402 198 li
cp
.168627 .207843 .243137 rgb
f
382 214 mo
378 214 li
378 218 li
382 218 li
382 214 li
cp
f
390 206 mo
386 206 li
386 214 li
390 214 li
390 206 li
cp
f
394 210 mo
390 210 li
390 214 li
394 214 li
394 210 li
cp
.101961 .145098 .180392 rgb
f
274 188 mo
274 192 li
278 192 li
278 188 li
274 188 li
cp
1 .545098 0 rgb
f
250 188 mo
250 192 li
270 192 li
270 188 li
250 188 li
cp
f
282 168 mo
286 168 li
286 164 li
282 164 li
282 168 li
cp
1 1 1 rgb
f
270 176 mo
274 176 li
274 172 li
270 172 li
270 176 li
cp
f
266 180 mo
270 180 li
270 176 li
266 176 li
266 180 li
cp
f
274 172 mo
278 172 li
278 168 li
274 168 li
274 172 li
cp
f
306 176 mo
306 180 li
310 180 li
310 176 li
306 176 li
cp
f
282 196 mo
282 200 li
294 200 li
294 196 li
282 196 li
cp
.168627 .207843 .243137 rgb
f
262 196 mo
262 200 li
270 200 li
270 196 li
262 196 li
cp
f
306 196 mo
306 200 li
314 200 li
314 196 li
306 196 li
cp
f
282 204 mo
286 204 li
286 200 li
282 200 li
282 204 li
cp
.239216 .262745 .352941 rgb
f
290 204 mo
294 204 li
294 200 li
290 200 li
290 204 li
cp
f
262 204 mo
266 204 li
266 200 li
262 200 li
262 204 li
cp
f
310 200 mo
310 204 li
314 204 li
314 200 li
310 200 li
cp
f
286 208 mo
290 208 li
290 200 li
286 200 li
286 208 li
cp
.356863 .384314 .486275 rgb
f
258 208 mo
262 208 li
262 204 li
258 204 li
258 208 li
cp
f
314 204 mo
314 208 li
318 208 li
318 204 li
314 204 li
cp
f
250 192 mo
250 196 li
326 196 li
326 192 li
250 192 li
cp
.65098 .180392 .0980392 rgb
f
246 184 mo
246 192 li
250 192 li
250 188 li
270 188 li
270 192 li
274 192 li
274 188 li
278 188 li
278 192 li
330 192 li
330 184 li
246 184 li
cp
1 .196078 .196078 rgb
f
270 172 mo
274 172 li
274 168 li
270 168 li
270 172 li
cp
.368627 .694118 1 rgb
f
286 168 mo
286 172 li
290 172 li
290 176 li
298 176 li
298 172 li
294 172 li
294 168 li
286 168 li
cp
f
266 176 mo
270 176 li
270 172 li
266 172 li
266 176 li
cp
f
262 184 mo
266 184 li
266 176 li
262 176 li
262 184 li
cp
f
274 164 mo
274 168 li
282 168 li
282 164 li
274 164 li
cp
f
278 176 mo
274 176 li
274 184 li
282 184 li
282 180 li
278 180 li
278 176 li
cp
f
286 176 mo
286 172 li
278 172 li
278 176 li
282 176 li
282 180 li
290 180 li
290 176 li
286 176 li
cp
f
302 168 mo
302 172 li
306 172 li
306 168 li
302 168 li
cp
f
282 160 mo
282 164 li
294 164 li
294 160 li
282 160 li
cp
f
306 172 mo
306 176 li
310 176 li
310 172 li
306 172 li
cp
f
310 176 mo
310 184 li
314 184 li
314 176 li
310 176 li
cp
f
290 180 mo
290 184 li
302 184 li
302 176 li
298 176 li
298 180 li
290 180 li
cp
f
294 164 mo
294 168 li
302 168 li
302 164 li
294 164 li
cp
f
274 160 mo
274 164 li
282 164 li
282 160 li
274 160 li
cp
.156863 .32549 .878431 rgb
f
282 156 mo
282 160 li
294 160 li
294 156 li
282 156 li
cp
f
286 172 mo
286 168 li
278 168 li
278 172 li
286 172 li
cp
f
290 176 mo
290 172 li
286 172 li
286 176 li
290 176 li
cp
f
262 176 mo
266 176 li
266 172 li
262 172 li
262 176 li
cp
f
258 184 mo
262 184 li
262 176 li
258 176 li
258 184 li
cp
f
282 180 mo
282 184 li
290 184 li
290 180 li
282 180 li
cp
f
270 180 mo
266 180 li
266 184 li
274 184 li
274 176 li
270 176 li
270 180 li
cp
f
270 168 mo
274 168 li
274 164 li
270 164 li
270 168 li
cp
f
274 172 mo
274 176 li
278 176 li
278 172 li
274 172 li
cp
f
278 176 mo
278 180 li
282 180 li
282 176 li
278 176 li
cp
f
302 164 mo
302 160 li
294 160 li
294 164 li
302 164 li
cp
f
294 168 mo
294 164 li
286 164 li
286 168 li
294 168 li
cp
f
266 172 mo
270 172 li
270 168 li
266 168 li
266 172 li
cp
f
306 168 mo
306 172 li
310 172 li
310 168 li
306 168 li
cp
f
310 172 mo
310 176 li
314 176 li
314 172 li
310 172 li
cp
f
314 176 mo
314 184 li
318 184 li
318 176 li
314 176 li
cp
f
306 168 mo
306 164 li
302 164 li
302 168 li
306 168 li
cp
f
302 168 mo
294 168 li
294 172 li
298 172 li
298 176 li
302 176 li
302 184 li
310 184 li
310 180 li
306 180 li
306 172 li
302 172 li
302 168 li
cp
f
290 176 mo
290 180 li
298 180 li
298 176 li
290 176 li
cp
f
168 236 mo
168 240 li
172 240 li
172 236 li
168 236 li
cp
.807843 .309804 .898039 rgb
f
172 240 mo
172 244 li
220 244 li
220 240 li
172 240 li
cp
f
220 236 mo
220 240 li
224 240 li
224 236 li
220 236 li
cp
f
176 224 mo
176 228 li
216 228 li
216 224 li
224 224 li
224 220 li
212 220 li
212 224 li
180 224 li
180 220 li
168 220 li
168 224 li
176 224 li
cp
.282353 .329412 .317647 rgb
f
160 228 mo
160 232 li
164 232 li
164 228 li
160 228 li
cp
f
168 224 mo
164 224 li
164 228 li
168 228 li
168 224 li
cp
f
164 232 mo
164 236 li
172 236 li
172 232 li
164 232 li
cp
f
228 228 mo
228 232 li
232 232 li
232 228 li
228 228 li
cp
f
228 228 mo
228 224 li
224 224 li
224 228 li
228 228 li
cp
f
220 232 mo
220 236 li
228 236 li
228 232 li
220 232 li
cp
f
172 236 mo
172 240 li
220 240 li
220 236 li
172 236 li
cp
f
216 224 mo
216 228 li
176 228 li
176 224 li
168 224 li
168 228 li
172 228 li
172 232 li
220 232 li
220 228 li
224 228 li
224 224 li
216 224 li
cp
.509804 .580392 .560784 rgb
f
208 224 mo
208 212 li
204 212 li
204 220 li
200 220 li
200 212 li
204 212 li
204 208 li
200 208 li
200 204 li
196 204 li
196 220 li
184 220 li
184 224 li
208 224 li
cp
.156863 .32549 .878431 rgb
f
180 232 mo
180 236 li
188 236 li
188 232 li
180 232 li
cp
f
192 232 mo
192 236 li
200 236 li
200 232 li
192 232 li
cp
f
204 232 mo
204 236 li
212 236 li
212 232 li
204 232 li
cp
f
168 228 mo
168 232 li
172 232 li
172 228 li
168 228 li
cp
f
172 236 mo
176 236 li
176 232 li
172 232 li
172 236 li
cp
f
220 228 mo
220 232 li
224 232 li
224 228 li
220 228 li
cp
f
216 236 mo
220 236 li
220 232 li
216 232 li
216 236 li
cp
f
184 208 mo
184 212 li
188 212 li
188 208 li
184 208 li
cp
.368627 .694118 1 rgb
f
192 200 mo
192 204 li
200 204 li
200 200 li
192 200 li
cp
f
188 208 mo
192 208 li
192 204 li
188 204 li
188 208 li
cp
f
200 204 mo
200 208 li
204 208 li
204 204 li
200 204 li
cp
f
188 212 mo
188 220 li
196 220 li
196 208 li
192 208 li
192 212 li
188 212 li
cp
f
200 216 mo
204 216 li
204 212 li
200 212 li
200 216 li
cp
f
204 208 mo
204 212 li
208 212 li
208 208 li
204 208 li
cp
f
180 224 mo
184 224 li
184 212 li
180 212 li
180 224 li
cp
f
208 212 mo
208 224 li
212 224 li
212 212 li
208 212 li
cp
f
188 212 mo
192 212 li
192 208 li
188 208 li
188 212 li
cp
1 1 1 rgb
f
192 208 mo
196 208 li
196 204 li
192 204 li
192 208 li
cp
f
184 220 mo
188 220 li
188 212 li
184 212 li
184 220 li
cp
f
188 236 mo
192 236 li
192 232 li
188 232 li
188 236 li
cp
f
200 236 mo
204 236 li
204 232 li
200 232 li
200 236 li
cp
f
164 232 mo
168 232 li
168 228 li
164 228 li
164 232 li
cp
f
176 236 mo
180 236 li
180 232 li
176 232 li
176 236 li
cp
f
224 228 mo
224 232 li
228 232 li
228 228 li
224 228 li
cp
f
212 236 mo
216 236 li
216 232 li
212 232 li
212 236 li
cp
f
200 220 mo
204 220 li
204 216 li
200 216 li
200 220 li
cp
f
104 176 mo
104 172 li
96 172 li
96 176 li
92 176 li
92 184 li
96 184 li
96 188 li
104 188 li
104 184 li
100 184 li
108 184 li
108 176 li
104 176 li
cp
.368627 .694118 1 rgb
f
116 164 mo
116 168 li
120 168 li
120 164 li
116 164 li
cp
.313726 .32549 .396078 rgb
f
80 196 mo
84 196 li
84 184 li
80 184 li
80 196 li
cp
f
104 200 mo
108 200 li
108 196 li
104 196 li
104 200 li
cp
f
104 160 mo
104 164 li
116 164 li
116 160 li
104 160 li
cp
f
96 164 mo
96 168 li
104 168 li
104 164 li
96 164 li
cp
.443137 .454902 .721569 rgb
f
124 220 mo
128 220 li
128 216 li
124 216 li
124 220 li
cp
f
92 172 mo
96 172 li
96 168 li
92 168 li
92 172 li
cp
f
128 216 mo
132 216 li
132 212 li
128 212 li
128 216 li
cp
f
132 212 mo
136 212 li
136 208 li
132 208 li
132 212 li
cp
f
88 176 mo
84 176 li
84 188 li
88 188 li
88 176 li
cp
f
92 188 mo
88 188 li
88 192 li
92 192 li
92 188 li
cp
f
84 192 mo
84 196 li
88 196 li
88 192 li
84 192 li
cp
f
92 196 mo
88 196 li
88 200 li
92 200 li
92 204 li
96 204 li
96 192 li
92 192 li
92 196 li
cp
f
124 192 mo
120 192 li
120 196 li
124 196 li
124 192 li
cp
f
116 200 mo
120 200 li
120 196 li
116 196 li
116 200 li
cp
f
136 204 mo
136 208 li
140 208 li
140 204 li
136 204 li
cp
f
116 164 mo
112 164 li
112 172 li
116 172 li
116 164 li
cp
f
124 164 mo
124 168 li
128 168 li
128 164 li
124 164 li
cp
.0470588 .0980392 .580392 rgb
f
100 168 mo
96 168 li
96 172 li
100 172 li
100 168 li
cp
f
116 168 mo
116 172 li
120 172 li
120 168 li
116 168 li
cp
f
132 168 mo
128 168 li
128 176 li
136 176 li
136 172 li
132 172 li
132 168 li
cp
f
108 212 mo
108 216 li
112 216 li
112 212 li
108 212 li
cp
f
116 216 mo
120 216 li
120 212 li
116 212 li
116 216 li
cp
f
124 216 mo
128 216 li
128 212 li
124 212 li
124 216 li
cp
f
96 176 mo
96 172 li
88 172 li
88 176 li
96 176 li
cp
f
128 212 mo
132 212 li
132 208 li
128 208 li
128 212 li
cp
f
92 180 mo
88 180 li
88 184 li
92 184 li
92 180 li
cp
f
112 180 mo
108 180 li
108 184 li
112 184 li
112 180 li
cp
f
124 188 mo
132 188 li
132 184 li
128 184 li
128 180 li
124 180 li
124 172 li
120 172 li
120 180 li
116 180 li
116 188 li
112 188 li
112 196 li
108 196 li
108 200 li
116 200 li
116 196 li
120 196 li
120 192 li
124 192 li
124 188 li
cp
f
92 192 mo
88 192 li
88 196 li
92 196 li
92 192 li
cp
f
100 196 mo
96 196 li
96 204 li
100 204 li
100 196 li
cp
f
132 200 mo
136 200 li
136 196 li
132 196 li
132 200 li
cp
f
140 188 mo
140 200 li
144 200 li
144 188 li
140 188 li
cp
f
80 196 mo
80 200 li
84 200 li
84 196 li
80 196 li
cp
f
108 168 mo
104 168 li
104 172 li
108 172 li
108 168 li
cp
f
108 184 mo
104 184 li
104 188 li
108 188 li
108 184 li
cp
f
104 192 mo
104 196 li
108 196 li
108 192 li
104 192 li
cp
f
112 220 mo
116 220 li
116 216 li
112 216 li
112 220 li
cp
f
108 204 mo
108 200 li
104 200 li
104 204 li
100 204 li
100 208 li
92 208 li
92 204 li
88 204 li
88 200 li
84 200 li
84 208 li
88 208 li
88 212 li
104 212 li
104 208 li
120 208 li
120 200 li
116 200 li
116 204 li
108 204 li
cp
f
100 220 mo
104 220 li
104 216 li
100 216 li
100 220 li
cp
.317647 .32549 .501961 rgb
f
120 220 mo
124 220 li
124 216 li
120 216 li
120 220 li
cp
f
92 216 mo
96 216 li
96 212 li
92 212 li
92 216 li
cp
f
136 180 mo
136 184 li
140 184 li
140 180 li
136 180 li
cp
f
108 220 mo
108 224 li
120 224 li
120 220 li
108 220 li
cp
f
116 212 mo
120 212 li
120 208 li
116 208 li
116 212 li
cp
.101961 .145098 .180392 rgb
f
140 176 mo
136 176 li
136 180 li
140 180 li
140 176 li
cp
f
128 180 mo
128 184 li
132 184 li
132 180 li
128 180 li
cp
f
84 196 mo
84 200 li
88 200 li
88 196 li
84 196 li
cp
f
92 204 mo
92 208 li
100 208 li
100 204 li
92 204 li
cp
f
88 200 mo
88 204 li
92 204 li
92 200 li
88 200 li
cp
f
104 216 mo
104 220 li
112 220 li
112 216 li
104 216 li
cp
f
132 184 mo
132 188 li
124 188 li
124 196 li
120 196 li
120 208 li
132 208 li
132 196 li
136 196 li
136 200 li
140 200 li
140 188 li
144 188 li
144 184 li
132 184 li
cp
f
112 216 mo
116 216 li
116 212 li
112 212 li
112 216 li
cp
f
120 160 mo
116 160 li
116 164 li
120 164 li
120 160 li
cp
.219608 .235294 .337255 rgb
f
124 168 mo
124 164 li
120 164 li
120 168 li
124 168 li
cp
f
116 220 mo
120 220 li
120 216 li
116 216 li
116 220 li
cp
f
120 208 mo
120 216 li
124 216 li
124 212 li
128 212 li
128 208 li
120 208 li
cp
f
128 176 mo
128 180 li
132 180 li
132 184 li
136 184 li
136 176 li
128 176 li
cp
f
104 224 mo
108 224 li
108 220 li
104 220 li
104 224 li
cp
f
116 208 mo
104 208 li
104 212 li
96 212 li
96 220 li
100 220 li
100 216 li
108 216 li
108 212 li
116 212 li
116 208 li
cp
f
132 208 mo
136 208 li
136 200 li
132 200 li
132 208 li
cp
f
100 168 mo
100 172 li
104 172 li
104 168 li
100 168 li
cp
.156863 .32549 .878431 rgb
f
120 168 mo
120 172 li
124 172 li
124 180 li
128 180 li
128 168 li
120 168 li
cp
f
92 176 mo
88 176 li
88 180 li
92 180 li
92 176 li
cp
f
84 192 mo
88 192 li
88 188 li
84 188 li
84 192 li
cp
f
108 200 mo
108 204 li
116 204 li
116 200 li
108 200 li
cp
f
112 172 mo
112 164 li
104 164 li
104 168 li
108 168 li
108 172 li
104 172 li
104 176 li
108 176 li
108 180 li
112 180 li
112 184 li
108 184 li
108 188 li
96 188 li
96 184 li
88 184 li
88 188 li
92 188 li
92 192 li
96 192 li
96 196 li
100 196 li
100 204 li
104 204 li
104 192 li
108 192 li
108 196 li
112 196 li
112 188 li
116 188 li
116 180 li
120 180 li
120 172 li
112 172 li
cp
f
136 200 mo
136 204 li
140 204 li
140 200 li
136 200 li
cp
f
140 160 mo
140 164 li
144 164 li
144 160 li
140 160 li
cp
1 .196078 .196078 rgb
f
140 168 mo
144 168 li
144 164 li
140 164 li
140 168 li
cp
f
140 172 mo
144 172 li
144 168 li
140 168 li
140 172 li
cp
f
136 176 mo
140 176 li
140 172 li
136 172 li
136 176 li
cp
f
132 176 mo
132 180 li
140 180 li
140 176 li
132 176 li
cp
f
128 180 mo
128 184 li
136 184 li
136 180 li
128 180 li
cp
f
128 184 mo
128 188 li
136 188 li
136 184 li
128 184 li
cp
f
124 188 mo
124 192 li
132 192 li
132 188 li
124 188 li
cp
f
120 192 mo
120 196 li
128 196 li
128 192 li
120 192 li
cp
f
116 196 mo
116 204 li
120 204 li
120 200 li
124 200 li
124 196 li
116 196 li
cp
f
80 220 mo
80 224 li
92 224 li
92 220 li
80 220 li
cp
f
104 208 mo
104 212 li
104 208 li
100 208 li
100 212 li
96 212 li
96 216 li
92 216 li
92 220 li
100 220 li
100 216 li
108 216 li
108 208 li
104 208 li
cp
f
112 204 mo
108 204 li
108 212 li
112 212 li
112 204 li
cp
f
112 208 mo
116 208 li
116 200 li
112 200 li
112 208 li
cp
f
140 168 mo
140 164 li
128 164 li
128 168 li
140 168 li
cp
.65098 .180392 .0980392 rgb
f
140 160 mo
136 160 li
136 164 li
140 164 li
140 160 li
cp
f
140 172 mo
140 176 li
144 176 li
144 172 li
140 172 li
cp
f
84 208 mo
84 216 li
80 216 li
80 220 li
88 220 li
88 208 li
84 208 li
cp
f
92 224 mo
96 224 li
96 220 li
92 220 li
92 224 li
cp
f
108 216 mo
112 216 li
112 212 li
108 212 li
108 216 li
cp
f
100 220 mo
104 220 li
104 216 li
100 216 li
100 220 li
cp
f
132 192 mo
136 192 li
136 188 li
132 188 li
132 192 li
cp
f
136 184 mo
140 184 li
140 180 li
136 180 li
136 184 li
cp
f
128 196 mo
132 196 li
132 192 li
128 192 li
128 196 li
cp
f
124 200 mo
128 200 li
128 196 li
124 196 li
124 200 li
cp
f
112 208 mo
112 212 li
116 212 li
116 208 li
112 208 li
cp
f
116 208 mo
120 208 li
120 204 li
116 204 li
116 208 li
cp
f
120 204 mo
124 204 li
124 200 li
120 200 li
120 204 li
cp
f
48 286 mo
44 286 li
44 290 li
48 290 li
48 286 li
cp
.156863 .32549 .878431 rgb
f
48 282 mo
44 282 li
44 286 li
48 286 li
48 282 li
cp
.368627 .694118 1 rgb
f
48 274 mo
44 274 li
44 278 li
48 278 li
48 274 li
cp
f
48 270 mo
44 270 li
44 274 li
48 274 li
48 270 li
cp
f
48 266 mo
44 266 li
44 270 li
48 270 li
48 266 li
cp
1 1 1 rgb
f
44 290 mo
40 290 li
40 294 li
44 294 li
44 290 li
cp
.156863 .32549 .878431 rgb
f
44 282 mo
40 282 li
40 286 li
44 286 li
44 282 li
cp
f
44 278 mo
40 278 li
40 282 li
44 282 li
44 278 li
cp
.368627 .694118 1 rgb
f
44 274 mo
40 274 li
40 278 li
44 278 li
44 274 li
cp
f
44 270 mo
40 270 li
40 274 li
44 274 li
44 270 li
cp
1 1 1 rgb
f
44 266 mo
40 266 li
40 270 li
44 270 li
44 266 li
cp
.368627 .694118 1 rgb
f
48 262 mo
44 262 li
44 266 li
48 266 li
48 262 li
cp
1 1 1 rgb
f
44 262 mo
40 262 li
40 266 li
44 266 li
44 262 li
cp
f
48 206 mo
44 206 li
44 210 li
48 210 li
48 206 li
cp
.156863 .32549 .878431 rgb
f
48 202 mo
44 202 li
44 206 li
48 206 li
48 202 li
cp
.368627 .694118 1 rgb
f
48 186 mo
44 186 li
44 190 li
48 190 li
48 186 li
cp
f
40 182 mo
44 182 li
44 186 li
40 186 li
40 182 li
cp
f
40 178 mo
44 178 li
44 182 li
40 182 li
40 178 li
cp
1 1 1 rgb
f
44 210 mo
40 210 li
40 214 li
44 214 li
44 210 li
cp
.156863 .32549 .878431 rgb
f
48 190 mo
44 190 li
44 194 li
48 194 li
48 190 li
cp
.368627 .694118 1 rgb
f
48 194 mo
44 194 li
44 198 li
48 198 li
48 194 li
cp
.156863 .32549 .878431 rgb
f
44 194 mo
40 194 li
40 198 li
44 198 li
44 194 li
cp
1 1 1 rgb
f
44 202 mo
40 202 li
40 206 li
44 206 li
44 202 li
cp
.156863 .32549 .878431 rgb
f
44 198 mo
40 198 li
40 202 li
44 202 li
44 198 li
cp
.368627 .694118 1 rgb
f
44 186 mo
40 186 li
40 190 li
44 190 li
44 186 li
cp
1 1 1 rgb
f
44 182 mo
48 182 li
48 186 li
44 186 li
44 182 li
cp
f
44 178 mo
48 178 li
48 182 li
44 182 li
44 178 li
cp
.368627 .694118 1 rgb
f
48 170 mo
44 170 li
44 174 li
48 174 li
48 170 li
cp
1 1 1 rgb
f
44 170 mo
40 170 li
40 174 li
44 174 li
44 170 li
cp
f
48 174 mo
44 174 li
44 178 li
48 178 li
48 174 li
cp
f
44 174 mo
40 174 li
40 178 li
44 178 li
44 174 li
cp
f
40 362 mo
44 362 li
44 366 li
40 366 li
40 362 li
cp
.156863 .32549 .878431 rgb
f
40 358 mo
44 358 li
44 362 li
40 362 li
40 358 li
cp
.368627 .694118 1 rgb
f
48 342 mo
44 342 li
44 346 li
48 346 li
48 342 li
cp
1 1 1 rgb
f
44 366 mo
48 366 li
48 370 li
44 370 li
44 366 li
cp
.156863 .32549 .878431 rgb
f
40 350 mo
44 350 li
44 354 li
40 354 li
40 350 li
cp
f
44 350 mo
48 350 li
48 354 li
44 354 li
44 350 li
cp
1 1 1 rgb
f
44 346 mo
48 346 li
48 350 li
44 350 li
44 346 li
cp
.368627 .694118 1 rgb
f
44 358 mo
48 358 li
48 362 li
44 362 li
44 358 li
cp
.156863 .32549 .878431 rgb
f
44 354 mo
48 354 li
48 358 li
44 358 li
44 354 li
cp
.368627 .694118 1 rgb
f
44 346 mo
40 346 li
40 350 li
44 350 li
44 346 li
cp
f
40 334 mo
44 334 li
44 338 li
40 338 li
40 334 li
cp
1 1 1 rgb
f
40 338 mo
44 338 li
44 342 li
40 342 li
40 338 li
cp
f
44 334 mo
48 334 li
48 338 li
44 338 li
44 334 li
cp
f
40 342 mo
44 342 li
44 346 li
40 346 li
40 342 li
cp
.368627 .694118 1 rgb
f
44 338 mo
48 338 li
48 342 li
44 342 li
44 338 li
cp
1 1 1 rgb
f
48 242 mo
44 242 li
44 246 li
48 246 li
48 242 li
cp
.156863 .32549 .878431 rgb
f
40 238 mo
44 238 li
44 242 li
40 242 li
40 238 li
cp
f
40 230 mo
44 230 li
44 234 li
40 234 li
40 230 li
cp
1 1 1 rgb
f
44 246 mo
40 246 li
40 250 li
44 250 li
44 246 li
cp
.156863 .32549 .878431 rgb
f
44 238 mo
48 238 li
48 242 li
44 242 li
44 238 li
cp
.368627 .694118 1 rgb
f
44 234 mo
40 234 li
40 238 li
44 238 li
44 234 li
cp
f
44 230 mo
48 230 li
48 234 li
44 234 li
44 230 li
cp
f
40 226 mo
44 226 li
44 230 li
40 230 li
40 226 li
cp
1 1 1 rgb
f
44 226 mo
48 226 li
48 230 li
44 230 li
44 226 li
cp
f
40 318 mo
44 318 li
44 322 li
40 322 li
40 318 li
cp
.156863 .32549 .878431 rgb
f
48 314 mo
44 314 li
44 318 li
48 318 li
48 314 li
cp
f
44 314 mo
40 314 li
40 318 li
44 318 li
44 314 li
cp
.368627 .694118 1 rgb
f
44 310 mo
48 310 li
48 314 li
44 314 li
44 310 li
cp
f
44 310 mo
40 310 li
40 314 li
44 314 li
44 310 li
cp
f
48 306 mo
44 306 li
44 310 li
48 310 li
48 306 li
cp
1 1 1 rgb
f
44 306 mo
40 306 li
40 310 li
44 310 li
44 306 li
cp
f
410 140 mo
410 168 li
406 168 li
406 176 li
402 176 li
402 180 li
398 180 li
398 184 li
394 184 li
394 188 li
386 188 li
386 192 li
358 192 li
358 188 li
350 188 li
350 184 li
346 184 li
346 180 li
342 180 li
342 176 li
338 176 li
338 168 li
334 168 li
334 140 li
338 140 li
338 132 li
342 132 li
342 128 li
346 128 li
346 124 li
350 124 li
350 120 li
358 120 li
358 116 li
386 116 li
386 120 li
394 120 li
394 124 li
398 124 li
398 128 li
402 128 li
402 132 li
406 132 li
406 140 li
410 140 li
cp
.168627 .113725 .12549 rgb
f
366 136 mo
362 136 li
362 132 li
354 132 li
354 136 li
350 136 li
350 144 li
354 144 li
354 140 li
358 140 li
358 144 li
362 144 li
362 140 li
366 140 li
366 136 li
cp
1 1 1 rgb
f
366 144 mo
366 148 li
370 148 li
370 144 li
366 144 li
cp
f
354 128 mo
350 128 li
350 132 li
354 132 li
354 128 li
cp
1 .545098 0 rgb
f
366 128 mo
366 132 li
374 132 li
374 128 li
370 128 li
370 124 li
374 124 li
374 128 li
382 128 li
382 132 li
386 132 li
386 136 li
390 136 li
390 132 li
394 132 li
394 128 li
386 128 li
386 124 li
378 124 li
378 120 li
362 120 li
362 124 li
354 124 li
354 128 li
366 128 li
cp
f
350 132 mo
346 132 li
346 136 li
350 136 li
350 132 li
cp
f
398 136 mo
398 132 li
394 132 li
394 136 li
398 136 li
cp
f
402 140 mo
402 136 li
398 136 li
398 140 li
402 140 li
cp
f
402 144 mo
402 148 li
406 148 li
406 144 li
402 144 li
cp
f
346 176 mo
350 176 li
350 172 li
358 172 li
358 168 li
346 168 li
346 176 li
cp
f
394 172 mo
398 172 li
398 168 li
394 168 li
394 172 li
cp
f
398 152 mo
398 148 li
394 148 li
394 152 li
398 152 li
cp
f
390 156 mo
390 160 li
398 160 li
398 156 li
390 156 li
cp
f
342 152 mo
342 148 li
346 148 li
346 152 li
342 152 li
cp
350 144 mo
346 144 li
346 136 li
342 136 li
342 144 li
338 144 li
338 164 li
342 164 li
342 168 li
346 168 li
346 160 li
342 160 li
342 156 li
350 156 li
350 144 li
cp
f
354 144 mo
354 148 li
358 148 li
358 144 li
354 144 li
cp
f
358 176 mo
358 184 li
362 184 li
362 180 li
366 180 li
366 176 li
358 176 li
cp
f
358 160 mo
358 156 li
362 156 li
362 148 li
358 148 li
358 152 li
354 152 li
354 156 li
350 156 li
350 160 li
354 160 li
354 164 li
362 164 li
362 172 li
366 172 li
366 160 li
358 160 li
cp
f
370 176 mo
370 172 li
366 172 li
366 176 li
370 176 li
cp
f
366 156 mo
366 160 li
374 160 li
374 156 li
366 156 li
cp
f
378 184 mo
382 184 li
382 180 li
378 180 li
378 184 li
cp
f
366 148 mo
366 152 li
374 152 li
374 156 li
378 156 li
378 152 li
382 152 li
382 148 li
366 148 li
cp
f
374 172 mo
374 176 li
382 176 li
382 172 li
374 172 li
cp
f
386 180 mo
390 180 li
390 176 li
386 176 li
386 180 li
cp
f
390 148 mo
394 148 li
394 144 li
390 144 li
390 140 li
378 140 li
378 136 li
382 136 li
382 132 li
374 132 li
374 136 li
370 136 li
370 140 li
374 140 li
374 144 li
382 144 li
382 148 li
386 148 li
386 152 li
382 152 li
382 156 li
390 156 li
390 148 li
cp
f
378 160 mo
378 164 li
370 164 li
370 168 li
382 168 li
382 164 li
386 164 li
386 160 li
378 160 li
cp
f
390 176 mo
394 176 li
394 172 li
390 172 li
390 176 li
cp
f
386 164 mo
386 168 li
394 168 li
394 164 li
386 164 li
cp
f
398 164 mo
402 164 li
402 160 li
398 160 li
398 164 li
cp
f
390 124 mo
386 124 li
386 128 li
390 128 li
390 124 li
cp
.65098 .180392 .0980392 rgb
f
382 120 mo
378 120 li
378 124 li
382 124 li
382 120 li
cp
f
342 172 mo
346 172 li
346 168 li
342 168 li
342 172 li
cp
f
362 172 mo
362 164 li
354 164 li
354 160 li
346 160 li
346 168 li
358 168 li
358 172 li
350 172 li
350 180 li
354 180 li
354 184 li
358 184 li
358 176 li
366 176 li
366 172 li
362 172 li
cp
f
378 128 mo
378 132 li
382 132 li
382 128 li
378 128 li
cp
f
374 124 mo
370 124 li
370 128 li
374 128 li
374 124 li
cp
f
374 176 mo
374 172 li
382 172 li
382 176 li
374 176 li
cp
386 168 mo
386 164 li
382 164 li
382 168 li
370 168 li
370 164 li
366 164 li
366 172 li
370 172 li
370 176 li
366 176 li
366 180 li
362 180 li
362 188 li
366 188 li
366 184 li
378 184 li
378 180 li
386 180 li
386 176 li
390 176 li
390 172 li
394 172 li
394 168 li
386 168 li
cp
f
390 160 mo
390 156 li
382 156 li
382 152 li
378 152 li
378 156 li
374 156 li
374 164 li
378 164 li
378 160 li
386 160 li
386 164 li
394 164 li
394 168 li
398 168 li
398 160 li
390 160 li
cp
f
398 144 mo
398 136 li
394 136 li
394 132 li
390 132 li
390 136 li
386 136 li
386 132 li
382 132 li
382 136 li
378 136 li
378 140 li
390 140 li
390 144 li
394 144 li
394 148 li
398 148 li
398 152 li
394 152 li
394 148 li
390 148 li
390 156 li
398 156 li
398 160 li
402 160 li
402 144 li
398 144 li
cp
f
402 140 mo
398 140 li
398 144 li
402 144 li
402 140 li
cp
1 .941176 .34902 rgb
f
402 148 mo
402 164 li
406 164 li
406 148 li
402 148 li
cp
f
346 148 mo
342 148 li
342 152 li
346 152 li
346 148 li
cp
f
342 156 mo
342 160 li
350 160 li
350 156 li
342 156 li
cp
f
350 136 mo
346 136 li
346 144 li
350 144 li
350 136 li
cp
f
354 132 mo
350 132 li
350 136 li
354 136 li
354 132 li
cp
f
354 144 mo
350 144 li
350 156 li
354 156 li
354 152 li
358 152 li
358 148 li
354 148 li
354 144 li
cp
f
354 140 mo
354 144 li
358 144 li
358 140 li
354 140 li
cp
f
366 156 mo
374 156 li
374 152 li
366 152 li
366 144 li
370 144 li
370 148 li
382 148 li
382 144 li
374 144 li
374 140 li
370 140 li
370 136 li
374 136 li
374 132 li
366 132 li
366 128 li
354 128 li
354 132 li
362 132 li
362 136 li
366 136 li
366 140 li
362 140 li
362 144 li
358 144 li
358 148 li
362 148 li
362 156 li
358 156 li
358 160 li
366 160 li
366 156 li
cp
f
374 164 mo
374 160 li
366 160 li
366 164 li
374 164 li
cp
f
378 128 mo
374 128 li
374 132 li
378 132 li
378 128 li
cp
f
386 152 mo
386 148 li
382 148 li
382 152 li
386 152 li
cp
f
390 180 mo
394 180 li
394 176 li
390 176 li
390 180 li
cp
f
382 180 mo
382 184 li
390 184 li
390 180 li
382 180 li
cp
f
366 184 mo
366 188 li
382 188 li
382 184 li
366 184 li
cp
f
394 176 mo
398 176 li
398 172 li
394 172 li
394 176 li
cp
f
398 172 mo
402 172 li
402 164 li
398 164 li
398 172 li
cp
f
196 140 mo
192 140 li
192 152 li
200 152 li
200 148 li
196 148 li
196 140 li
cp
.101961 .145098 .180392 rgb
f
188 136 mo
188 140 li
192 140 li
192 136 li
188 136 li
cp
f
184 140 mo
180 140 li
180 144 li
184 144 li
184 140 li
cp
f
180 156 mo
188 156 li
188 152 li
180 152 li
180 156 li
cp
f
204 144 mo
204 148 li
208 148 li
208 144 li
204 144 li
cp
f
200 160 mo
204 160 li
204 156 li
200 156 li
200 160 li
cp
f
200 144 mo
204 144 li
204 128 li
200 128 li
200 144 li
cp
f
208 120 mo
204 120 li
204 128 li
208 128 li
208 120 li
cp
f
212 116 mo
208 116 li
208 120 li
212 120 li
212 116 li
cp
f
232 136 mo
228 136 li
228 140 li
232 140 li
232 136 li
cp
f
236 144 mo
240 144 li
240 140 li
236 140 li
236 144 li
cp
f
232 152 mo
232 156 li
240 156 li
240 152 li
232 152 li
cp
f
212 148 mo
216 148 li
216 144 li
212 144 li
212 148 li
cp
f
220 152 mo
228 152 li
228 140 li
224 140 li
224 148 li
220 148 li
220 152 li
cp
f
216 160 mo
220 160 li
220 156 li
216 156 li
216 160 li
cp
f
216 144 mo
220 144 li
220 128 li
216 128 li
216 144 li
cp
f
212 128 mo
216 128 li
216 120 li
212 120 li
212 128 li
cp
f
208 152 mo
212 152 li
212 148 li
208 148 li
208 152 li
cp
f
176 144 mo
172 144 li
172 148 li
176 148 li
176 144 li
cp
.737255 .780392 .705882 rgb
f
196 132 mo
200 132 li
200 128 li
196 128 li
196 132 li
cp
f
204 116 mo
208 116 li
208 108 li
204 108 li
204 116 li
cp
f
200 128 mo
204 128 li
204 116 li
200 116 li
200 128 li
cp
f
208 104 mo
208 108 li
212 108 li
212 104 li
208 104 li
cp
f
172 124 mo
172 128 li
180 128 li
180 124 li
172 124 li
cp
f
244 148 mo
248 148 li
248 144 li
244 144 li
244 148 li
cp
f
220 132 mo
224 132 li
224 128 li
220 128 li
220 132 li
cp
f
240 124 mo
240 128 li
248 128 li
248 124 li
240 124 li
cp
f
216 108 mo
212 108 li
212 116 li
216 116 li
216 108 li
cp
f
220 116 mo
216 116 li
216 128 li
220 128 li
220 116 li
cp
f
184 136 mo
184 144 li
192 144 li
192 140 li
188 140 li
188 136 li
184 136 li
cp
.282353 .329412 .317647 rgb
f
196 132 mo
192 132 li
192 140 li
196 140 li
196 132 li
cp
f
172 152 mo
172 156 li
176 156 li
176 152 li
172 152 li
cp
f
180 144 mo
180 132 li
176 132 li
176 136 li
172 136 li
172 140 li
176 140 li
176 144 li
180 144 li
cp
f
200 144 mo
200 148 li
204 148 li
204 144 li
200 144 li
cp
f
208 148 mo
204 148 li
204 152 li
208 152 li
208 148 li
cp
f
192 152 mo
192 156 li
176 156 li
176 160 li
180 160 li
180 164 li
188 164 li
188 160 li
196 160 li
196 156 li
204 156 li
204 152 li
192 152 li
cp
f
196 128 mo
200 128 li
200 124 li
196 124 li
196 128 li
cp
f
200 116 mo
204 116 li
204 112 li
200 112 li
200 116 li
cp
f
208 100 mo
208 104 li
212 104 li
212 100 li
208 100 li
cp
f
236 144 mo
236 136 li
232 136 li
232 140 li
228 140 li
228 144 li
236 144 li
cp
f
228 132 mo
224 132 li
224 140 li
228 140 li
228 132 li
cp
f
244 156 mo
248 156 li
248 152 li
244 152 li
244 156 li
cp
f
228 156 mo
228 152 li
216 152 li
216 156 li
224 156 li
224 160 li
232 160 li
232 164 li
240 164 li
240 160 li
244 160 li
244 156 li
228 156 li
cp
f
220 144 mo
216 144 li
216 148 li
220 148 li
220 144 li
cp
f
216 148 mo
212 148 li
212 152 li
216 152 li
216 148 li
cp
f
220 128 mo
224 128 li
224 124 li
220 124 li
220 128 li
cp
f
212 152 mo
208 152 li
208 156 li
204 156 li
204 160 li
216 160 li
216 156 li
212 156 li
212 152 li
cp
f
244 132 mo
240 132 li
240 144 li
244 144 li
244 140 li
248 140 li
248 136 li
244 136 li
244 132 li
cp
f
204 108 mo
208 108 li
208 104 li
204 104 li
204 108 li
cp
f
216 108 mo
216 104 li
212 104 li
212 108 li
216 108 li
cp
f
216 116 mo
220 116 li
220 112 li
216 112 li
216 116 li
cp
f
196 148 mo
200 148 li
200 132 li
196 132 li
196 148 li
cp
.509804 .580392 .560784 rgb
f
184 132 mo
184 136 li
192 136 li
192 132 li
184 132 li
cp
f
192 128 mo
192 132 li
196 132 li
196 128 li
192 128 li
cp
f
180 140 mo
184 140 li
184 136 li
180 136 li
180 140 li
cp
f
180 156 mo
180 144 li
176 144 li
176 148 li
172 148 li
172 152 li
176 152 li
176 156 li
180 156 li
cp
f
192 144 mo
188 144 li
188 156 li
192 156 li
192 144 li
cp
f
204 152 mo
204 148 li
200 148 li
200 152 li
204 152 li
cp
f
208 156 mo
208 152 li
204 152 li
204 156 li
208 156 li
cp
f
204 120 mo
208 120 li
208 116 li
204 116 li
204 120 li
cp
f
196 124 mo
200 124 li
200 120 li
196 120 li
196 124 li
cp
f
212 108 mo
208 108 li
208 116 li
212 116 li
212 108 li
cp
f
180 128 mo
172 128 li
172 136 li
176 136 li
176 132 li
180 132 li
180 128 li
cp
f
236 136 mo
236 132 li
228 132 li
228 136 li
236 136 li
cp
f
228 128 mo
224 128 li
224 132 li
228 132 li
228 128 li
cp
f
228 156 mo
232 156 li
232 144 li
228 144 li
228 156 li
cp
f
240 140 mo
240 136 li
236 136 li
236 140 li
240 140 li
cp
f
244 144 mo
240 144 li
240 156 li
244 156 li
244 152 li
248 152 li
248 148 li
244 148 li
244 144 li
cp
f
224 132 mo
220 132 li
220 148 li
224 148 li
224 132 li
cp
f
216 152 mo
220 152 li
220 148 li
216 148 li
216 152 li
cp
f
212 156 mo
216 156 li
216 152 li
212 152 li
212 156 li
cp
f
240 128 mo
240 132 li
244 132 li
244 136 li
248 136 li
248 128 li
240 128 li
cp
f
216 120 mo
216 116 li
212 116 li
212 120 li
216 120 li
cp
f
224 120 mo
220 120 li
220 124 li
224 124 li
224 120 li
cp
f
204 168 mo
200 168 li
200 172 li
204 172 li
204 168 li
cp
.65098 .180392 .0980392 rgb
f
216 176 mo
220 176 li
220 172 li
216 172 li
216 176 li
cp
f
204 176 mo
200 176 li
200 180 li
204 180 li
204 176 li
cp
f
216 184 mo
220 184 li
220 180 li
216 180 li
216 184 li
cp
f
204 184 mo
204 188 li
208 188 li
208 184 li
204 184 li
cp
f
208 192 mo
212 192 li
212 188 li
208 188 li
208 192 li
cp
f
200 160 mo
200 164 li
204 164 li
204 160 li
200 160 li
cp
1 .941176 .34902 rgb
f
216 164 mo
220 164 li
220 160 li
216 160 li
216 164 li
cp
f
212 172 mo
216 172 li
216 164 li
212 164 li
212 172 li
cp
f
208 164 mo
204 164 li
204 172 li
208 172 li
208 164 li
cp
f
208 176 mo
212 176 li
212 172 li
208 172 li
208 176 li
cp
f
208 184 mo
212 184 li
212 180 li
208 180 li
208 184 li
cp
f
216 172 mo
220 172 li
220 164 li
216 164 li
216 172 li
cp
1 .545098 0 rgb
f
204 164 mo
200 164 li
200 168 li
204 168 li
204 164 li
cp
f
212 176 mo
208 176 li
208 172 li
204 172 li
204 180 li
212 180 li
212 184 li
216 184 li
216 172 li
212 172 li
212 176 li
cp
f
208 188 mo
212 188 li
212 184 li
208 184 li
208 188 li
cp
f
204 160 mo
204 164 li
208 164 li
208 172 li
212 172 li
212 164 li
216 164 li
216 160 li
204 160 li
cp
1 1 1 rgb
f
188 148 mo
188 144 li
180 144 li
180 148 li
188 148 li
cp
.368627 .694118 1 rgb
f
204 132 mo
208 132 li
208 128 li
204 128 li
204 132 li
cp
f
212 120 mo
208 120 li
208 128 li
212 128 li
212 120 li
cp
f
240 144 mo
232 144 li
232 148 li
240 148 li
240 144 li
cp
f
212 132 mo
216 132 li
216 128 li
212 128 li
212 132 li
cp
f
188 152 mo
188 148 li
180 148 li
180 152 li
188 152 li
cp
.156863 .32549 .878431 rgb
f
232 148 mo
232 152 li
240 152 li
240 148 li
232 148 li
cp
f
212 128 mo
208 128 li
208 132 li
204 132 li
204 144 li
208 144 li
208 148 li
212 148 li
212 144 li
216 144 li
216 132 li
212 132 li
212 128 li
cp
f
144 112 mo
144 104 li
140 104 li
140 100 li
136 100 li
136 96 li
128 96 li
128 92 li
120 92 li
120 96 li
112 96 li
112 100 li
108 100 li
108 104 li
104 104 li
104 112 li
100 112 li
100 120 li
104 120 li
104 128 li
108 128 li
108 132 li
112 132 li
112 136 li
120 136 li
120 140 li
128 140 li
128 136 li
136 136 li
136 132 li
140 132 li
140 128 li
144 128 li
144 120 li
148 120 li
148 112 li
144 112 li
cp
.0823529 .192157 .215686 rgb
f
116 108 mo
116 104 li
128 104 li
128 100 li
124 100 li
124 92 li
120 92 li
120 100 li
116 100 li
116 96 li
112 96 li
112 100 li
108 100 li
108 104 li
104 104 li
104 108 li
108 108 li
108 112 li
112 112 li
112 108 li
116 108 li
cp
.0862745 .239216 .258824 rgb
f
132 96 mo
128 96 li
128 100 li
132 100 li
132 96 li
cp
f
100 112 mo
100 116 li
104 116 li
104 112 li
100 112 li
cp
f
116 128 mo
116 132 li
124 132 li
124 128 li
116 128 li
cp
f
108 116 mo
104 116 li
104 124 li
108 124 li
108 116 li
cp
f
124 120 mo
124 116 li
120 116 li
120 120 li
124 120 li
cp
f
108 124 mo
108 128 li
116 128 li
116 124 li
108 124 li
cp
f
124 124 mo
124 128 li
132 128 li
132 124 li
124 124 li
cp
f
136 112 mo
136 108 li
120 108 li
120 112 li
132 112 li
132 124 li
136 124 li
136 120 li
140 120 li
140 112 li
136 112 li
cp
f
112 112 mo
112 116 li
120 116 li
120 112 li
112 112 li
cp
f
76 128 mo
76 120 li
72 120 li
72 116 li
64 116 li
64 112 li
56 112 li
56 116 li
48 116 li
48 120 li
44 120 li
44 128 li
40 128 li
40 136 li
44 136 li
44 144 li
48 144 li
48 148 li
56 148 li
56 152 li
64 152 li
64 148 li
72 148 li
72 144 li
76 144 li
76 136 li
80 136 li
80 128 li
76 128 li
cp
.0745098 .168627 .188235 rgb
f
68 124 mo
68 128 li
72 128 li
72 124 li
68 124 li
cp
.0823529 .192157 .215686 rgb
f
56 124 mo
56 120 li
60 120 li
60 116 li
52 116 li
52 120 li
48 120 li
48 124 li
56 124 li
cp
f
52 140 mo
52 144 li
60 144 li
60 140 li
52 140 li
cp
f
48 136 mo
48 140 li
52 140 li
52 136 li
48 136 li
cp
f
60 136 mo
60 140 li
68 140 li
68 136 li
60 136 li
cp
f
68 136 mo
72 136 li
72 132 li
68 132 li
68 136 li
cp
f
48 124 mo
44 124 li
44 132 li
48 132 li
48 124 li
cp
f
56 132 mo
56 136 li
60 136 li
60 132 li
56 132 li
cp
f
60 128 mo
64 128 li
64 120 li
60 120 li
60 128 li
cp
f
390 92 mo
394 92 li
394 88 li
390 88 li
390 92 li
cp
.6 .654902 .811765 rgb
f
394 88 mo
398 88 li
398 84 li
394 84 li
394 88 li
cp
f
370 44 mo
362 44 li
362 48 li
358 48 li
358 56 li
362 56 li
362 60 li
370 60 li
370 56 li
374 56 li
374 48 li
370 48 li
370 44 li
cp
f
398 84 mo
402 84 li
402 80 li
398 80 li
398 84 li
cp
f
402 76 mo
402 80 li
406 80 li
406 76 li
402 76 li
cp
f
390 40 mo
390 36 li
382 36 li
382 32 li
370 32 li
370 36 li
378 36 li
378 40 li
382 40 li
382 44 li
386 44 li
386 40 li
390 40 li
cp
.168627 .207843 .243137 rgb
f
382 92 mo
386 92 li
386 88 li
382 88 li
382 92 li
cp
f
398 40 mo
394 40 li
394 44 li
398 44 li
398 40 li
cp
f
390 88 mo
394 88 li
394 84 li
390 84 li
390 88 li
cp
f
386 44 mo
386 48 li
394 48 li
394 44 li
386 44 li
cp
f
354 84 mo
358 84 li
358 80 li
354 80 li
354 84 li
cp
f
394 84 mo
398 84 li
398 80 li
394 80 li
394 84 li
cp
f
398 48 mo
394 48 li
394 52 li
398 52 li
398 48 li
cp
f
386 56 mo
382 56 li
382 64 li
386 64 li
386 56 li
cp
f
350 64 mo
350 56 li
346 56 li
346 68 li
354 68 li
354 64 li
350 64 li
cp
f
394 64 mo
390 64 li
390 68 li
394 68 li
394 64 li
cp
f
354 68 mo
354 72 li
358 72 li
358 68 li
354 68 li
cp
f
390 68 mo
386 68 li
386 72 li
390 72 li
390 68 li
cp
f
402 68 mo
402 72 li
406 72 li
406 68 li
402 68 li
cp
f
374 76 mo
374 68 li
370 68 li
370 80 li
366 80 li
366 76 li
362 76 li
362 84 li
374 84 li
374 80 li
382 80 li
382 76 li
374 76 li
cp
f
398 80 mo
402 80 li
402 76 li
398 76 li
398 80 li
cp
f
350 76 mo
354 76 li
354 72 li
350 72 li
350 76 li
cp
f
358 72 mo
358 76 li
362 76 li
362 72 li
358 72 li
cp
f
390 60 mo
398 60 li
398 56 li
394 56 li
394 52 li
386 52 li
386 56 li
390 56 li
390 60 li
cp
f
382 76 mo
386 76 li
386 72 li
382 72 li
382 76 li
cp
f
382 64 mo
378 64 li
378 72 li
382 72 li
382 64 li
cp
f
378 40 mo
378 36 li
362 36 li
362 40 li
378 40 li
cp
.239216 .262745 .352941 rgb
f
362 92 mo
366 92 li
366 88 li
362 88 li
362 92 li
cp
f
362 40 mo
358 40 li
358 44 li
362 44 li
362 40 li
cp
f
394 44 mo
394 40 li
386 40 li
386 44 li
394 44 li
cp
f
358 84 mo
358 88 li
362 88 li
362 84 li
358 84 li
cp
f
358 44 mo
354 44 li
354 48 li
358 48 li
358 44 li
cp
f
398 44 mo
398 48 li
402 48 li
402 44 li
398 44 li
cp
f
386 48 mo
386 44 li
382 44 li
382 56 li
386 56 li
386 52 li
394 52 li
394 48 li
386 48 li
cp
f
406 52 mo
406 48 li
402 48 li
402 52 li
406 52 li
cp
f
394 56 mo
398 56 li
398 52 li
394 52 li
394 56 li
cp
f
386 64 mo
382 64 li
382 72 li
386 72 li
386 68 li
390 68 li
390 64 li
394 64 li
394 60 li
390 60 li
390 56 li
386 56 li
386 64 li
cp
f
358 64 mo
354 64 li
354 68 li
358 68 li
358 64 li
cp
f
350 68 mo
350 72 li
354 72 li
354 68 li
350 68 li
cp
f
358 68 mo
358 72 li
362 72 li
362 76 li
366 76 li
366 80 li
370 80 li
370 68 li
358 68 li
cp
f
378 64 mo
370 64 li
370 68 li
374 68 li
374 76 li
382 76 li
382 72 li
378 72 li
378 64 li
cp
f
358 72 mo
354 72 li
354 80 li
362 80 li
362 76 li
358 76 li
358 72 li
cp
f
354 48 mo
350 48 li
350 64 li
354 64 li
354 48 li
cp
f
406 56 mo
406 60 li
410 60 li
410 56 li
406 56 li
cp
f
370 96 mo
374 96 li
374 92 li
370 92 li
370 96 li
cp
f
382 44 mo
382 40 li
378 40 li
378 44 li
382 44 li
cp
f
378 64 mo
382 64 li
382 56 li
378 56 li
378 64 li
cp
f
390 76 mo
390 72 li
386 72 li
386 76 li
390 76 li
cp
f
386 32 mo
382 32 li
382 36 li
386 36 li
386 32 li
cp
.101961 .145098 .180392 rgb
f
394 36 mo
390 36 li
390 40 li
394 40 li
394 36 li
cp
f
394 44 mo
394 48 li
398 48 li
398 44 li
394 44 li
cp
f
358 80 mo
358 84 li
362 84 li
362 80 li
358 80 li
cp
f
350 80 mo
354 80 li
354 76 li
350 76 li
350 80 li
cp
f
350 68 mo
346 68 li
346 72 li
350 72 li
350 68 li
cp
f
402 56 mo
402 48 li
398 48 li
398 60 li
394 60 li
394 68 li
390 68 li
390 76 li
382 76 li
382 80 li
374 80 li
374 84 li
362 84 li
362 88 li
370 88 li
370 92 li
382 92 li
382 88 li
390 88 li
390 84 li
394 84 li
394 80 li
398 80 li
398 76 li
402 76 li
402 68 li
406 68 li
406 56 li
402 56 li
cp
f
366 92 mo
370 92 li
370 88 li
366 88 li
366 92 li
cp
.356863 .384314 .486275 rgb
f
386 92 mo
390 92 li
390 88 li
386 88 li
386 92 li
cp
f
362 44 mo
358 44 li
358 48 li
362 48 li
362 44 li
cp
f
406 52 mo
402 52 li
402 56 li
406 56 li
406 52 li
cp
f
378 64 mo
378 56 li
382 56 li
382 44 li
378 44 li
378 40 li
362 40 li
362 44 li
370 44 li
370 48 li
374 48 li
374 56 li
370 56 li
370 60 li
362 60 li
362 56 li
358 56 li
358 48 li
354 48 li
354 64 li
358 64 li
358 68 li
370 68 li
370 64 li
378 64 li
cp
f
406 60 mo
406 72 li
410 72 li
410 60 li
406 60 li
cp
f
374 92 mo
374 96 li
386 96 li
386 92 li
374 92 li
cp
f
402 76 mo
406 76 li
406 72 li
402 72 li
402 76 li
cp
f
298 72 mo
298 68 li
290 68 li
290 72 li
298 72 li
cp
.101961 .145098 .180392 rgb
f
286 64 mo
282 64 li
282 72 li
286 72 li
286 64 li
cp
f
310 60 mo
306 60 li
306 64 li
310 64 li
310 60 li
cp
f
290 88 mo
290 92 li
298 92 li
298 88 li
290 88 li
cp
f
274 96 mo
278 96 li
278 92 li
274 92 li
274 96 li
cp
f
310 76 mo
306 76 li
306 92 li
310 92 li
310 76 li
cp
f
310 96 mo
314 96 li
314 92 li
310 92 li
310 96 li
cp
f
290 72 mo
286 72 li
286 88 li
290 88 li
290 72 li
cp
f
262 88 mo
266 88 li
266 84 li
262 84 li
262 88 li
cp
f
274 84 mo
270 84 li
270 92 li
274 92 li
274 84 li
cp
f
278 60 mo
278 64 li
282 64 li
282 60 li
278 60 li
cp
f
278 92 mo
282 92 li
282 76 li
278 76 li
278 92 li
cp
f
306 64 mo
302 64 li
302 72 li
306 72 li
306 64 li
cp
f
322 84 mo
322 88 li
326 88 li
326 84 li
322 84 li
cp
f
314 92 mo
318 92 li
318 84 li
314 84 li
314 92 li
cp
f
298 88 mo
302 88 li
302 72 li
298 72 li
298 88 li
cp
f
290 44 mo
290 48 li
298 48 li
298 44 li
290 44 li
cp
.737255 .780392 .705882 rgb
f
282 80 mo
286 80 li
286 76 li
282 76 li
282 80 li
cp
f
266 80 mo
270 80 li
270 76 li
266 76 li
266 80 li
cp
f
262 84 mo
266 84 li
266 80 li
262 80 li
262 84 li
cp
f
274 72 mo
274 76 li
282 76 li
282 72 li
274 72 li
cp
f
306 72 mo
306 76 li
314 76 li
314 72 li
306 72 li
cp
f
254 96 mo
258 96 li
258 92 li
254 92 li
254 96 li
cp
f
318 76 mo
318 80 li
322 80 li
322 76 li
318 76 li
cp
f
322 84 mo
326 84 li
326 80 li
322 80 li
322 84 li
cp
f
330 92 mo
330 96 li
334 96 li
334 92 li
330 92 li
cp
f
302 80 mo
306 80 li
306 76 li
302 76 li
302 80 li
cp
f
290 44 mo
286 44 li
286 48 li
290 48 li
290 44 li
cp
.282353 .329412 .317647 rgb
f
286 48 mo
282 48 li
282 52 li
286 52 li
286 48 li
cp
f
302 44 mo
298 44 li
298 48 li
302 48 li
302 44 li
cp
f
306 52 mo
306 48 li
302 48 li
302 52 li
306 52 li
cp
f
282 56 mo
278 56 li
278 60 li
282 60 li
282 56 li
cp
f
286 64 mo
286 60 li
282 60 li
282 64 li
286 64 li
cp
f
290 68 mo
298 68 li
298 56 li
290 56 li
290 68 li
cp
f
302 60 mo
302 64 li
306 64 li
306 60 li
302 60 li
cp
f
306 56 mo
306 60 li
310 60 li
310 56 li
306 56 li
cp
f
274 92 mo
278 92 li
278 84 li
274 84 li
274 92 li
cp
f
282 96 mo
282 92 li
278 92 li
278 96 li
282 96 li
cp
f
274 96 mo
274 100 li
278 100 li
278 96 li
274 96 li
cp
f
278 100 mo
278 104 li
290 104 li
290 100 li
278 100 li
cp
f
302 96 mo
302 92 li
306 92 li
306 80 li
302 80 li
302 88 li
298 88 li
298 92 li
290 92 li
290 88 li
286 88 li
286 80 li
282 80 li
282 92 li
286 92 li
286 96 li
290 96 li
290 100 li
298 100 li
298 96 li
302 96 li
cp
f
310 96 mo
310 92 li
306 92 li
306 96 li
310 96 li
cp
f
314 84 mo
310 84 li
310 92 li
314 92 li
314 84 li
cp
f
298 100 mo
298 104 li
310 104 li
310 100 li
298 100 li
cp
f
310 100 mo
314 100 li
314 96 li
310 96 li
310 100 li
cp
f
274 80 mo
270 80 li
270 84 li
274 84 li
274 80 li
cp
f
258 100 mo
262 100 li
262 88 li
258 88 li
258 100 li
cp
f
270 84 mo
266 84 li
266 92 li
270 92 li
270 84 li
cp
f
270 92 mo
270 96 li
274 96 li
274 92 li
270 92 li
cp
f
278 68 mo
282 68 li
282 64 li
278 64 li
278 68 li
cp
f
286 72 mo
290 72 li
290 68 li
286 68 li
286 72 li
cp
f
302 72 mo
302 68 li
298 68 li
298 72 li
302 72 li
cp
f
306 68 mo
310 68 li
310 64 li
306 64 li
306 68 li
cp
f
250 96 mo
250 100 li
254 100 li
254 96 li
250 96 li
cp
f
254 104 mo
258 104 li
258 100 li
254 100 li
254 104 li
cp
f
318 80 mo
314 80 li
314 84 li
318 84 li
318 80 li
cp
f
330 88 mo
326 88 li
326 100 li
330 100 li
330 88 li
cp
f
318 92 mo
322 92 li
322 84 li
318 84 li
318 92 li
cp
f
314 96 mo
318 96 li
318 92 li
314 92 li
314 96 li
cp
f
334 96 mo
334 100 li
338 100 li
338 96 li
334 96 li
cp
f
330 104 mo
334 104 li
334 100 li
330 100 li
330 104 li
cp
f
278 60 mo
274 60 li
274 64 li
278 64 li
278 60 li
cp
f
314 64 mo
314 60 li
310 60 li
310 64 li
314 64 li
cp
f
298 44 mo
298 40 li
290 40 li
290 44 li
298 44 li
cp
.509804 .580392 .560784 rgb
f
298 68 mo
302 68 li
302 60 li
306 60 li
306 52 li
302 52 li
302 48 li
286 48 li
286 52 li
282 52 li
282 60 li
286 60 li
286 68 li
290 68 li
290 56 li
298 56 li
298 68 li
cp
f
286 92 mo
282 92 li
282 96 li
278 96 li
278 100 li
290 100 li
290 96 li
286 96 li
286 92 li
cp
f
306 92 mo
302 92 li
302 96 li
298 96 li
298 100 li
310 100 li
310 96 li
306 96 li
306 92 li
cp
f
270 80 mo
266 80 li
266 84 li
270 84 li
270 80 li
cp
f
278 76 mo
274 76 li
274 84 li
278 84 li
278 76 li
cp
f
258 84 mo
258 88 li
262 88 li
262 84 li
258 84 li
cp
f
270 92 mo
266 92 li
266 88 li
262 88 li
262 100 li
274 100 li
274 96 li
270 96 li
270 92 li
cp
f
286 76 mo
286 72 li
282 72 li
282 76 li
286 76 li
cp
f
282 72 mo
282 68 li
278 68 li
278 64 li
274 64 li
274 72 li
282 72 li
cp
f
302 76 mo
306 76 li
306 72 li
302 72 li
302 76 li
cp
f
306 72 mo
314 72 li
314 64 li
310 64 li
310 68 li
306 68 li
306 72 li
cp
f
314 76 mo
310 76 li
310 84 li
314 84 li
314 76 li
cp
f
250 96 mo
254 96 li
254 92 li
250 92 li
250 96 li
cp
f
254 92 mo
258 92 li
258 88 li
254 88 li
254 92 li
cp
f
258 100 mo
258 96 li
254 96 li
254 100 li
258 100 li
cp
f
322 80 mo
318 80 li
318 84 li
322 84 li
322 80 li
cp
f
326 84 mo
326 88 li
330 88 li
330 84 li
326 84 li
cp
f
322 92 mo
318 92 li
318 96 li
314 96 li
314 100 li
326 100 li
326 88 li
322 88 li
322 92 li
cp
f
334 92 mo
334 96 li
338 96 li
338 92 li
334 92 li
cp
f
330 88 mo
330 92 li
334 92 li
334 88 li
330 88 li
cp
f
330 100 mo
334 100 li
334 96 li
330 96 li
330 100 li
cp
f
254 116 mo
258 116 li
258 112 li
254 112 li
254 116 li
cp
.65098 .180392 .0980392 rgb
f
330 112 mo
330 116 li
334 116 li
334 112 li
330 112 li
cp
f
254 108 mo
258 108 li
258 104 li
254 104 li
254 108 li
cp
1 .941176 .34902 rgb
f
330 104 mo
330 108 li
334 108 li
334 104 li
330 104 li
cp
f
254 112 mo
258 112 li
258 108 li
254 108 li
254 112 li
cp
1 .545098 0 rgb
f
330 108 mo
330 112 li
334 112 li
334 108 li
330 108 li
cp
f
278 104 mo
278 116 li
282 116 li
282 120 li
286 120 li
286 116 li
290 116 li
290 104 li
278 104 li
cp
1 1 1 rgb
f
298 104 mo
298 116 li
302 116 li
302 120 li
306 120 li
306 116 li
310 116 li
310 104 li
298 104 li
cp
f
278 104 mo
274 104 li
274 112 li
278 112 li
278 104 li
cp
.368627 .694118 1 rgb
f
286 120 mo
290 120 li
290 116 li
286 116 li
286 120 li
cp
f
278 116 mo
278 120 li
282 120 li
282 116 li
278 116 li
cp
f
282 132 mo
286 132 li
286 120 li
282 120 li
282 132 li
cp
f
310 104 mo
310 112 li
314 112 li
314 104 li
310 104 li
cp
f
298 104 mo
290 104 li
290 112 li
298 112 li
298 104 li
cp
f
306 120 mo
310 120 li
310 116 li
306 116 li
306 120 li
cp
f
298 116 mo
298 120 li
302 120 li
302 116 li
298 116 li
cp
f
302 132 mo
306 132 li
306 120 li
302 120 li
302 132 li
cp
f
282 120 mo
278 120 li
278 124 li
282 124 li
282 120 li
cp
.156863 .32549 .878431 rgb
f
286 124 mo
290 124 li
290 120 li
286 120 li
286 124 li
cp
f
282 140 mo
286 140 li
286 136 li
282 136 li
282 140 li
cp
f
302 120 mo
298 120 li
298 124 li
302 124 li
302 120 li
cp
f
306 120 mo
306 124 li
310 124 li
310 120 li
306 120 li
cp
f
302 140 mo
306 140 li
306 136 li
302 136 li
302 140 li
cp
f
298 76 mo
298 72 li
290 72 li
290 76 li
298 76 li
cp
.368627 .694118 1 rgb
f
298 76 mo
290 76 li
290 88 li
298 88 li
298 76 li
cp
.156863 .32549 .878431 rgb
f
242 52 mo
242 48 li
246 48 li
246 52 li
242 52 li
cp
1 1 1 rgb
f
238 52 mo
238 48 li
242 48 li
242 52 li
238 52 li
cp
f
234 52 mo
234 48 li
238 48 li
238 52 li
234 52 li
cp
f
242 48 mo
242 44 li
246 44 li
246 48 li
242 48 li
cp
f
238 48 mo
238 44 li
242 44 li
242 48 li
238 48 li
cp
f
234 48 mo
234 44 li
238 44 li
238 48 li
234 48 li
cp
f
242 44 mo
242 40 li
246 40 li
246 44 li
242 44 li
cp
f
238 44 mo
238 40 li
242 40 li
242 44 li
238 44 li
cp
f
234 44 mo
234 40 li
238 40 li
238 44 li
234 44 li
cp
f
242 40 mo
242 36 li
246 36 li
246 40 li
242 40 li
cp
f
238 40 mo
238 36 li
242 36 li
242 40 li
238 40 li
cp
f
238 36 mo
238 32 li
242 32 li
242 36 li
238 36 li
cp
f
234 40 mo
234 36 li
238 36 li
238 40 li
234 40 li
cp
f
242 36 mo
242 32 li
246 32 li
246 36 li
242 36 li
cp
f
234 36 mo
234 32 li
238 32 li
238 36 li
234 36 li
cp
f
230 40 mo
230 36 li
234 36 li
234 40 li
230 40 li
cp
f
230 44 mo
230 40 li
234 40 li
234 44 li
230 44 li
cp
f
226 44 mo
226 40 li
230 40 li
230 44 li
226 44 li
cp
f
222 48 mo
222 44 li
226 44 li
226 48 li
222 48 li
cp
f
246 44 mo
246 40 li
250 40 li
250 44 li
246 44 li
cp
f
246 40 mo
246 36 li
250 36 li
250 40 li
246 40 li
cp
f
250 44 mo
250 40 li
254 40 li
254 44 li
250 44 li
cp
f
226 40 mo
226 36 li
230 36 li
230 40 li
226 40 li
cp
f
250 40 mo
250 36 li
254 36 li
254 40 li
250 40 li
cp
f
230 48 mo
230 44 li
234 44 li
234 48 li
230 48 li
cp
f
226 48 mo
226 44 li
230 44 li
230 48 li
226 48 li
cp
.368627 .694118 1 rgb
f
246 48 mo
246 44 li
250 44 li
250 48 li
246 48 li
cp
1 1 1 rgb
f
230 52 mo
230 48 li
234 48 li
234 52 li
230 52 li
cp
.368627 .694118 1 rgb
f
246 52 mo
246 48 li
250 48 li
250 52 li
246 52 li
cp
f
250 48 mo
250 44 li
254 44 li
254 48 li
250 48 li
cp
f
226 52 mo
226 48 li
230 48 li
230 52 li
226 52 li
cp
.156863 .32549 .878431 rgb
f
250 52 mo
250 48 li
254 48 li
254 52 li
250 52 li
cp
f
254 48 mo
254 44 li
258 44 li
258 48 li
254 48 li
cp
1 1 1 rgb
f
222 44 mo
222 40 li
226 40 li
226 44 li
222 44 li
cp
f
254 44 mo
254 40 li
258 40 li
258 44 li
254 44 li
cp
f
222 52 mo
222 48 li
226 48 li
226 52 li
222 52 li
cp
.368627 .694118 1 rgb
f
254 52 mo
254 48 li
258 48 li
258 52 li
254 52 li
cp
f
222 56 mo
222 52 li
226 52 li
226 56 li
222 56 li
cp
.156863 .32549 .878431 rgb
f
254 56 mo
254 52 li
258 52 li
258 56 li
254 56 li
cp
f
246 56 mo
246 52 li
250 52 li
250 56 li
246 56 li
cp
f
242 56 mo
242 52 li
246 52 li
246 56 li
242 56 li
cp
1 1 1 rgb
f
238 56 mo
238 52 li
242 52 li
242 56 li
238 56 li
cp
f
234 56 mo
234 52 li
238 52 li
238 56 li
234 56 li
cp
f
230 56 mo
230 52 li
234 52 li
234 56 li
230 56 li
cp
.156863 .32549 .878431 rgb
f
234 60 mo
234 56 li
238 56 li
238 60 li
234 60 li
cp
.368627 .694118 1 rgb
f
238 60 mo
238 56 li
242 56 li
242 60 li
238 60 li
cp
1 1 1 rgb
f
242 60 mo
242 56 li
246 56 li
246 60 li
242 60 li
cp
.368627 .694118 1 rgb
f
242 64 mo
242 60 li
246 60 li
246 64 li
242 64 li
cp
f
238 64 mo
238 60 li
242 60 li
242 64 li
238 64 li
cp
1 1 1 rgb
f
234 64 mo
234 60 li
238 60 li
238 64 li
234 64 li
cp
.368627 .694118 1 rgb
f
234 68 mo
234 64 li
238 64 li
238 68 li
234 68 li
cp
.156863 .32549 .878431 rgb
f
238 68 mo
238 64 li
242 64 li
242 68 li
238 68 li
cp
.368627 .694118 1 rgb
f
242 68 mo
242 64 li
246 64 li
246 68 li
242 68 li
cp
.156863 .32549 .878431 rgb
f
238 72 mo
238 68 li
242 68 li
242 72 li
238 72 li
cp
.368627 .694118 1 rgb
f
238 76 mo
238 72 li
242 72 li
242 76 li
238 76 li
cp
.156863 .32549 .878431 rgb
f
172 64 mo
168 64 li
168 68 li
172 68 li
172 64 li
cp
.101961 .145098 .180392 rgb
f
172 84 mo
176 84 li
176 80 li
172 80 li
172 84 li
cp
f
176 52 mo
172 52 li
172 64 li
176 64 li
176 52 li
cp
f
164 68 mo
160 68 li
160 80 li
164 80 li
164 68 li
cp
f
192 68 mo
192 64 li
188 64 li
188 68 li
192 68 li
cp
f
172 68 mo
172 72 li
188 72 li
188 68 li
172 68 li
cp
f
188 80 mo
184 80 li
184 84 li
188 84 li
188 80 li
cp
f
184 64 mo
188 64 li
188 52 li
184 52 li
184 64 li
cp
f
200 68 mo
196 68 li
196 80 li
200 80 li
200 68 li
cp
f
184 52 mo
184 48 li
176 48 li
176 52 li
184 52 li
cp
f
152 72 mo
156 72 li
156 68 li
152 68 li
152 72 li
cp
.737255 .780392 .705882 rgb
f
208 68 mo
204 68 li
204 72 li
208 72 li
208 68 li
cp
f
184 44 mo
176 44 li
176 48 li
184 48 li
184 44 li
cp
f
172 68 mo
168 68 li
168 76 li
172 76 li
172 68 li
cp
.282353 .329412 .317647 rgb
f
172 84 mo
172 80 li
168 80 li
168 84 li
172 84 li
cp
f
176 84 mo
184 84 li
184 76 li
176 76 li
176 84 li
cp
f
168 76 mo
164 76 li
164 80 li
168 80 li
168 76 li
cp
f
172 52 mo
168 52 li
168 60 li
172 60 li
172 52 li
cp
f
164 64 mo
160 64 li
160 68 li
164 68 li
164 64 li
cp
f
168 60 mo
164 60 li
164 64 li
168 64 li
168 60 li
cp
f
160 80 mo
160 76 li
156 76 li
156 80 li
160 80 li
cp
f
164 84 mo
164 80 li
160 80 li
160 84 li
164 84 li
cp
f
156 72 mo
152 72 li
152 76 li
156 76 li
156 72 li
cp
f
176 44 mo
172 44 li
172 48 li
176 48 li
176 44 li
cp
f
192 68 mo
188 68 li
188 76 li
192 76 li
192 68 li
cp
f
188 84 mo
192 84 li
192 80 li
188 80 li
188 84 li
cp
f
192 76 mo
192 80 li
196 80 li
196 76 li
192 76 li
cp
f
200 68 mo
200 64 li
196 64 li
196 68 li
200 68 li
cp
f
196 64 mo
196 60 li
192 60 li
192 64 li
196 64 li
cp
f
192 52 mo
188 52 li
188 60 li
192 60 li
192 52 li
cp
f
200 80 mo
204 80 li
204 76 li
200 76 li
200 80 li
cp
f
196 84 mo
200 84 li
200 80 li
196 80 li
196 84 li
cp
f
208 72 mo
204 72 li
204 76 li
208 76 li
208 72 li
cp
f
188 44 mo
184 44 li
184 48 li
188 48 li
188 44 li
cp
f
168 64 mo
164 64 li
164 76 li
168 76 li
168 64 li
cp
.509804 .580392 .560784 rgb
f
176 80 mo
176 76 li
184 76 li
184 80 li
192 80 li
192 76 li
188 76 li
188 72 li
172 72 li
172 76 li
168 76 li
168 80 li
176 80 li
cp
f
156 64 mo
152 64 li
152 68 li
156 68 li
156 64 li
cp
f
156 76 mo
160 76 li
160 68 li
156 68 li
156 76 li
cp
f
172 56 mo
168 56 li
168 64 li
172 64 li
172 56 li
cp
f
176 48 mo
172 48 li
172 52 li
176 52 li
176 48 li
cp
f
196 64 mo
192 64 li
192 76 li
196 76 li
196 64 li
cp
f
208 64 mo
204 64 li
204 68 li
208 68 li
208 64 li
cp
f
204 68 mo
200 68 li
200 76 li
204 76 li
204 68 li
cp
f
192 56 mo
188 56 li
188 64 li
192 64 li
192 56 li
cp
f
184 52 mo
188 52 li
188 48 li
184 48 li
184 52 li
cp
f
184 44 mo
184 40 li
176 40 li
176 44 li
184 44 li
cp
f
184 92 mo
188 92 li
188 88 li
184 88 li
184 92 li
cp
.65098 .180392 .0980392 rgb
f
176 88 mo
172 88 li
172 92 li
176 92 li
176 88 li
cp
f
176 96 mo
176 100 li
184 100 li
184 96 li
176 96 li
cp
f
176 88 mo
176 92 li
184 92 li
184 88 li
176 88 li
cp
1 .941176 .34902 rgb
f
176 84 mo
172 84 li
172 88 li
176 88 li
176 84 li
cp
1 .545098 0 rgb
f
184 88 mo
188 88 li
188 84 li
184 84 li
184 88 li
cp
f
176 92 mo
176 96 li
184 96 li
184 92 li
176 92 li
cp
f
176 84 mo
176 88 li
184 88 li
184 84 li
176 84 li
cp
1 1 1 rgb
f
184 56 mo
184 52 li
176 52 li
176 56 li
184 56 li
cp
.368627 .694118 1 rgb
f
188 68 mo
188 64 li
184 64 li
184 56 li
176 56 li
176 64 li
172 64 li
172 68 li
188 68 li
cp
.156863 .32549 .878431 rgb
f
116 48 mo
112 48 li
112 52 li
116 52 li
116 48 li
cp
.239216 .262745 .352941 rgb
f
120 44 mo
124 44 li
124 40 li
120 40 li
120 44 li
cp
f
132 44 mo
132 48 li
136 48 li
136 44 li
132 44 li
cp
f
136 48 mo
136 52 li
140 52 li
140 48 li
136 48 li
cp
f
120 68 mo
124 68 li
124 64 li
120 64 li
120 68 li
cp
f
116 60 mo
116 64 li
120 64 li
120 60 li
116 60 li
cp
f
132 40 mo
128 40 li
128 44 li
132 44 li
132 40 li
cp
.168627 .207843 .243137 rgb
f
132 48 mo
132 52 li
136 52 li
136 48 li
132 48 li
cp
f
132 60 mo
136 60 li
136 56 li
132 56 li
132 60 li
cp
f
112 60 mo
116 60 li
116 56 li
112 56 li
112 60 li
cp
f
120 64 mo
124 64 li
124 60 li
120 60 li
120 64 li
cp
f
128 64 mo
132 64 li
132 60 li
128 60 li
128 64 li
cp
f
124 48 mo
124 44 li
120 44 li
120 48 li
116 48 li
116 52 li
120 52 li
120 56 li
124 56 li
124 52 li
128 52 li
128 48 li
124 48 li
cp
.6 .654902 .811765 rgb
f
128 60 mo
132 60 li
132 56 li
128 56 li
128 60 li
cp
.101961 .145098 .180392 rgb
f
124 64 mo
128 64 li
128 60 li
124 60 li
124 64 li
cp
f
132 52 mo
132 56 li
136 56 li
136 52 li
132 52 li
cp
f
120 44 mo
116 44 li
116 48 li
120 48 li
120 44 li
cp
.356863 .384314 .486275 rgb
f
132 64 mo
136 64 li
136 60 li
132 60 li
132 64 li
cp
f
128 60 mo
128 56 li
132 56 li
132 44 li
128 44 li
128 40 li
124 40 li
124 48 li
128 48 li
128 52 li
124 52 li
124 56 li
120 56 li
120 52 li
112 52 li
112 56 li
116 56 li
116 60 li
128 60 li
cp
f
124 64 mo
124 68 li
132 68 li
132 64 li
124 64 li
cp
f
136 52 mo
136 60 li
140 60 li
140 52 li
136 52 li
cp
f
76 36 mo
80 36 li
80 32 li
76 32 li
76 36 li
cp
.0470588 .0980392 .580392 rgb
f
88 36 mo
84 36 li
84 40 li
88 40 li
88 36 li
cp
f
84 88 mo
88 88 li
88 84 li
84 84 li
84 88 li
cp
f
48 84 mo
52 84 li
52 80 li
48 80 li
48 84 li
cp
f
88 84 mo
92 84 li
92 80 li
88 80 li
88 84 li
cp
f
96 64 mo
96 68 li
92 68 li
92 72 li
100 72 li
100 64 li
96 64 li
cp
f
76 80 mo
68 80 li
68 84 li
56 84 li
56 88 li
64 88 li
64 92 li
80 92 li
80 76 li
76 76 li
76 80 li
cp
f
92 80 mo
96 80 li
96 76 li
92 76 li
92 80 li
cp
f
44 64 mo
48 64 li
48 60 li
44 60 li
44 56 li
40 56 li
40 72 li
44 72 li
44 64 li
cp
f
48 72 mo
44 72 li
44 80 li
48 80 li
48 72 li
cp
f
92 60 mo
92 56 li
84 56 li
84 60 li
92 60 li
cp
f
52 44 mo
52 52 li
60 52 li
60 48 li
64 48 li
64 44 li
52 44 li
cp
.0588235 .709804 .380392 rgb
f
80 48 mo
80 52 li
76 52 li
76 60 li
72 60 li
72 72 li
76 72 li
76 68 li
80 68 li
80 60 li
84 60 li
84 48 li
80 48 li
cp
f
56 64 mo
52 64 li
52 60 li
48 60 li
48 64 li
44 64 li
44 72 li
48 72 li
48 76 li
52 76 li
52 80 li
60 80 li
60 72 li
56 72 li
56 64 li
cp
f
44 56 mo
44 60 li
48 60 li
48 56 li
44 56 li
cp
f
60 92 mo
64 92 li
64 88 li
60 88 li
60 92 li
cp
.368627 .694118 1 rgb
f
84 92 mo
88 92 li
88 88 li
84 88 li
84 92 li
cp
f
92 84 mo
96 84 li
96 80 li
92 80 li
92 84 li
cp
f
96 76 mo
96 80 li
100 80 li
100 76 li
96 76 li
cp
f
68 48 mo
60 48 li
60 52 li
52 52 li
52 56 li
56 56 li
56 60 li
64 60 li
64 56 li
68 56 li
68 48 li
cp
f
68 92 mo
68 96 li
80 96 li
80 92 li
68 92 li
cp
f
52 40 mo
52 44 li
60 44 li
60 40 li
52 40 li
cp
.054902 .619608 .290196 rgb
f
52 88 mo
56 88 li
56 84 li
52 84 li
52 88 li
cp
f
88 88 mo
92 88 li
92 84 li
88 84 li
88 88 li
cp
f
48 48 mo
52 48 li
52 44 li
48 44 li
48 48 li
cp
f
88 44 mo
80 44 li
80 48 li
84 48 li
84 56 li
92 56 li
92 48 li
88 48 li
88 44 li
cp
f
92 44 mo
92 48 li
96 48 li
96 44 li
92 44 li
cp
f
100 48 mo
96 48 li
96 56 li
100 56 li
100 48 li
cp
f
48 52 mo
44 52 li
44 56 li
48 56 li
48 52 li
cp
f
88 60 mo
80 60 li
80 68 li
76 68 li
76 72 li
80 72 li
80 76 li
84 76 li
84 68 li
88 68 li
88 60 li
cp
f
52 76 mo
48 76 li
48 80 li
52 80 li
52 76 li
cp
f
100 56 mo
100 72 li
104 72 li
104 56 li
100 56 li
cp
f
76 40 mo
72 40 li
72 44 li
76 44 li
76 40 li
cp
f
56 36 mo
56 40 li
64 40 li
64 36 li
56 36 li
cp
.0392157 .419608 .317647 rgb
f
80 36 mo
72 36 li
72 40 li
80 40 li
80 36 li
cp
f
92 40 mo
88 40 li
88 48 li
92 48 li
92 40 li
cp
f
52 84 mo
56 84 li
56 80 li
52 80 li
52 84 li
cp
f
44 52 mo
48 52 li
48 48 li
44 48 li
44 52 li
cp
f
96 56 mo
96 48 li
92 48 li
92 60 li
88 60 li
88 68 li
84 68 li
84 76 li
80 76 li
80 88 li
84 88 li
84 84 li
88 84 li
88 80 li
92 80 li
92 76 li
96 76 li
96 72 li
92 72 li
92 68 li
96 68 li
96 64 li
100 64 li
100 56 li
96 56 li
cp
f
84 36 mo
80 36 li
80 40 li
76 40 li
76 44 li
72 44 li
72 36 li
76 36 li
76 32 li
64 32 li
64 40 li
60 40 li
60 44 li
64 44 li
64 48 li
68 48 li
68 56 li
64 56 li
64 60 li
56 60 li
56 56 li
52 56 li
52 48 li
48 48 li
48 60 li
52 60 li
52 64 li
56 64 li
56 72 li
60 72 li
60 80 li
56 80 li
56 84 li
68 84 li
68 80 li
76 80 li
76 76 li
80 76 li
80 72 li
72 72 li
72 60 li
76 60 li
76 52 li
80 52 li
80 44 li
88 44 li
88 40 li
84 40 li
84 36 li
cp
.156863 .32549 .878431 rgb
f
56 92 mo
60 92 li
60 88 li
56 88 li
56 92 li
cp
f
80 92 mo
84 92 li
84 88 li
80 88 li
80 92 li
cp
f
64 96 mo
68 96 li
68 92 li
64 92 li
64 96 li
cp
f
96 72 mo
96 76 li
100 76 li
100 72 li
96 72 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.1
%%For: (\705\764\750\754 \722\763\760\752\750\755) ()
%%Title: (1801.m10.i311.n021.P.c25.567799015 Retro space arcade game pixel elements. Invaders, spaceships, planets and ufo vector set.eps)
%%CreationDate: 1/30/2018 11:38 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9jno/QZ\ra"-'#7rg^0REk=m#%O3i4]C$&m9f;BBIErs(?h-ajLIsmG'aQ_jjR3;X*VLY.ZofQ'J."BNOm#CXVu.k$rdI
%6"GB4L\^!1<`T_'$`u?',AgBa/Zmh^FH)1/l_TQ;dI"o#WS_IFGG;g'/#r&=CGq/:IEA?iBn1OC3Uo,12moa7D5hrU'Of@Tr%kq[
%Z3Te!%6tbY00eW'i2`U'mt3oV[SadU#>)3o3&(,GrVf+FfEYQD*b9g(Ig,=CI#qnTrtXK'"6%9CCaP:.E489<UNY2%DR;]"0cpf&
%Xb2PGZrU*1bs!20cbTZj5Nm_oKR@DQpe;:T-%S@dkT==6_k1&MrkeLJB&Wb"g+WY<cH#ebgeXW*L4+"X6%ZEC/p$.alqdrVRrpPY
%aPE$1l87&*L8L*n`/*Ubj$2T0$Q7/!64D%B7$;q+8J!+DaX;,m,9)?/9O('jZsUE<B?YRuWE$'9c?,f80C"%>))]CQr;'mLe@Lu`
%]arbM)iEX33&.F:'9MJ6So(K@g'K7VD\JnAG$hX@OAho7JFa?D.?&E:FO812^GRF%SCu"e7r+HM.l>VW#WX;&iV\L`ier\G2,U*/
%jiI8(>(jB&S#p:6)9tqW#j>DmJ(<;YYQC\%i`K-&&%[);&RCgr.JO^R+JKE3;<u7B-m6.Zf@guj=RJ1l67;jJ3@VhJ1[Sr"BL2Xl
%i5_Vt"p$QUBtTm9SIap&BO]=CM*YK2T,QVl]aYq[j8VmE2<DBq*.WqP?";7'[;3c(s0nSu)J.0[f@u`)?hC%m6/VM@cS?$DaQ"@F
%HJg(br,CR!HnU!l$%*!MNgF>,!4XCXePsQr6r^i5SBu>^U%Kr/s/Bql`'<Pc8uqTD/s,.on#ZEk5+oVMZ6'k^^qS`N^]s>E#4WlB
%YP[em5rLC#cA_o'/;!=ZCS7>;]0Db#!EnYjZNBP`+0E:7pB)oN(u[=@^bZrO%igq[3+EV)8;LXd!WG\,k62rF/(=Ko22r+4+#chK
%J3m1OX'K14s*=W;i+Bc0R3.^t+9?]k"A<8BEf-/JcYt"1s+Y:4^]8Jl/Esp('Oi6fEG7a@^&F\.'siV;")qJLUK50HlcgdO!6f"Q
%#DTZhl0;i[BeH@_3cMu?]A!/>REWhK7`8R,=1%H?+7k"<g_7rJ;CWgN[B"K9HGu6;%XN8)aY9/j0M%4kChpn56>$I#?S,_h9,L?:
%JKI;"&LA;l7ueAp(QOg(LAc"TNMbQJ3L3<[b:0/PE"%>/NWrW#9K$bqJB4&O#XcI<DP2>EG_,NJ2@6e6@1:3b_>I&=TKoO5^0YMg
%`S\AC7]3Q=4a#LlD(J[o3,'B$fLa2R*6)F+R#(k&!Zo^dB&s8[@c-jdC1MWAR55#1_]qSZ0$"m3mM.!M?6WKE+pbkPT4L,#kdrN7
%QF[Eh[[Ru#TnR<^2M[-B/cp7m_hO#\i,o'I_/$^k"JaUN>93%YVgKW:F^M#GKD927iuX+Wr)3bbA6pobE,AETC3ghDBO>bPpGEpE
%Z>Q6@<Wln&':Wiin5Q9oP'NO@:;]M5"QD4nouU<"*1e#/ZOFQM]K-$I73CZ.>;ki+JPS3Pq,<B:+ZQT*@"+qqIo!S]m9BUkeSKkr
%@DGDf0jsE7^p+1W'A]hV`MqA[B!n\I&I.FQb-h,l7JNq`)b-$\E!g[4^]Z?WAn+RBbVL41D&#?4m8s%Q^XVD]]N).q^hKi$Mun_:
%OZ'+*)p9ocPKBb=qJ3c?6&L@U/TPN\q+X/qn(B&H0+&?kRN;b>8l^]ThIMLY8Gc7uL4V<"p2$eTT?pG3OC[?fdZ&M&9OrY"/It,+
%<RE.7"Q))!+a2mE+fK5lq`:b29HpBin6kLD7WMee;_p-?7\!.S=m]qVY4b$Zdn4++4o!JM%Z97Vijr<3d%p2F(?2^Bi?m%%*jj3B
%IJ"DA!0YEf`b*`9fl7+dD"4p],bmYaHT_2'1,D@/d&gsd\/n!L$FXY8_=mLHD<([',)hQ5<C(dp6&L:UgQk*CO&@_,`,JZ,Q^#n_
%(d4,4;5hYsN<2OTP6\=WenVqdH-P]/7:t^/AWbXt1:otepYX0\C0_R-Mp50fmk&Rl\]F.db*%\4DAH,3MC;tsg+?477;DQm/\rX=
%qlco@So$$1[Io6#2V3m*F$6*PfB03k3nB;tEu1JD1KODP)r\EMpu(Qa3m'(R>Ut@eVf=ibA%+J<a,8e6ir_O#!![q^iBH;DbX*E]
%V_#c#9n$101f]uU.(*7/iD)oNRN0iA;:REk%b3/[9fd93:,,0T,tDL#U:jGn<@6Sp;TUhVW)Y="ec7l<5pL1Ko(383'N7sOd):eI
%CKbgR1@aEF=ZrCO_,$XL2u^04lueaXN<iS7Ad(BZ6:%#l3k]X3Wn$b8k]#1>m<:CpT;Ic?!d@hDWQdZXh\>)&eTuYO93K6LQr?^f
%e@+5.Z>VOdm?a:eV.ZBOH^Ub&=\W\HFS%+-<C)g:T,(_B(mAWVlKSm.`R"qG5H/'dZ[Qne%XL9DD'qhPpEOLiX@q0+/+e8$')S)S
%hc)#(=J`a<_'fJZ@mfar6KY@P!K*mSA(7Lf3>iBBC:P8e%6P(/r+shIUZd[dl8ahTNM=lj"$80EC?E4)g=?)nQI_u(,]i/qWC,aW
%nrXWpi'6NQkA_[)PB6U=UGC(S4jgjE)J%te=)d[X(2M!t\qWoK0ZVD(R20SZs4K8?`"]_=bV@k:$sK_O0@l+!lc);f/Codslc)k/
%2hnBQ.Rh='Z#73V2dWR)Ilo*:FlO(`/CofY-#E0R$(Lg7j/QFd%;;>lRs?eTE?[qld&hj=W<bUL9gIW+T,(_Id5g-KM/0ukRfPjc
%!Y9s]+O>DPe:MRqO;gi,b%LmLhkmXh6[-a.FkE#-8u2oB[]TAL4!eY-pK`5^f%^9a2VYE@9l"["8_1=9:85KAgV7j*WV*a4>'8T`
%WpPp;qF0XbF&=u&Pg98\V).XSPg65EW($Z$;*S:7ci38'1PoT>:htYYP[u3DGA:/`TqG!U>AjtLNXi?LVd-)jlR3.be"%5^q4.UR
%#tNio134o</;8nqf<g'YV#-"-IJB,mKei9'B)_(GGj\K53k*<iJb)to"6o%\/sQ<rU5PiQ;gj+*er6V3B#00;ZO2?M08m]jU@>H:
%]IXCCMo(BrU)&HL7H%fTGkj!.?CGBppj(T!YUCVG$:pd/8C:,&k.60:W=3b.o@Y43B#W)A)L!M8%c:h/('dmUY,?PQ"UtpIIUE<g
%%C:Lk"jN_[Z[Q<$:HQ)ba.?C!^MeGlrF8dp(K>hD)V2bccEL0;Fm$7oc"T)+j%hYZM;CuZr8LuB>'&aD(T07kXAbWQ0s?KKS/*J3
%9hS1I':_J44IA^WLGcm]S4!Zg'Eifj'0Nfsi:()uP*9Q#o-BBSY3'GlKGB!d]3rPC%sT$E*>+5(_9Ti)@!(]*hfp70%ls96in^)F
%I-APq.=a%2]pQpiRSg-Y[%FRVKYe3uB`a.V'I*o&)JJ,dl4a>W+0mgIlNL8RY#_CS!AJH3lYN*ZcaMN$g_r9G<iae.N%3]J)_3kt
%8n6V2^G7ib7IU8:0bLDck;V5'8JlAL`)9@a]W"aD:=rfd;6R-'NB^?+7$hS(_Q:A@+1I6tTD6hp=:t?^KF%1_Dd[R^hj@MR-D"08
%ZVL1lbhPC]]K">XEMVKn)o)EqPNBk4r.Glq83cTX.A"Do/Y8:)*sV9<Nn^7`J`cg9SPL4Q1mb--/:uOM$t=]W5Vs-M^Wi3E>s(Ee
%Ll),+1""tensM;]5HaXlG_1<?m%0mURqDUB\]#6CZgj.4iX,2/o8Q!.8\)eRj9t-1$V#EmS`A]9o%@uBM^QR^IW=LjXbC]k$,1C#
%/'.a,G9=LqRHDG:mRctPS!i_"o(+XZh`?Y*P_bt)-LFu<Xn:0+WM.dOO8-GG"PM$ql"L'*?gh&cXlm3cq1*]9]h.mK$Q&NDLl3r$
%$X.,LVe*Koq`npuBV*iIi(o9>d\'ec1r1"W,k7L[2`&&jV*/L_!A44<-&*]9P[2DL$(Gd)cMACLha`e,c/e[f+O/\EM"@9J1[hnY
%.VOk%N/bAe=pO!RhO#<fF.LuANUFouadR'&nZu$3paLd\c[LUbma&r[;hV8/J$qc?-QFc/I9!/DOE:+;G_1$t&"32\>VkuGp>^>I
%r=e"TK1-E_PQ6Plg!7o"#4oNbJ;qo<_(q)1o]N#fk)CBQ%`JOBo;4rt+&Mt_`sQDFVP\LBH?Y8>O'.r\c::_mm]5HHG"#VbFC@s\
%[a?53^2,`&CQ]^F.i38@7O#.!nL_[qI`1S\5/iId(peLNZK+tDLS,=d5%e6fWpO,Pjp__T..a'hC1]Y#qf1/I:I!Vi(PNAneT<&#
%7Hrj-fg/j!'$]P__tg5$]%CKf4^0JPB`pZhj[lOi^,/D8hi.bGS4!tAcMZ'3s8&d3k0[F6I_rpFPqRSXh.#",@b:0=iY\+aT/k`8
%9OeeQ]9PUc>C"fD5*bWg\jhUt%3i1DWM*!o/I`V&BhXSFY1@<e1cq)TC/s`g^M%GuK/u/q>/nXW]#1[J)5JY:C/36G[;"d$;AlhG
%9pI&tG9Kb?/9-on,PV5cX=%MZBot^ABZXtoH9Xh$9V*[lrj8V?l>97l3-2F#2Cg-Z9s.6a:5^O6?.E\9S*I(S?mdh>T;IcA!d@hD
%WQdZXh\6D%6DV?LV$s4T-=u-*4_524Xgb6&h"MOmk5@RtWl088F4MGEIe#)F7d"EH@8T(V/1@H=b/)]P_]Kb_:M'NVQT4nXGsR*:
%VWT[c`8c'e_]OGTVKh1]1GuXe9L/W3#LK?IE1c!E\^7m*eiAU;_,&ZC$5P17DP;-HFUkF7b[=_?(qa*%MRMr43b7_EUgb#hkc.X2
%5Z;:'&>pHTs."^^X883hg_V4e;r+!QF?=W?BtR=p1+b'7QWlXf@JM<RYcrK_bI=^'o4%NG`=k8E2,#>KSqntm/3i15bISf(cSXBq
%Apl<E.kiK;af&usY:6ahVaX@JUEPD)CW\K[.%qi:k)b`TSl%g%=F]U9Wjd/>G]OcS/<6?kLTl?trJpLC^r>(n,u8Sie#]0&ob.h+
%qB<%,Fj=_$H+H2[LJ0;VC-C`u[<B<]3C`g"k[+9Jh&ELOhR&+9WNY[f+Z:?U_;]UgA-U.2i4o(`KLI@?Aip_2kr][uIoDI!pXE]3
%JtXjS>5`BoXdQZ6Mk-"&4!SBBeE/@GRI:5((,+_oB]*NmL;aN\(JE/JV<:@`Q#lIbcMriESAuoM1R6ghGq@@Ec,em=SDQ;``I=I5
%h%0/L[e_NbLn\8i`FGp+XVt+KWu"ttB%"FI[V@A%C4&YS^N_Ea:JT6Mk>c]sP8;Brb^<n4DLNpDOfQ`BY4`NhG\-]CoiMDK;NN^#
%]2>M_R.8ELs*>8bnaOZe5H25mBM:S@=]@4i1)*c<5Xg<[L.+O@AolgSe+lF$@o:X@[@(/s1_pgcH)kVO"9%.L'J+u-hPkNd&jD4D
%QG<81Z7.pVpS4`/5Mug)+)h5!J#(LYV)nX98k4BZ&aA@,;UA\_).GNgV0?nVkSHiG5PL.8:_^Yl[@>\Z_KWamlFWeB3Ie46SY45T
%@:\p++T4)/e's]&Rh_fkmnrl(7D:^-ajMBj>NC-hI.(irZ$:ul]OcI)S#[>3h^g%#'GIlFph!XT((&m5:!b*C>9nTg8GGT#e3$Fq
%i*Sc([kGYF5N-&"T6@A"'fe(AjFnEIQff[<@i&:>I>#mAY_EaILJm:$I6g)/kOj&6/SJ1MB&<6HIe(`RZY%3jP.$&^RkYpd(p=fW
%Q%ec)GA#taUnltAE'26<W;Y+7e%@.)*5?frr"C-=Vm9.*Xr*'#c$<O?UemUB?-oCP$?NPD8[2uEZ(*fp1&D:'02^*CUO=fFP[=^h
%'AP!95Vr;XP1-ALgfWJBMNt)=?#@'YAl3>Y'tRSfn1E+`00uj(pj)^jDjdo?8aF&b;ls^bXkc3=47h]W.-^dgmrB8;p!5Q"Z7^)O
%Ym@-3HS!*<[YQa.SQ[LVNag[f0%)g"?(/6#:("_NoOQ`.c+&3!&W_ap'Fa-ne1rN:1[?BH7`,-TY?Ib6e6:I;dHit^BJWm;ko2JY
%aI""X>n$t8P:9A0<P>U9U@GDslEmLiFZ&Q)$DM9]ZUqXBXZ=A1F]=l&<_To&.MHLT9oG7EdA@M`8nH?fN*3!$#oeFX2+'V`6WKT8
%*&6$OaIn>!aB>f05=OV)4Ag"oBbB%JgR:`S0OdIf<_a'lF2A44Bb@1"s&=JH#U'HnqJ)?P`5%a=bq.AQhP)b-S)6)T+)i?<j[\Z*
%q$G*are-gj1t"4!jbl.UM,O-U4&Mq-e>t1?@OK=2m6pcdLT/[gKt1=lALSC*(4/oU,A05L0+(-]3@B/NIY8rB$>F+%0+*\Rb`)p8
%lpY(D7@=mWo-="(YlB9f-re%"XF$ie[24NdQfbE;1[fZf.Z:tg+%Fg;Ynr,:q96DVUQMd+e,$7QV4#@e2,mW:'7r6h\X`+)B2S%B
%>g1.aSQ7I0'Ci3"R-"['hPl7BLl\c1-Q:.bonp&#oOp)CZ["Pik8Rd*3#-bHmV#Pk"\7cMe^Ap7fU7Geqqhf&`N.R>\tPm,_8=PN
%%,JeI!CO>ZaK`s1VHpS=*r8Wb?Tk#"m/gst%iPe1c0pj8_`N/*O8h</TPFnK<bMuYmk]&T0!nVYUTF9Sh*J744&Obt.kmr8h's9%
%Ul.Ea25N4#qC>SH'=D?fbq8F3:oSq`Gq8*:QidCX\;0YbUl?35UgV[XiAJ+n_$N;k@F,P_a5KIEY9/3-?V>M<`W#>'ecXWFgc#.J
%UJF]4f'a\k<dp-!anHoN49,NZ!W2q"!Z(tD^`rOSIq@jVa;<WRNqB?M[lR7.DMmtT_-bc6$iG4D_J_'BYD=b!U+#o+La:'!a?b?7
%ntH0cL#o&'#QU1PA^1`=U7uV@RfmP_2;>k@%6kj6kRDq6-fC`f`-;7&po8goM\f3P5hB!i_L`-i!JR)/qC(DL_3)j@/Z;CGhq'Q)
%Keao$b-Ec1"r*178WaQECfKI=&=!DbOj1-trc0Q%WPDs9$@n[&MuQt^'h#i@8E.nOGZ&3nqW%S_(%@E/kcdSS3SDL>^&C6XLLHM.
%LAmm^!gA9i(4Wg97M@]Qs,j2$oBiIt9[_?YAH:=pdqTs1il^kYo`Z%2psJ4"^__Z2r8@-Z(B]b9-hD76o0p?OE^hS*A)6t'oD346
%p\[\Op9l>0FaslR9T6RLdIc39kFP[b*?>t]Gps!V!gXV050]9VBLF-Bk"H=ZojeuVCDrIm2DH@@,I(([;CMNg7Z<>Y<hAR<>$&l]
%4+6'ABP)JRPQ,p'&Gnn7(*N$]#W\]e1?eCjedRq\D\^Z%:PE3uoV'(IcqEZ=Tf9s4O.-"$j7uiXgoLB6"7eS[QFti!.mM(5$R4Wc
%]$Ssh(lIS7SqI;6]K^-,["W4MRom`t"8G#(,Yb.Kir1Obqi&lh1IG-F+$sIV?9g>qb(-0W)TFbJb!mHU'mZq45O7SK-W-PQ%,Wlt
%nH1P*\<`-2Rl),c"Rp1_0ohRN=0!ILqLZOOs6%3$Wb-O09'-CqI/El!<n.F,hhBW;RKKKiO$l?l*6\3Fq?mRn"s%'Z$,f_WCL(;@
%X7`j6O%<b``s*f0;;[5]X8=O!?=3$`J"rQm6pKfc4QF$7Cs_VZqNGf+'pEPX%5=uo?O,ksjsq:>6-!bXP>+cP6D_:<\2\"tABQ5t
%4*nhZ!h04uWET_O93/YF[9E5I[a\X$ZArOD'r0ITR[%4"kW;_-aS?I$^1"@`)P\R8]P*KLor6brfhf:\?Nk?Bos)6_Y%GkBa9e@l
%)O^2>mEBre]:V>?4"Qp^!ckg;848MmL'[a\g?s+5/ptMM[%^WM4blZgmu_-_ddCnXNCq(gK([hTCmgYM7"QDQh5INPG(BA^FEHr2
%,F'MMeq*=jI1<Q\Tn8GOq@PX6V=$"]=47*5q_D0bYEnjYhRB3o<oOkN*igUW.CK+Im1gZ4LP&Ln([FbJ(KjVp6jEW\-p'^HHoRMT
%-(.bDd>^Q>)LOWUUi6s)nHc3K=nglN:JVYp:$PpEMq8cs(T6hX=@bF'YHeHM8pmYA<>m(r[UaJNI<Ao0J:T1q=gTe'1l\fp][/]l
%Arj/;"Qs?'ER<qMk4a8TFWJ]Sfe9J^JVE>!]1O9>:%l!?$5('*K(qeZQQ7oPef7t0?._*G3[?&&kaqWD#CcCB6>PiQl<1apHQ:UJ
%:Wla(>-Be`>;.&g8K\e!jY3]%oF`"/2U$RiL1/1J&A0$331pqmTd<]Jg'HS%TOF)ETN9PA)UhrbCHrM2W'iGP=br*Cnj\=47"1LC
%LjM0rR?Q$>#4W9LDA;rTXO1maQ7.QHc"k,P?:V'3;r/"7"aWW^R/*fOGh+Ujd/1=l8]/C>C:8`u"q)L(jQco;0N,aC+^n5`*iaW2
%H[m`NRnNM&jc@;L)],f`$-@<uP8GSo/?nFN<9U(hp\J0j@>CtFH"X\N,4KdN)&8qCOk#bRk1"Q]pAoK==tL&6\MaO%-l(nI("u8e
%?MgQV7r\m_A$7J893[h!3_$Rh#tsnU*7I"#/BVPEagnA9,*s;KKcXju!R%43kLR[oUsdaS^nJPYgg@j^^(SjQlB[Il$Ok2o3OKYG
%;AGs2eZ']&l.\6VqX3[PJ;iT;+LjC]HXrdV;VP2-65pl-iOeZ"<YJbd(\1G@6(+c,es@g"5Mm?mNMa0\LOb[)k.rSq9NRiZIkV[p
%i"V]jPW<XuY'G(].u`)QQmSJn3pqE:A<"/<)bmpg"NZoc;n\&@ojUDMPoR]XOo\82E+I.i[ul',YAEq_XP'7J&kS@CF:9=S3eT2+
%4M,`iPp\RiH#RgH&irV</T\Yf,gKV47QFAtq^iOtQ!8oX\KgW+YH:9i%"5fdX$pufDM>hMnQTb;d2Tr858]Emq*@dYP)CLlY=feF
%WR<YY^#9M<+LeQKRmVbTkV7191>g0uHZ5%]jPKFd8kg]1s0t@.$%\:ZL!L?+*')fS<eCH>QA$`#lPlCOCk]$jXEGu^^B<hZhQ@aV
%HEVFk&Yo4Aq),$(L]_>Te;`nR'@;&j::'M\VSi6IOi&bNg:_L4%$CB/iGd3YAn6\\OH2q\9P[JhO>S]t=l@:CQH_26fI!Y&:Od5.
%;Q^O%0tP`t9Z.'rIfuU3j,f_c8BVaJN2Ar/@8etU3SX7nRip.LJ6Xh_!5/o$"MM&Y#Y.0[HRPsq'*P%>V$ljlDO@?>NE6XdF.W0]
%L"$4\3RJ_`kU%1E>.YlU2ET``6+Ea_;YuBdJ&cei,GYbD9NPQr&_U_93ik%qQk2U(`2FO3\IV19-A8aW+*Is0J@SX]a&5E$)Sj5P
%g-egA2A.%`WG=BTA'57aoG0-D*jPQD>Vq[o<[ZTZ+Sng?6Q4JELuYQLR#AEHWnKsaNu"eQT\Sjo@<&L.Zri:Z=R2!t9SdTG[9_bI
%fS2K<ac1JD:i)RgX6]Kj4:@c7OF.SO_ui9?%ipH+QG<Y)5(k&I%j4DR9^:W:d=c/@!9#7+da805P2m$s*=N#C.H?1)"ONb`i4j4N
%kcae,__JG\N.@#K!*SfX_hclB';@0iXAJHn%ZD37/>B:,D7mI=)nP\$mg;*F(tFI_9SH7+E+<2^4XhqNUnBm7FS]Z@fP&mdMHG/(
%dB@?B6ELJ-b.^eQq_1W^g8hT0>>B1OGB&`:jYA9ANCm*9Mm/u;(#D\T)^G2%XR*t:FfX>igG"Z(;ql/A+DR;4#g:BWHfMsON&bQQ
%-K2Hdk=>ILWribI/o(@lCRV[o6JK;\DO#l)Lg\WnW1Q?=Xiq@QMVq>i"8#6biC="N%&6`A9Z!_FP;%=:33IHZcR3ZO?idD"+S$TZ
%&.l=R<jf(gTuA>dF(r6s.";pl!".Mh,LksJB\fAP'bsk86@Je\^&85aN$nM*d_H\f>frOd$M'VT]u!C5lE65-1d*E9\dfn<p)45g
%=!T>5+&S)07MQJj$Ac<1"03=^eSWC="g3:#(+q<7R(C\`@bo\dU=lp)V^A63d!)PhnR`9j=m^bCk]KdLdfm"'\#1,-BqOpo]nYAE
%M+tT:7V52s-B8aOhW,O0no/-(F!*%^V1E5Y)p[!DinL9N6FIS_<7%4W6s(boa@1bHN%`e!%T&\uL^oH#^*>=9a"\ZnPSbJ`'Ppqc
%M3(>OgMr0#3:Rakbe,/93"lZWa5Bh43tTZ2q9W1dLdmNPqJb2fJ(Yu@(/1>%@0tg"EFda8%ZGBeBubS%c,EIu/cr90$%idd?U9m"
%aS,uBd?#64U'm1*\*5[n<Ki>S`)$_MSsTq;247r7=jc6'aUH!P-H&G_/@TGLd#9hsfXJdZD*#/amr<]W$+;21MTaC!4<Yr$3Pcmg
%#+ObVg8%=&!:AVT'mNtIK'@kS*/TOWL?RU@8Ym>i`;A=]J_dIl$.`)/9ejR7!(O,^f'kA%+ULj^U;t\hpfFc^_)n?d4HX]B-@)-2
%P7qGaWVj$p&UJ1f1i,P;4M4&p)Aus/TGK/TZd3?f=6]"@#rN''%j?,=oXp%KfNc9[-PjY@2i`Vjm&TM'E&M3rLXg@CX1(i3'o%#K
%Gpf:'0a7Z`_lU8,*s7;=TQWA"Q%EcnC`"#,iMP!s3lU6$%)Y0#i%f2^?biWM[.jg"WE7)>PH;L"*@6@__eg\b<`3Z;D_BGFU"(&W
%9=1al+%NQd:eltX;5nc!QBjH.Cu\#!L=ZGR8>b+m>ruLbF?!_-I([1Pi;&$0$Er5kPA**?Q8?KG)8mOuODS@?@eKM1V-d7E.9+)*
%!!to5EL.dS+/Te6r&HR"K2mq"fbdp^F/0A4]c^NOcFuaX=T-YA*-B`gnDsqo^8>ho>cjTg/Hn*VS65Z/$VniX=!n`9WA[G/a?o,M
%8<0(#Z$S!Wom:VT1`JG8DM/J(kB)Xg9bN5GP8#)(mAb6ZBPk[@[E/KN"8piE7^k\DW^`GXJ)"ggI'(X+TZ`p]<2E!c_0nr<E`HMS
%oU;q*.7cRO+olZ%;LQnA[oL,pURFX4^W&qlNB^$7\jfiikLJIYm0C[+5O.k#q>[rAo!-7FD]foR)eP_Hrm;Z?PuNq<'`r_J\rj7n
%HKKpIerT5F7Q]I!U\d/cH5o^TJ!t.S5Wn%;lGPC-nljNYq#YIgpjG2P_.AjqR6/RjdCbaamQ0k4RM)lpR7;2P`m?lm8N2)XbN!KW
%_6r,@[mk6#2m<Ir$2YrPm8C4rGb&WPI&1V.;IG,[s'4\OlI`O`*INo2J''CM:tC7_)AQXbZe(7;N'Wrs"-oL!m=l,mM*[H0j=''T
%F([L8g%(]-jK7Si@j*WBigd(iACP37-CoipJ.-glGJ>$Ki2NbTD\Y!bl7_O8d-U'`7M;;5,L6\u3BVZ7SZ1<'(q5[>`Ml6[Q-1Uc
%)K;a7NhBPFqu)pKZuD7Wp>><*n`d0^_ru8E?0Uc(Mm\a6T&2a)qn(I=IoSJ@Lr[g#rMZ;NH2(T(],fD-WsAIGhgb[npBP'RIfIFA
%P2F$'Zilgt`-g_6Ds'@3NLu,QcZ:W;QFlWr.3Upi2?C%&%XouY#KaK!J4HtMLBqAelL@"CJ@.9,1%S;b*Pmfkk[TcW[eJb$1Q5SM
%X2Nr:$Mp,dcM7qMesBe)3shbQ<Wc0;(OdodD@Y5AM,!JJ"(Eif*3:tlGlV]Q_V6jq]iWp>+43p(FQ=Y$"$i5B=0j?Xq[Phs_N3["
%bMN+W"B=k@.OM]P\ViX\C8,*PP1XddZDlR<mbcH`e>[*'-"\U<P9(tnI"$Qt:MtjoM:-`h-(@JDE.Hj3O.#QZlon]Z4'Y?!&,7Nj
%28i931ll5kPR.'M>WTotE9ZK])"Vde?MscrC1k'rQ_Yl)<@W]@n$n<@SD:-Rp-R?#JD9$)1sp7L05K\aDD^eNQc.G90&TK4$1^.L
%N4stSKC=j$WGBOMi;87H+YUgm'V.C>/%H%#^bQOkjEY`Pi?(f>lp:49mNQXJh-Wlg[K6LKd<amHr@*ufC[>Y6NLPo[jFd)fCrE?C
%nb66N8P#)plku$HfJ:9pl>#?Bd5##5fpusI9TkDd="/Rl0G_g$jOs>*IRO`Xo%?ru?QN2Grd1\cFR0P*ot.NOV=mb;;;@,>;u18E
%*lTA5*qgenoBj_h]37*1O.F!B[Z5,H6#PMbQ_*`;D!-,"B:1N]3Ck.I#&7O0ha5G(o_^nDX6.tuF3/%,aX<S;8m.IhH8Rn6XlS,2
%,PhZ\Aa0*uoURoR`IYcF8nPTe6%\KY6h/Z03MD*N9BfXTJPRXh:A2=6CX2/$8=9GN#D-dE+5!U#r(GSX2nqS*/HFbsVYpGlUHT[^
%OuZseNQ3>pnFYl!^CcBA+CW<s$W'Oa?%7O"!nh]`@K)Rq_p)#j(OT6@V(`U(s/LQ_oeGS>Co1#,b?V"4?]fmTYO8!=:^bi`b^k7l
%^No8YAr;=mj*3ZF&"P@"rL6ka=8q\Vk04tsLP,T.=+/]HZjPuF[O5j>51![1o7K]X0<X^_q5)?OP@%po]7)&T_Y^*2iQr[YoKW/\
%/*MdBs6f0[m,-PZ3qMfImCrGWD)UHN`\u9Ee:$9.T3:P6qm2"N\GpNEoAIrcFTVR&n0$]9X"2Nqe,<+i?W`S6rpt.spD7luK)_"E
%\b'5<hNn'u`b*5?pUj^ch)sItb5S=1k(E]1,]<J%<u4;Toqo(^Y>t>frjnfsrJah>d,0`:^AEnraFXB)ErGFpDfUV+rgZ#O$?VFY
%9<61MlI("Wk&Mo8g1Q_g]p4p1k!\$3in9M2k[mD6M]FAuVebTkgTgIidb^G(ZP;lb^+Z>J(WE6;e$6-AHd"@6ndgLg94ucg@HjM3
%hHme[?^6pp):6_tU:IZ'>kC66Q!9pIg3/K\dP!lgX[)&hWDcW6YabXGV%d#]G*`<3_L=WZeB?HpE)AY)Yl(U9&6J[(5\[42^s:,H
%/J,[A]*kE1O3Rf^74&tp?T3-1Knj^m:jUk*#AsX[[D6:ZZP64DC,_g!(0c>Kme@65'51aKl@If,icTP2CqmEk[[DGI%Qti^Q^R7$
%[q3s:fijD"4MNQ<*I%G)WAM5qI)m\Pb9s!!EVX(M\%@#.M&e-3Cg@dAeQCaY\TW!u?Z*OK#0WS:6"IsL4kKqoXK:9Kk#Xm%[>,Lj
%<,Jg0rBt=1kB(ib--=Yo.gPb=qT?qMDK)F#8)c&.9Dt?FVe4t;V>@&^.rW`eKp>E8dTZ<F<FL$P;*A9GXL:0jK"SJ()Cr&dX)U;-
%%_>e+OKOUF:Mq*<e^EaFmcrX(6$ZIAFCFiB'CT#Wl0HFU+<8%#>O>^Of>?7mc'iVE(g5TWhgS[#*ZMt"m]9Mr.m31cY?gJ[S[G@]
%rFE#Wh1jKaq:tRF^Cf@Yeo5JEf=rB+7;pbRW"`InI8g".RI'Xlq?aBgl_ScEFoC8bXfPTb3r/G\P*+>malB5U>#MC([o/nd:sS7u
%K)8?W8FYP#h$XuBNG@tF.!6PX1&T'XIBNdc$,/>5EFU<n*nlFOh?Ps7a7T8Krh7]k396F6NUp.;h7,>LVi>^qIFr5sO7sTAj7tkQ
%%)+o[35p+PD'(Bq6g5Da(-:8F2ac1E2r0S,e6<6mSLBUsJ*B9(h/'5Y#EkQ]2KuaC'/o8;1VKm(Guj/52K'ZFr+>&EcYU&4NU-(3
%]@7+A=8"sh3>PAC';t<NiT"Op#[`E!I/)g^qBXjP>h$ZDf/k;l9&?1.Ut'KA'!HLe2j*.$p$9\!IV1[8*a]sXRRcc-f$Y/FZPC3a
%-uUQbJ@Lj_*'S51`VTM`h<!&5((`uUlb2deB%GQI3t-TVBJB=XRUqNUK`H2eR_ECVk9.WWK9"WMgj1#`_m62V/U"T?XKspP3FOQM
%R:FEVb$`tZKe%'&>u,FpmTPG$1GV\m3;%C:h/#Ih\>iSo\bCJZN=VnED-dj,076B>\`=-=nq_dS0$!dsr2V"m?(WjE)e#e>$44=+
%nu?YN)d3kl2O=5lG.ZNCHMheZ$oKs>@e<i1&e@m>(%H>1/1=Q9YDi7j\KOTb)p*M"@:'M@CiZR)PqIs?;Rs?pPhr1EX7F8_+N`#=
%2%)S&_:.q6I'q!PjD*<!OF(!kCei9YQ(>h1NcLX^$Hh2]p8Oc.a5<VBZT&c_[,XJ0\U)e_SnI=Md2-X;BYLdY);EMVcXX6HOrp'p
%rI`b)<q"!!dV]tFZb:bA1q&+f6$>>\?L)HpdZ=4klLiQYG$eg`GF8&R\._ZOkrXTF-+BX!&&Fh2g>0qiGlK\0]=1WHm[gHOb3nlO
%o'pV\8EBM'&!"8K]BSnHhWaQ"DX[Dh"H(!$8+3PILVp+2rn_A`EW<,(0C5amc1HIoUIO9JB*VZ2KZpX=MsDnmGdZ)c,lCH!N<HHA
%l\S=.p,-jgH<j1VXf;!Sg.pZ[)*K(KP/eT?Rs[gL"Ho<n,m:eN78>f:<.`<^V2G6N;6!Y\\4SF3%'"%;m'N*C3f?DSO4X%m](9r?
%b\XELl'\?Q&^4KDp_+NnUNN&3]70'W\$tYMm&ARGba-TO]`Wa8\9f?QQ)B7>n.^%en@2@V3Hu&<]8')P3-CT@F;ouoouu9$CSU]o
%gFOB6jV#Df>OM'rP01I,&%Y9I!I&jsVZfCW`DZ[)W.(T1*Nu*kpPsIdT!")>*Ynq!;t&o$Q0rL<pR-Z3+6JJsM2co]lMg/raSN)8
%p@Mn\Ui`SW-Z@+Ds(P#QXe-r9bl-e6(cXZqm6%2j+t)(2Zh+pKS_Yq.2UC59NO8gh<s+03rkkDugjeU]q]BU+F!YTQSY&@&=$S_-
%[?)*8=PkS^(]4-"HuZ!!m9d4q09:upg?N8>@-aOlHo_XY9)bZB:e<,'n!"0aos<(^^K/)(W*BKYPP<,&bI_6]r3BP\DHr#o]Bn'>
%IIH6s[[MKR%OR)8kiOqr>._G];c]3e]=#>rNHFsjG&nF&hnFAQS5aAn0?`p'qXLk=qfpF9GCEPqh8S[TrO^Kibd_G"K)'c%f%[]!
%k$ObKX&%ijLZ!'hs,^F3miEOmS\7Pn@q6<ro=02e.mI@3(\<\WW@:%<WYB\=oAA)iFEup;3HBD5H-WOunoNoi*dS,"\\Uq=br/n"
%me[`A3ELZ+pZ#?,l<V&!<!TtNH$T:]:af[NY6sCZ7erdQSG'-O2jIj5]rr9n3OL>R^:mUn.nmG+]"/De_@\#-L#'A:ekBpfeG-rU
%9'u!AAl*9miqt=Qn[[8Xip-,NUM'Afr-<Y$?J'!ueXMP9<u2p0g\U_Wls=V&k$_Zo-5A#@\)KcRp""E5m5C]>c"c8gSWFf([uT1t
%adam+gB"@_Q>TlQXnYYreU$5\8+!_WkZU'S`]ga[>Kj7T.7a6Sd34!VeB<2#*KE,fF:-"MQ];[K++\=dQ'XZ(rApi/Fo?\Ulc(01
%=5E$Kq4JO/WC?jESs,[oOP-MYBb0VP5K1(b\ZWjH=%+F-Ri&_c@f-:oT6o9BCieh!5O['pn@hJ2Fjtm=K;ZIDL)@N$Qdu:Vf<c&I
%8VrWb;4d4s>69A0VV3*F!7fGF(\%Ut)LVBAdHP=ZQWPCN>7hG?cW9L%44h)[gZm&G&\iW-:<'mNXa9?Am6Abi2qQYZ\f0fb9:(DO
%.1hDE*pfF'qm$(:g.Aq=W6!X#GG;1CJe2=W?MZ8P]#cMD\"=i`nX[p"0A\eQ[QleAmC^2L@3,$)YD;<:pl;!^6(YMd8Ojt?Y=!a"
%X1+`h3LsH4a`e!go\3kR\-m5,6ndFjjGNn^BMSsDZ>!bC3r.?3]*@)eCWoZO_q(.8BMH3%^OJe=;N\$-]omWFa7rCSq\YCe,-=[f
%F(LG=5H*-u2i(hoQfk\@](UA#_Z]ET<_M$@WOdJt\iB8dR]`mjp\55Sr,>#2d(RrXl]V@BeT[B+qNG@LD)kH%#MOD62emI8\r"/'
%LFS^LGeTcL$d[QhM%tIsPW[cLJ_B!n2Pgj@p9'DWFc[-5%1)3l9J'Vl?*hb@.X1RIQ^Ibo<)#8Pp=I1;d)-ug0<W#V!eTt0UH5J+
%8D@4,nO1!pedCf9Ci=mkG?9!"W\N(BZB@E:>li6mCRTXq1Y%kag/>a4ZR<BNiCtoWPRB':_ejiKT$$F'XtuPE&LNn0gq=ESP>fJ"
%B]lCA+61Lp8(?s5HNfM<-Z'"E[+n=+dWle;C+n6G8mtX`YGul&I12XA\($u!X?UgYL##;h_@pYfTn%$Jnkr4J+$t>-*>@/;c5^?l
%e7RhH\&R6E3?Z-s9PA>tZcT'<?['bLY'5)uX)Fn3BK#5iKD*TRU=B^g8flYQG]\\UY4#[^/58CeM>h&^)6k+r'EmYqHE/;`l*jL#
%[WVM>;:W)9Uf>&jh`4@pmj1U!8j?0TY+-b0*"PI\+[=ff^eN@kbg"?1^uc7F?C/#_24W6^Au'ce:"l_3Xq``m`)=sb)@Z!:[]f3P
%_3RAGR:eF"Pn\+rZLMhAIOW31Y4p<p.AG[a^^P*sL6>$uaidC;kp5RH<oM/S9u2'.Zo_C9VOMCb3>,i[f)_Z,LA%FK&`556QP--i
%ra;+_T%PAkDpA8Uf+5WK`BN6DU*mUT)I,\<m.tHER&WdqGF:4mZ]WhMh+\*`dqsFWQm4LNnct$7,8SDV:A?+C<VAD8cFq?"Ba+"-
%.`M/5ET6=6H'1nPNYI42/m#BYC?lX<dLYL!+PE!&YFW\0INJ:V_bsmo1C.)H&oP(_oKctU"+?a/TP>*<Md7:>j7VD3!4:EDkU`!o
%dEo=@lJ]j.Y%Q6^H;BlhkmZGc\6pG'kg6`>`E$2.V_<WuaA,(67s@I(YHJJPVX`U08q,fns'0CeMD%Ka/U_h+M]8Us*D21:M=DM!
%.co/r7QJ3ah<]f^b_+0&:1hs7jg(pblip/]+I]8dhH-g#OJ4R3Co1;&fCH^Xm]IigR[jm#mp&!YVJo7k0BsL=`:7]L%:aP$U0@oL
%nWLP2QHHt/=I0EK=A@B[CJQRLE08C/#Q8d5#Va&2%B,Rpp0>!n!$X7)Sqjh("1Zk`,I:OQliKYJ?NV%X=Usid8j'\"efFGT.O<:M
%;+g*5j25hZ-R/iC<CG*t7N:BS:?!eGjq/8Xo6'LMlLponZQmDlb$/oFnFcq_\cbpE]>q,OQP0qaB=)]&?P^P5&f4f%9;AQOQdgII
%\,b@#Y>aWe\;A<gGI$<X22PO1lpM@LN[YaZ7lC^(D1h;o=fIeO$LlY-B]U\^*i/?5E8+reh-<alY%+]$b61L&$\p)Uq"6O[dY;^"
%BRk>0`VeRQ^9G-X;Gba.*pO<F[YJ%=9bgM9p=11:!],"MYRf"T^;U?>!4)[pV?FL[6:/sp2r+$'=r%PC#58Wi9L.Yum,?1IP0M'-
%6@o+??:1h<hMCW[bqki1HWFM<;bRJ\+b;[rqM/?hS0$$:d2hpt4.mP8i@!P+%UK"dh/fG(o`0K8HOC=@,m#.a7M5r=3fgFQ=b6`C
%9ff)F#/GH!A%2(F@5mZX-HVQ?e;uP.ggo4.#2bG1M:t4>Q3cpHgC9qu>!Y)d]ENuRo]<Y)Mj?`T#Ek+&mmu]7UKSEj88\]UJhr"V
%`>7-&l%l)W%\$0)aL[ePO(bsj(6e!NI6q8a0q$7.hgq2'#rLcj'I[/m8$cS;r>1R4*EsB?[b9=m70!kW,H7u6D9le8Qn1N*S:0]5
%PJ_@D"iNdH@6?LE34d*mhf[A')Q+NEJo$:r6c/qJUR-.K3(h8s=CRbSR9Xdn*)!Lf6'F/cj-EEf*^D5dWTQ6VCu0iB&+L%8ld73S
%dBWhi@p-C#e:;agj,m]'h6>9p4)n,E4U*)!EQ@+e&uDYh2J@e]*3:,B",RT@,pIjXS?M9iTDPIEpbl(?LGDpiLR+tM00:<f9K\-`
%`LGMBW$mYA0bt$-6:<HJ7R;KGS<VSiL`3r+./O,&TOGssGPQ',D_*!(]Z!TC#UM<bEQ#qdn7GBc+7HrPA2hVC/TK/j?7(R.>UpK1
%DlpXT2W<Y34M&tGZCm,KP;(u;EqcF)`*"QmY_0`WM`2boL;BUR<[&ZL[k!d]-mNsr\k!oc2dS[_,9\*ljq>_dkBH(@/lrqr]ecd+
%L8]AH#pP:_Ln3cu50@tTA7J.![$_D?9pRFS[GuAr]N<n:$hlnY1[cc_)t;Y2]dJ(m!L,*aUIsAo6,ge$]"h&"/=V+#IST-GdaiTD
%[IOYKnI69'AFB]%VgM?!huLYi+D8^L`TH3"C]>XjK$.#UWR1[.#GJ]%980H08D:<6(jkN!E,ZonE6dpcJ9^X$/QE>;VRH-1h3^30
%J57jJFBIWsSf0ip,$?:CGB'd)Lo(1Eap2>%,EE#c'Mr6a3!Fp,m\)1FFUq-XUC)^mk*;.4\5O,O8tuj_3!DjQL9`JYHdVK%X^"LW
%Jf,'P2"!Ugn[<f4%mGB*<E[#LS>U.h+_8!32lL>m.\c8JHG_/>?r&kb%<MhScX@QPZVQW$JS_2HGi;\t/Hq!HcK=]K]cpPK8'1?h
%*)L_23]649KA2[0q.]@KRgrK$$]`FMX)OV#D@FYk-@]:g34Z`3>f,;S!ic$K58Ms7G^d*^lS/J'0QN\"S:j-K;Q)Uu)hUSRVdtG7
%oqMn\5hdRn-<=t@)<bg1+j]UH=)'qJ[@'L0HQV"MV88_DH"d4MICFMNamncYgEhsOf)9KtT_D+o&#sPUDK`Wsr6c[0k$`I^^hHX7
%CA>Yp]f/24*BaZ$'m'NtDKDZ(b<1"$Ed[b)/OIt^33g$$>oOL7&uA7o(-7&<9WZ?H+6#C"d:(\9e_]:Y[$`ddU[0aOj4S0@2?ab;
%3_e`WY;eh-3@V5%/dkk1;.F-Q51F+P0Mms?n$BhsF$#j,n$pa$mGl3*P@KI`Yh!O>-\us;KI/)<cZP/B7tYpEU)HMUEbq@JP*WE@
%PZccE+rKa\)gZhrAijn8F:GtDCTFU$]g/aobQ/c\G>3.)]dlG4cQue.H_N#+3>I]i"9&f"qP';_D+HOYroclpPU:*)n?0QIGO503
%hl[uc?fSD\ljD,YFpY\B&1o+C^9`)8*MUO[B5Z]`l^<X_YCJXGgJ2OTZTJRKUd-!c%K)Yf+.#`gS0>sTc$TgW^]!9<1XgeHf1P:2
%B%&^W,fFre5#WmeK:XL6/?Z^i1k9_.0$1f/e#Pkc+,@uU75"oc)ZJ$.]Glk@&qu7Ga-ck%eA0"0Dic+QG##YR5\T^-+D,o/bW]ss
%\%KCpHg`O?c*)T;[.jNVk$3O;2Fo7Xc>/(r]\53W"#I'DQJ]U5FX%gs>[YbN*9T.dqcc&>dr;VG@VTRo:)eE*?L7#:^>4XO_o.tA
%#Z"LHNK*HVZ"g]EmQn[8Eu.S-dCZf&8s:0M;HdXq9dQGdguc3iO.Dh#9aNS7c&aKM`Ko?&brnmpoL\&:'S#i_#js%d9Bj&9]m)*?
%U.Y=2bsCVOFgZ-XNi#qFk`u$eY&[B1$J/O4B_J&"Ic*eboBc>$IQi)QOR8ObZ!HeSN<!r[QF;j@'=IIJi),SGSOa++8c$G'CGj@e
%Jp4sC>[D]16GAX4Dr#QkM_00]8niFYR!fIG_FtjZ)1'@d^%EnSO?1V\K79\fgfTW.K_YF4WO1r7aif.YDDuLbfM'u>A)gurF&dW*
%+Xi+sCb"r\_T-oh-C`jCM0@D_O#Pc`A4d.gHLVmg?BQm*As2rq"bl4A$b?NWk#0$7Ha@7<D7_o$U\5YsS\<<kZIrhj5A3DW2V.^p
%8`=jWno4=h=SmnTP8Y7JB)Lh,BKbpJCc6=3+?.CZU]O/."8^%_[-&.%0cpD[_d1c++N>o1;s;ea[tT:jpm/#p9\qorXer/$kb`-3
%lbM_V2-q;=N(pVJ;ATY)[?k@,m1#U)DoeeEO.,>(L;";F^N=\*M.V)@<HUHFK@VD[Vl?eRo^VIs((T94o3s\K@;G2^=Q3f3RaUME
%i!;qZdV^tJQ]tN3,$Kt(Rk$kWW*'B-#!H9X_\u)gkE]!e2;6_''Q16sVZ.&O^0T%\2`=g#k?c"eU)_N&rWO_1^>_O=./2Cs&)m^k
%0$-o?Jm<]b",".T?-fnkdJCap+Ib!R'XK;1!SEfUm5<0:mfZ-0c-Q_(ZkIbZV9+Bq%&=Nok:jU`NW_T1#,81?^mb!"5frN5RMKQ^
%K_=D;B"_8pKEd-QXl<g$R,6sGRKoM(iS+t#'_=mK==^('L()&T;&(G/`sJMi[Xh=,>G0eUlVZ=ib3kFAHPtc`/SMrqimMT3huP/G
%.gM+BOIO7?_!gHmO$Ej-b:#b5(LO$68NLlmh][Ys:YIY2)o55TKLWfca>DmN["Q#m74VI%ZD)G_ktVRkjbeI=]=kcI6)m09a#hgT
%G5_1Y8kq1*fCOat][0'_D7NT_3@-%)]d?rVar:pX`=G&-.Q[P5F`YgrW:KZX=WpW^>]R^oLtGGb>'^]=YpA,%$:`^5Z7dRUdEth-
%=`!7FF]-Hh5+ZgGcqpIV<[C[&%`9>M>AkM2dd$L87X`B1-!R(n%t(f+OR/UrJEbXAD$cf2*:8C7%$:o<9^N_Ajl+3@LraY8KI)'4
%Y2*Vi#9>BF%$D_N!=:cK\g*Hj\cU)i,h#H$]bTPk>kK*)<)+O;Y@lf$D[rt)-(8QV780-KC<ga?rF&s#s!YB7,M[10$DhYsEPCsJ
%JJL:HBsFIR4rX']h#5(78"'IqQ:`TLqG\MH?_4bCPVh7R.W@mMe#o!YD?J];NQ97F@2emU?/2NZCTF"Ve3EBiAtPQT/YX3_C%E(`
%88gkU4b\c4JLffP)a;p:6'*4f$"7\qLpGXQ0_%[^#JE=V)$+3[S9bk;"`K^Ta%)3ZBl3$IaYdcc!q=mN%^72h>>hPM[Rtm"%\R.&
%+9=PdbWbbC_qFgR<cYAu3['rW1_bJLNecp-k]$.Oi(b^aABLaeFo#*CeK%<F=>3Ol@@Jlc[EN@,TG^$GX/Ysoc?hHHLj*;U]n,,p
%,tcTI)nedD;JIGiTl3rl*Bp60mV99@'EP81M6Mk&pPW2<Y#O^iK)5Xd`:g"DSQpJ$grcK!$+/E4%`4=8E&u`KS,eUR$76_H4(0pW
%EOCR:SZfic'aLS8ZTZ:XmeKaY$tct(eQD[50V.@V;SZhLahGs:KopkIp>1E27lF2g#')c8[Zf$R4sp6dG-9r.llplZL]!ft4#`2J
%jW!RgW86=h_<l=,"W:!<NCL//gbOJoN*0E@"Vs7k%7o=H_gN(0m/quhr152*rU]\GPc>bgZ;B?Y.XS^o?")>NG("hER6L2nQso%c
%oUaL]HS'f=7!9k0a$qpMaKFC5[aR+o0n]m.*u;RbbF_aA8\&psLif4$a*0hg,m&%L_ciom=F*lj%f'"eh`TW<5&XcH>TMN-Pqp@@
%+"(9<8\N]]CN)ieFn9#\*U+\T]_Akm-C2"1UOF.)k0#XdYp8r,`1c(RCnH?qpa!IpY`_/&rl36Q5R)AE*(_6+![?<?ZbN$0PW,Ws
%X4]GHCFu[*fme`RglAF#r[>grT>H4K.4%32bd7__n1F:j<l.C@=_E8p+auSZ*T)=Y9Zla-M+p4K5&uKh1VRG.#4+gQ$5?@p!<g#$
%e-pY$bLq.UnZPF@?B1]a[+\N&3Vn'X"lhb!ml<tF.G]KgQ3hD-hUB\h\;ab-kYH'"+CAe6JRm]EHiV?l.kL/G3_;MEkh\1bZejHp
%3NKoi[d@"E[m,,AP'I#=kLJK@nE&Z6NB`48Pb[Ean_<,-oB#SF:[qSk\/4,-I//j'>>H:CIJGeTR[E=45C/aXAM3A.q%+_sO*Lqs
%QhEKCi5hMKqrQ4`mVi)X]d>cO5!s7XB1.lIi7mAtJX'aGLm#j%;>?-p_O%Yd&OpA#"cP(NK!7q#YGPsCVuZU;UV_1VF4<.`iMRn#
%]n,YOoWaAD`-;7&po8goM\gm@+$@:?]d'cc&J:7_&GdW-"CPN9d86uH)XrGPmHV%R18YTX0`6qS<KG,7/G@WfCQj.J2#KP@s3cdI
%[A1]MLMFHTe@MDM?2K8%K%JO`/=&'&D68/Y<qSa3(1XF9@rq$EC/_<^\g6^UJCK)Wn1^#-N$FBJq66K,ih4lK[a%e.LT/+6dF1G=
%AbDn(;0EYs1jBYVXnU6,Z&E8-gO-]en0QtAlLo4fT,TWeWNksmE#S`?I1.]#DuL@=P@a4P_rH6eo#PRq3_[YJS87H[(s_`($4hQT
%e8tb-YP$\^7sPJW=)IV">]s>mJb;6[m:/P@MUA@&XI[9`$o31(+L)QdL_@`9$oF9/_SHoOJ45E;X9cQAIj@HLVNL%m-0%"!mL[Gg
%d&-?GhuWpGhSC4Fo\^,']^J3\-5.-PD_;IMHN[$*G[>@oT\-pbS-u\.TR=c[+K^5O!5\*g@qK,%YNC@g#9Y/9bBLo78maZ1b<PtZ
%l<=eqDQ]*m8\?66h^SUDiC,.mX<L7")`\g*:6kp`Q%]498=U*.GjKUY8.dXM&4(84EIhI[UR)Z9\_'tRH""#oRjFrOrU7<%JrR!d
%+q"[uBGOa%KG5+tR!;u\'/3Wkhhor/a,uJ:\+0uV6Q.tsDpIY2,7_e%/.77TUtgd@Jqqg4$i4>OraNPbVU-L%@@feP?Tj+M.eP>T
%s4^_r+h,E=O>/)@k)i"8`s!t1Ao.8.(rRSeArT,sH:Eq="e28`^1A"7:50Sh6hE9o04-7]\2T_kUC]+A1^f0GB#!11I&6PI-^Z04
%A>eF@^Nb@0ohbS<oh^1IL_Z$<@2R$6!jkHM=MQr(L&[tX&tgb]7Y+sRB28$5jsVeYY8meDR3P2;3PCF3b?)_M->`gU&I$)/=Wlq;
%nRku8>ncQ;-\@nlM>rSBVUe-!?e7Z:!Rf6731mu?%_uLTl%X2P@Gu]Q;?O>])?kl?SeWo;7q(A+nL,NNP2_Ee;Ma1!n4!1_UQ'W<
%Tc<D#LM*bm+R$<)B3>c$'20$*Z;^80?_=pXl(S%Dqa9RYE*WKsfM(8fdfBX,,CO]?6#[/M(c6S>g`RZRG8)qHJZNAmJ<cY-5%Flp
%`R5os22@LJQ/^o;6akq&-Y?EB>Vet`6#]\?K4")jl-rH'pYB-iQC;c?DSioF(KJ+%Fo`BXf1I%#fqU604@dc?\m[.J(B2oH*)%_I
%N.N4!)o\/I%Y@Pr3"<ehi"V6B"d4<RJ#65-QsdB_.Du@1??fXf@.`>0a06m8=uM=4&00keELtB8N;LI)"=H4)^bB77J(u_!"Xe`A
%-t'k=.bUSIE8EAp04.DC0BWMA>]>]_\n6Mdho;:"4`jIR8I3F5aU:nf+0t7JY)"XiKRfg$'?2>.a9aeaX5XooQZ@n98nO%a_mj=r
%T"&2k$4HlL7tKmBTd]=0LRP@X%IrP\_bma!"j`!X@IG`Yo\9/IXGF"cG)6mK:=mF6`rsjA,!UduW(DE\K$?[hB#H=SN8.Qk>@1Wu
%Zq$fL4X7?^@EtjMID[HEboAGFcKT0[?bSQJ1hdWi;RIs7mTEB!n;J/Q>n]mE6F'P[^gB7@oSWG48#DG$H3c>0GK()\93'D!L`Ps*
%4p&u8'fTeQ8`(]cQr_$@J7*To0f-O)?K).C%23'8i&a4_mtgATl5VgZ";(bQ"ZQ2cfe'&3rVHuo&ra?j64F"dHAp(X6+es_iI34s
%AAK;e!mP$d2i)ggE5-PrLfVe=!,$NK0f-Oi"V=Ud'HT&7nF2tkgVTLmI3WBh+G/OGi!-*fm`5>($h0\MU_bA:;drVn_DqQ3^E^GM
%7"lJ3'/snDkCq/X.,Qce_%)4D*Z1W\;1/3)NA.:iC]JDb=M`h"TQoC5fFI_RPo&$TPD#%a<4q_-.\J?c$N*uT>bGKr!m^:("iGU)
%`ecFi+lTU?I^Ggk`F?l,(sZ?iJnGJMODsiM`===W-ZZX&6J.G+%b$AV86GfT;4tKBkEH95VpMHrKg>e<o'POXe"8&AgWN$,G;fZL
%31"]=?X<Y2nDZ7bJAPI4K*]EC2*rG$0@0Gk18WWMU%!/6crp;o_=(Kj@u3&^Q<:J%M00^qr5GF=A]7icAS$4*(5'+P-7a!'X,EWa
%.1/XUe:*8tC@ApXQO30)QQ`He=hAlYEAZ)II<FWdDD&`j0G9-2-=kQj!Pc3m`SUV^D!`B(`"3l]/DREd6Kl6+`@?<*VS,?i@&9qW
%n>fh-;4QX%iY4lsV`:D1`I1C!MT,*#(.'"%@@e.;),%nU2ZB&'_WhsH!_)%WI12ifM9uler5o8)S<?$2PjE[iABto8Hi@5Ap1T'c
%cV*tL(,Kkb@9aT1"Y]em]YN2:13fl<[kZ/\fVmd1(#(jVPIsk^O0A[97X<^]6j7oG(rZA.*Y<I0iI:;&'ROV4eCg?d%`Z\Q#n$OT
%G^s9ne,bSf#i65J>I\$%JhPE8a@R\V+S[@0^os>/qFl`lZcH3Y8hec6*gm`g"Qh9IgKoOuJ.iXsdsOI$S])OM;'*`G%N**D")u.b
%4UbkC=`]KVh?9h17[KA[_sE,m>"VWbANmB78Ws$/!er]_6Z^)-P,3X^%/YkbhD'BpA?;0;"]"PZT:ZY5P"S=1*)T+**U'PXJQ>j!
%P_tobY6KY-H=Y`0FIku^r5YTX4rBn3otaen7+$/&a+;smI$pjD^3kq*a:EOAZZ?Z=koU$)kRTrn"d#\bP6su7"-!U3o!$Pqr4IRH
%0/>S_!8mS^$kj"J<$Y6;i2BEL5RC69gpSY?3,c^Q:-KIV?4"`uR.(;q1FE%]B`mfF,[_9uEnb8U8[:-V#^b8ZECb>efNN-eLt$6F
%FRCqng`FHY@EQ"^RjYj>N)_.u!-(PsQ7$?G8&PTHeh\G=[pa)L@.hDHj%(!D9>VMN/LIu8ga63N+CU+JmNl;(:0%pD'L+$u`YE'T
%0e/@8*XP?W7q&j-0UObFK="2tJd'9T&IFp`j*OAm'7J#Te#+`VI7f[O*XU$MD7XS_iV4+.HSL.]V[[+\8Q_[L+g_EnCtjW6m3ll)
%gqLX%[uFtSj9_jdRQSD?j62%%VW.tD:-ikpe$.n$OM!8eS-7r`3Koe1TORGVGNR,f+^mFBk=jT6(2V+qcZimDBq'cM*Folq/3+4e
%\R:W1XQ"q(d=H9sB9"=bL#D/Mn*$`d??j9g;sH,Vl=8#7?Pqc+cZikZ)%oXB[qs\W^r$VNo&S"2*D[s?ClhM(*U],sD97o9;Js^h
%j96&f3Gst!A7$Hq$E6ZBj+/Xj?]c>"@!I?11jPfdoK9DVL>B:)fQM>;(l*dDGQNIL71^=RMMVrjatO,)o#Jm,dfVlQ_nk8iLD_1m
%gNZ/;NrXcn%VNoY@1(+7L"M($Jn%Pe`X0Id0U3KETprCSdSqfb3G0TJ9W*>_.+n*FLe\m9%LH(F29lN?&Blo<#e47u*4,-K<?&AT
%M6YSPJf.(L>qeoaP,pQFmSM7F,%;P;gF&Q8`;Fe4Lm$hQ"X8o$j0s/<b6m4P2Io<i9H;(,cfB&*EEn%\R!/t..OR"nR*l/2d*FO?
%W'/TT\_:(H0Vq?-k!gI[.l/Fr6U_Cs+d_[)P9^baXqc[a?C2"HBu<ZoV)TVNnU)8^O.o-doZI]))Pc<]Q@pPn5$bDRbRk0)7*7g4
%P,%&TR,C%4Mo;r]PUT+%ESO>hq61;a>UQ-"UN8ZPmTJL5&RImH=Z"S/&gl$8&lsg6Ekt.)9u<,<F4B9]rN)egfPHE.LP/rTO>))d
%A>ef_C@+XD))"Zr.kN\ul^'rZNKm72*gk77gMO=sE2B-Q9Vg,iR*MV8!YGg%WKlIoXVa?sT&U9i`8aMj@HL[(IY@;E`Gl_IfQ8Bj
%#<%9$<4jnTi"3,,/4@Jc'8J*$YiKU'EPk2)5f-PQbBRIN-BWqkEZ-^bETKH;(H1aD4Kq/jk9Ol_`LI_[Co?`V)2BRbX>iLt)g5sm
%DA_D)cIcm9k*NOEZgntXD\O'B9]X6;?Ec/i-L2!]bhSK-iEa"-jFo&S4N100<t<>s@7#]RYi*`V$[)S9(Mr3-:6%r5MjjPiF*Ag0
%G3@3T08APR1*:"_>gJ\u'=u6l?C7m4.u1QSCF^344KqB?'rA7u9q,PRW1kuqhN1I)bhHF6[<J^Ilj%)CBa#Du5WHn@%L4>Eo11kk
%-mG\Pb<0%V"Z[b?Pus8.MN!JoNfS5E$uc\eNriKq(#]2Npb<1-:U5$g`[Qt[@+L/`C%E6E$r?!jJep=ni?r)Z=$B*4Ro__VQ)B%B
%gdEU<PnO_+F/Y<s=ULCM&uI0kAN[1G)Ns08$$/hX,2n,Z0]@UTfJ;?A(FEAh$!XQ;n\R\3kCQ4_.tia,@*9!N*n\W[(b\S(Nsf!)
%3H`5k1KTf`&?D,VXg&GF'F[WH*JF%"-9m=]QAg14=PFjK9-+r!+V8&c)8j!p4/Xa;(.=Mh=a;NcgF6I]=Uq4O>HRhG0nD_3,])R9
%N_-.lP6>M9cS\`RD\]o=Z#iORUW,0+IK_dAB]Wr'/uNr*@<dWa[b`,d[`Xlm0j^4qJW_^t9]gpk[ah/NK,$ErOr#HYEl!DmOK_(@
%f*)iZ6"t,07!M.dLP[djX!XJN3ibeXR#k#TVCdE6o0e>k6d&,"a'ZAcU@dl*M:+Th>PTp*Gi=_^Uiij`H""R&\6rd&NJ(#0,gHc2
%W?(*unH@/@U(&kH,#]lg'5^tI*/24^m^^b*`X@8?S@"TcaCQj@$_,=YS-Lt:+k&t+YNLbThLs.\61VflRe)s/1"1#$b=mSj=eW7_
%KdiA/S2C[uC.kG:hBa@<Sr8W4G,<5ig+5!cR#WO<&]0`G0Tke7dU82$KX]tUVrfhQ:(PB&PLBVfAU,=L.S0\oQ]OV$@A8#*.16'j
%od1!J.`(b-OVImC$j+b,]:<FZS41%ko,[?A%Tb'b?Yehb>s>W=%M@hUWd%tKh&rks+P2d;;q?01FQ8Z)HebKF,aJsG9->KRRH5(A
%*a2=EbdcYd5I2l^EC'<D+bBo\EPo.FLEpM8caB;(>5mKnn0aMH7AA!W&nP[;fPTc&.8-R6BKFq'7*%Cqdk2.:%_l;]b/bT=JfCTJ
%[lpUS43SKHpE^B9)j5s%mGK/2a^k7aG[T7tQS?mkjVr5CL[i0EAsuDqacqik![<tc5*63+WOFJ:UW.&FjIb(=@"ebOi<!.*B"[VG
%G$bN.>9k`?K[.2;.\=GXm#9$$bmQ;Mb%R9U-iboP*0)"=d&)<UV/h1/7+#f4'S_ZtoQE7LOgI4\L(lO$+!quRADqLY8DNk?Jp=TX
%i2T.`?C4j/+CQc1(;)?;F;IWh:]tU<o5e6jaV3J!a'2/Q6`tZB@b[C\*id,gf@[dE0M:H3C1U.'NEEs'S>>.q5I7M)XlU5,2-HOj
%>0E\!T59;0ni@_q%Np&TcdXN\U2FE$l=<(0G[Y([g]\?J'<ibjAC*[J6f_Pjf:&\sL.?*g*kf7VfQ0HtUXkq!k1\t*mAu*/>V9Y`
%bRJ-$U(FjAYlm"#8WC#Fj4[]%?1o4D2YtqS;QERO3'F!j1MSEnSO96!UuFf.CIZq&X.MG<lmn]'5VHQM<WZB4V\_us2^<TU\s39@
%dPU`4:Xf^8:"VQ<5k;ck<fnVM)fS3QN[(QH*0CEYpbZhlTbVC5#ba5po5R1n_\$;h7tb=k&Yd\G))_;5X;FH0@ZI\l2Ejji<Z9Ak
%@DSYX"Y3!qMRO[f84P#QO-A"27!3U=2R@me5,I3DO2qpiM'FJM*3lN^IDR4X_<+XUaIYD4nW-Ke;Pe2W)M;V#V,_cHe<2,J%a0**
%3jC%^$68#t35Tr]KL=c`;,ORPB\>'qA-uQg6D,,"Wsu6]E2elg@@qZ%Q5-<7=W&tN6rDd[V\WdaOV>p..$>BY*:Y@aM4fjR;;3GA
%0l78+c:F<V$Zps"D-@o8UC<V-@ZE[XTp;s9Ya3BE;nb79J29oU"&i5&CtWKIbalocH>'PZ-NZ_7`[G+;+]hN-Y+iki]3rdujo;us
%_,c'+'I^la:RZt\n#d'p%l%ohN6Dn2&38`I6B3Vn&<AL8jPu0:,Ek6p+.b;rPU;Y?9Id;ia)%5Vgb>jD71%@^R6BNHZ.f!&Arhn$
%>\t.Y.l*i@"f0gmE`J.P)s]D;T.kU[bj@0._eg&a+_;@!m@CIUOA)UV$RSOYV0O<Z[CFJX\*`,[K[Orl6P156A&)^n>,I$o_j6<S
%oObt#]Y+mq&W+%B1mb1O]W`'7\mX*GoNX*16u4,2b&2SVlEo?92aWi;2rT@&$[2R9H4XdkH#fI18Gbsln0p/*7?fB"njZ*$N9#]W
%U/&]?cQQ5#di`pE8hkE[3Fn<8:>Rr`9P;?r'4@l+6Dt;!bCo`=7W3tU*D4OFp%+#[gDL-n?A.$(Or(!2RoBud.S(W5MJ*k<Cdk4n
%;Ot"nFk\W9b8hO`0`r:d$s,,PUe5e]_9iXp2>O]*EMXc4YYYVtK&?u_$!ZYOR>=u11L[IEaXtj"&#B?FeW__hI=:Cj@X'5[-,(^b
%7LIJ^n\>3\l,=>XDIZ*^-9Te4#p]%Xj&<AQm)Cbga_AWrEu:e3NPeAID<<N7g]iL-r^`'kS(P198-r*_V`f_O_gC*W44,eF.s?7V
%*lT548-#6]B^NlO'kc\UL@Ogm`Z\d%*LV'iW,9@b6ZI;FQoKu4ccL#cF[1>HaV2Y@8rQ-SPWVg5\u#cA7,&t\cpK8>f(`Da0?s#U
%\T.Spae7WEf:-e>1d2?.,)D4S,puMqH,1@W06lRZj,brjB2:&rYiepDS@2"6=Crm`D[+Y2j13*<@_C_WECcHLMWUGZ?B-785"C8u
%SD]+cZ7+#'Z0$In[ga"+KIOr9e:i1B0$G!f,H#cp3_sS"J_DHf,G+Cp4Qh8EZTjcF`#KA,Oo/f;%ntY76W>11,0aMPYqh1AVTcJ.
%@a0KLdM@G<(l*bngL^TC`o8^]qh\a_M\q5&l"mFmYMeogPVnaTYVM(PVNYqQW14:dea/&']J,o%Zd&n1*iiED-HFA'*gj5eN9l1)
%*o68GlR7*Hk:^foGl,gkm5&Ha">B];[P<ghcJc72&@/!W^2:o>@ih+VYYNt-/=UbT)_Tr%Ot<8J#G/I6^JN;APq4HVY`p:%1-,^p
%,3(Kc!0!j)3$6$::6:;,7WNk^:W*G_9_ZJZkt=#a:6::?>qeeD?Fnc\G%@!4dhii(-\`mT>$oQ84q[C;Ln.)OmXcnJ8N74*PVWN]
%*kuIT$3@JjK1!L8F2MjX0MB>X,jb*h"O)9\NWm:;#__$l$2[--FL#B@g^'B;lCnZ`PXD?c='Q[*]Wg>``!$f:GJU'@n-Ic5/H;?J
%eXRlI(`!:q5*I\&XZ#:o[X"Y/ca))]r(lCa5iag?`r$Ms09#][3;.:M\-9nBklS[+U*#D/cc2lgViha*d1.!Zk%&!]78B.o=Fq:_
%W.N=r[S@%hiDLIM]!<U>lDuLIN&mut2Q9(oq3dJp'%<.:HsPtPOWG*D9pp;>B$V)k_#k5B3N6lm!"77&.o*6bjt*g5o=2e*_H*4\
%n\PWa6bla)6LhpUdh`=[\ZmE)@&mVLG[Rj2;=_N"*tpXF//'f,Jcu42JBbe2`<2T>'0.^>k`ZB$GiaM`TBLkEa+oh^6;0QL><+\'
%J^(_MI',X$=BNqd(3])c>8*/[%rBLmie<4MNsd:JEkr);?>D)*&'1tj1U^bKKE;EIgd/fPP_ZPnK715ejQ.rOO''83\R7He\,<u]
%K35S=M+>XsJ;b<.`m#+0Q6YE]@]Uj!I3P7>CFlWUe8&12\4gmi(EH;qV%Ou\11>bF/st)53gG+eYGjld6I$=b"%S3XJV4a^T5qc?
%(lLZ?3<BdgnO.7^_OnrrA0RV,M7CBZK*3i$R1Bu(*`nq*k'i0mVQBNbR)t;&M3uhYPEEDE.mB4\0Q"JGf_TI)pdG&$')LgD5>aN#
%RGk[$d79-__NZo@92=i!i/(]^3)1a\ME4;d"<n^R_4)>7$Ub!os#9[p4gs*GQL=kP+7;c(kl>^%'Lbl[*HW2:i&9$I9V)>2m7IH@
%fR`G6o_eSHin%@\PH$uMl+!l<P#](UeE5om-:NfD)6NWk"hRZ+EXJ.B;UF&o5D5*SRg!f?$C=$6.@cV%'YkAG&h$UV+rmNjj"a*!
%Yli5P;iiPL%]#Z8\P5m[e)6b5.g=u8)eqaM('%g*:^`R;+qr9pES"nu"[mnPMU$L=W?B?;dZGY\ho)eR\9DF@`l</a4*rk!GB;QW
%Y5SCpp#rb1\<LG<^[LX4G;#\\-perZ4A"K@/M2u7)s.je;g9KQC8^Q/HL3/pjtM7\0\?Via8.EOF]5"(69K6RiA"D9a*t(_Hk*,)
%<"s$NG]dam;CjslKhGNs@S'HK!V8(KH0%2A9;s60^3q;n@-,h<QH-hU"%&%g0%1GP$([X,K706S_@s&3dgeuE(lst;8PV[Rj#!Wt
%Blpm!+d6/k%2q1o*"0_KKq4gP97\N3*A+7%:PR<c6/Q6F&tX#8#"sdQBqm6B>)gT!/u_h38P,tm<9c>)SQ<-Ic:mJl^aIR1P59-T
%6`CUJRcp:Qq^s0T?)lq*"d^r3H,D-pFpLZFR_<jWGA'/5M5@NrE\F1CYHXoQENitgiC=PUSg)2pV-9ee=PkEF]'5$.pu%[ZUW^ps
%7<'%/bU`T/>Y_ZqFX#i-8A'eb#FB@%+':/iT^O:,+66"U[;KLmB`8hZDDgrEC9H<u2Y*194,O1GFU*>-9NqZ'-Cl(AHU@+'0(F1G
%F-Jdn]<9<kQ/;sd#<@+VTKOaWd7n7J]Sru9#,b'(Pk(.-'9nWejc71E2q`)u14Z9cc;@a)b`[,ua7+*a`O*"b-'u<H`WpKTTJ[./
%WO*d%Q(&VWAMpCUM>:Ll]0of!-bISqM6m[UVJj$6KLp%bVMt)ip8]W=)2Q9rd<l6_fJf.JFIBV&B:R!)b<VfWe+D6C$P+lY\[M@p
%'OId8^pkor@Xd1HdC?N0f]3M&l-@,PM1W%HKLp4f-;>^i[TsgsEO"ZGBhXg^?s8pWP>,qgHE-oBka`P,HHDWcH7ET');AsR/n;6J
%I@IF,D,0t3m'LY7RZt#=o%f7#QeLTj&.>8;H]8AH8!Wd&QRR.4@WI,EL`O"n`8hc(*!h=e-k7oC).m8_3=I<cCp]@.<Y;IR-WE'$
%]HcAM`C-KkG^>alAV_dD'iGs&%^QASAZ1!113i*%li),M*\.?_`0-k$@W4;>a*CPtWeAJo\\OCU4<14;4NZ5S+("]^iu-TlYYeS.
%N2"k4dAaC8H,EBt7k8eB47=/1XW+gcNSN;YmSDd2OJ)*tODG1M?mHfTpI66X)>YJ7qIoX[pd*P]f6E\B%Re).Fl+5R/b2le\?LnG
%mi;r9#E@DVH:.N5HA(\m>BaPX7;$$V:_Gm2Ee@l(oMmt-@J>>gm<FBP7+F5b,M#"d1WF]<FV]-%l1C*Z*i9l=8U*Q>5i?fJK=fGY
%"ktF/3t-k`r(6G3nDBJe#YZPsdF\G@7pP`09&+^TO:A45!e!^gU]SSF4$c&R,<7)t+RR)RIo>VCm$lW!21b7q?:LA1UcaZ<cO\&M
%Fpcd!']E;9)Y6DHDOEEj+4ZJ-I>%Mig6k_ThIOS#o-F;DM:N[#g'6a'!`K:Jn;pNV:X[TYomd#(:Z)0HQbWOub`QXP?<8(k[b<gd
%>e6*tl[?Y%\2YI(;N#oQX7E`Wj*3M`@%:r:5a4r=/jX*k#6eT>>&L-N,=VJ;'UnqNV%f/.OAdJJ8msYIj5b03'/2?fX%,XBljJS_
%'`(KC[ZCfca959!/g;obaDFZdC/5Oq:ZQ+8)^I'(JG*#+P0R#hpj-r'&pt=LW)Z\]QMe.:Q46G98N-?\'@h5@qa<l@a]j<;Es=Ut
%97aEd9EY!7n0B;5oIi;"'KJidJ<oO/r,[p-dO%uJUIp^7RiuD*Td4cc4ZZ0S?f##QTuCDCo;,`a[/!WQ"OksVe=7:[a^3+C@Fi*\
%EQ_Vlh>?I`X:$-aD`oqa%tX#L'@gYAWn4u#HJF0J+\P2r8+'cX`/]cnR5Qs4iQ]jC[Ct>DYWJXtEm#._Yhm<>+G*gaFF'cC#3'Nq
%[iN9j(\ng2c=Xj_9]Bt]r7SZceR<6(K_TK4;eaGE68EtYd(Eg[Do-1n.<P^OQW-3ne'&$N$:sFhAs!1'[pT?W0:s"Cd5_]Dh4&SZ
%duG]!L')iiVKLIB,7KK6"B,CDC/.tT-t4WBf`l\<4cG$pjre=^6)N\=aI+FSp8$SkrJ&n&-JH'-;Lai5OLB/Unl+;FBCX5ofY%2<
%i<>AQ:?4b?9lQ$ECfpWdD:teO1"0Ge6i3LsN_0*`'[D*"[3cs-["7kO#`012_ilut.b3Wo*9d8,>+f[ZVuHUab++OIkqiND(Ut)0
%QB6UeA0h2N6r$#ujt?+H')ZAcEsf+<HJ/iWVVAcSF,q0$i.B=>?uB?u$t'O\Chg&)AWAY1JMOCRp<qaX&-)X@'3RsAjikpGosVhL
%_lVbAJt@1Po2D-MIbp^"&"\)ng@Y:<Q+6XV^Q&OrhuET::]L"_T76S$GCTVabMW6[?iTbrJ)(%hqk(UU)p;Z4?@+aZd8(:Eq?OpK
%P&S1$(JFj_do-K\f(m/25f7=4I2^.sm;[L`4l5n)\ul%\djk`s6)"J?o[JC.2a)CXo?d2X/`EVe,GJd*]ho^*)c-LuA9t#HVcQV(
%M),a(VbH+(*R<@`Z.&0j1n!H_Sp#rNGj9UDr%,B>+%-Z;XSkP%kROZjPdS9npM0)6?@*>]RDcXObiYLJlL]EXiGPVJ+:gt<M&=k)
%,!TWrDu+l#a4\AT?!g(PV>iCE3;t06k8UaPP>>>!QNp<Cj))OI.s)`^@?N"i'-9&r&<haEXsZ?\(Z=o=&5Gufm7tpBe*_lP.gTrt
%HTNQoHgoNL(s\K.3lGF<_cj[?a4e]`qCHls>'5V[\jJJKU:N^+qu''nEa@pO?0U^:]fVf\^L)M5[_l"/1A$=OIk"RIA(RRI5rXqm
%S*d'<I$\^pfcB-p&kOEtksb`Y`!9(pn@%5P`<RqDI:@S*J.=,XcXAtlnCdF>J*95_.H`@$^J>LX:9g+&lJ<hAT=UVm4=A)l-"=_s
%2`G!Q\`(u]%GQ=b2kf!3`B+G)rF\<r=Sp4\"ZAG('@.XLk@./TS^L)4dDfpZ3d5)[\Jo*$4RL.[c^M5<C3;ThrcF"UVef4WeZe3J
%/u&;^4m*pmkf*4cI\2qd$6RhHVOrtB?#n9f4stknNr(GII5eq+=+&bOTB6JKq75s+]CU""fm6uo8NtAk#T#tFn#a/NgN=(R&J_`(
%#K1]n?bab7pA79Idi<(D"95,AU$iS>1\u(t;Rc)P\oid\[&MB6-eBBq1o58;V/>Y'ZlQBD)ec\YId!"S@WsmJd=)S_&*(7\r7iJb
%9??Lfkl0ja2o+hknA?TSNK8"5PAi4I?4tVG]._ECR\beod;+e6ln25DrI+deA*L/1F@eV6<d455mIrtZZ&u6ETl(l]h;(&f/%<hr
%;ap5W)cQL37K"]K[j:Zg=ZtN)["jp@U\udX!Ib&MDsA7%WG<gjSj&Uuk?,EsCTaS<fH35(<8%1iXPVJ"^o$F5qbO,m#CasaL::>L
%TlFB63[g/7_o8c"?9$)iI<E='T>1Enq]G;,prDW[B0H]DbMkiL.":'.^=UMn>s^_D,$g#6/B>Hhnb\u(8a,FU]!KcG3t'O9H%p4=
%kBg"J?)gZ[e7K-skO7G_=*X5HbV^J@EiV1mYo8>f42"WR[oo6@q-3p'EBZn..\(G)=H(,-NOKffn7M/hh2P1rh97C^bC,`N6[^<k
%Ll,Y,CW<@B/SI9=8R/hp2.,Q^^jkc6[:)1BTrX0cc^2VJfHp5GV:['QfS8qKC#A.r9o&VQo;@QSVk[d#)ocAX;5H!.>]Q<pSDl_Q
%)odLkOhu/&B0HeQJ.K1"j"WP#3+=S`=7.<mI%#+m_g(ZAT@-6rgS'[]/\T3iGE22=+*4fP?EVf8)AF6Vn%6gQDFpbkHF'\OoY#^2
%QbqTrW3Pk@hWgDND]GtTfR6gVYgl-m4IR2.FFW_WM(E8L1"T`AX3LD^>E_#l9VNkQ1S2YH5c/sNYL#Fp#R]o@5%A1YWF%A[G`O[W
%<oZG^(d"ZQj$D-0btL%;PC'.@r6E`>aDC]KjV"M.'!4'Q\IIRRdoK.\V)t1'#q'fU2N3E%U7,<Y*SS5e`ad%,XJ)*[N+q\`-5/+Y
%o&+7jP#p"p9ep2`r>mf;X+<iKaUBggiL.QV6'GPIq5rWY1Ru^(n/<D%K:pJj1quN?`jLcq-!ta@9YT!.2.7AXCPu+Ne)e6^#CLI1
%1_u*_g4fE6[qHK$o?2$CASQ9);^f]=;L$2@o700B9';;*>W3IbQtNMlI[JaC"e*\3d4$\[NPNioIUqR]gmt3Ei]lg3>U;>n/ZC-=
%<08kG'`qTq%caX6S($"IXCF,!od)JT=4^)])V&?F@$)%qA/3D)F^AP_OVF1g%*!ps.Z.+1(H<rg\%<N;h[hDZ[RMadk(1b]LDOU?
%L_>0l<.DbIE<^!pqp*`S-:HO#Ce`J;)Ra5Rl9%`cUB3C73>YjaSOE`/63.Q.]YaKRenRnH?!n!E(`UVJ(mj,@NQ4AV&q\V,X+V];
%-9."2LEd!]7:^;+d@Cb;9$"g9gM'>B0buMiF.W6RQniU"Q82dd7:(qm%_iaGWsOH;q[*ZHGN:T(q!Da>K_\Er;@:CQjmSRRaaI*b
%.l1S6n6k.-5(n'e#q=N!d!/<>F\N]]akdCff(VL>(PbX-N%taT,qS%07,,Wm/tE;E_DKMY/1*HB1A#-5AkRFJk2X]I;^j]\rRRJU
%YhZS\3Sh;M9mq-h'8^VK7YA^5VM<>4't6TYb:,Pe`XK_a[cfQ3\hZHJkUII>/saam+p8rCOW0-\'."H70FA>K_e'[jf5fGV>2rZ3
%`SG/i$HTf43M,_LVCh4(SX_h%"]]VBWob7JDAtpOV$\9^.3$=4-c`%"=1m)'OY%6TPjJ#K)d!!\:&,aeLTJKckmXDZN/KAoL"TN8
%HrNSn1'V0i3&>Hq1@.LQnRc;`kWcf[l.bZVq#7JsrQ"``>0skp0tAD`gULm4rq(!lF%L)?#G:+1\<]+NVos^jK<"d>[B2HR*<A(c
%%G9YG[TPin/>)'AEq/Dji9>omoX=`t]^=+VSQSkF?f-9]@c)$P3pEQ7j\nZFQNp=6_a@^)PV;c<fn`\_@*)2/Ml5[cg!?CJr_r+@
%+Z3sEl<TtL2IIVZV,-thHMUc.[Ib.roUhk5a5tl%dO\mQR[29`N29Am5@o+Vq]2-)-ju&Gn0Xb[GQYI*n<B_.d<keum&O(ud!a&"
%[.KrRJ3s'+5,C36jo4;<9OlcZE;YsreC&;rnoV5R$0W"d`3P?Kn+ofb)-;U<We1>XlJUpXI+i]?oSi&\-9Lu<H9b4-P&p-B.T'q%
%/6W22#K0X=?2#d`.4@B)qFK3%kntLN.uLeV4Ja)sMtuik;atr0s-0mAHK[P(:4fd(VjaRX_$QU"IuGePH'$!68E5O$L9:5K<i0`b
%:I!%#jDh,RrmMP'e@smB,8L.]4C(=8`r8p%iFc7OVgtk)l:lq1/AV52MaG#C;sIe1ZFR/0bu0M.#l3t3l-e46HGT\l$q9A7fg2US
%5mZ3UGFO&:K%1ci12m"TEgI^4U&X`fDnsb3-/QlBl/?ltL]5cq"E1:q-QhLu=I=c@2eq/u3bFe?ZA2.=m<)/gDB>=h)*5<c'FO,`
%m?)a_fCX*V1H>P?7g`H[&*O0QrTp2L8Nb99)P?[pc@DhH!OiTZQ*q?7a@nn<*W='U+49g,QcJ^HjCpT79kSBhb'j[\oUh_C++s\a
%nmljbDnpT.SjIT^rJj]A\JJhEGUbJ#._GYW*2S6G#>Ze3"4-j?=^([4eNk8-ce3WTeNk8-ce0Ae^l^B`Z/)=P]$[Q\**"roQ&olo
%hp8+q=a*(t5KN!aR=A;1qcQQV_s(f$#FSLTbC]D[*a2\gdaoiC\/f02rI!QH;s@jN-`fh`nIH8(#HqAhrs*Um-m^sAK<g*351#@[
%#:H#L'KBb!\l(h/gH=uZ[1;>/?sT`Fgr*-O364:-T5pd%?^9"&@T2#F."Sj,%XIB?h<^9fl%u[M7r%oakE2.\jH6f@C*/tM%uUoa
%RKm.\h=^lo5YM'd);o<Q:UfJe0jQ'jQeC)ALQ\1u&Q=ZM@_B)5Vk:q,;.Z,$InDkoW.]!ZkukKU_=-bTAWF1s%T0R^0i7!u,9s=`
%Vkb'W6iZD-bbM;?aL[>/[Ij#4m\0Z&I&8Mu+7)s,7^@FPCUt7JI^S=C.B6"Z92kfIm3'bC!82dHC2'^E;bj@V.D;DsN#i,)9u#j8
%!HoAl,Y4Hh.B*RFd!pAYBs]Aq1,':*$2nDHT:#@R,T]hSX+,NiMs8^**IHAO\*W7'&=%mGe,tLiGY2cV'DbMXVa3QXT'Fh9IGfIh
%d!p@L6+]q'#?]@P;djN?Xm/)EQZ/$('Ft8"#TM8U&4O$2=#tRee'mEp;sL'UnP)dYDX7!sT2I"(ml5P!e(HCHp.MLupGn%]Ejo`9
%0<fVXV?[:U8,[J"81!ulBg@I[0l.nU*?6pI*r!M>`p`b"fpqg&-N+iU^E.Gm]BRpm\i$11rMZ38+6;\lEI0pif;V$!/9IZXLMOXK
%_s(f$#8rPYemG5Hh*eZco%m*!g[+a$hRn"Fc%DJRs6A#!4]KqhOI)Q%A"nXdqioP1,e4.U3K^;)dXTF=]q72[.R\2BRb*$=7aWg8
%G0@%L>s&Ej^PL62jWEo<iuZp")iEs];%`%n5DAC"H2Wu3m<=5Pp'k+AD:6VAX7%EE4j&8/XkmmOH)VTUH24n`eD"=GDYbA_Dr^*C
%1:Zh'r?^Sr1nNBeLo=j`]]&X<QZ)c+8jBImqAnN(Km$d>OA+&05H=$>J=Ss1#pk^T2li;D29erhH0_3lE]BfUJQUKObG&jO7&?2@
%qq2g#3;(XJHD8JL#nW@s%Q88!2gY06"e0tenO?>2Fo"-ioD0nE2gmesF`ZKh`2uaEgVgfeZ9;&]n9WQcf*iI`@mA.9aljUfTIAtG
%H1!'6bCc^2o"q-4d]8?I/7^u.=k5M%f\NGVIGH+86)&g)pZ^4a:+Qcl,_2e%J\2r:ojb\Dh]Z]J6r@+u;(1[q>$sM):X:R6[+q!F
%Oslpob9[%L8oIbVCgH,HK&'.YrG@*bT'8F%(UIEE4dOm?FR*gbl>O&p<cAPK4oNN"j...hXgV<Ed3n\em%Y(1`3N3`)pL[fpOSSh
%;i3\9i]L4%%6]WsIk!4qIb*1VQ@!*]dh[mQ6EtJthE5HQpO4=79.m_&eUP``6a*S6@^/X<Ih*;2`R8+CRBUI6*c4ai$Y94T[%8O-
%r333NQ;pV.'`.RQ"C8!EC=rh<mg"c5-S4Yq%hG"f3eVNFV4.%EGoHHA\r:WjUVqdT"sfMb,6MbnY<?A8/L0csGN7kkq[^iS%f?:)
%5#N?>lVQdc5Bkr(H`On;e-D!?Oa-d`!_]Fbg&.t[pDW(29nDR$.6I=hEW"X%0ZOQ]dFfnSp+>c9haL;_-e!cNhH*uUD&<fSb'B`9
%&D]Fn7hA+7A6b/[nJ]m/"=@F\m-lWY;kM>cS<$:rNuAXU_4db>TAXWKi%j>FEBE1KhuT166/NXSYu0DJd<MnaOSDb77^7'tJYg];
%"YT6M$BL`f&3hi*R8H/#chu'J]g&o54ClX<31SE*kp)+-J64BmMahPJCfZ-8;i;:mWnB6JO.Z5N9J)Z0@1Ln^nHi.[E<^G<'>j*^
%Ku]'u8R+DRi6"UkpQ=2a*cjP]W1oS4:;)dWGVUU\l$%7-??$?`nl$LIK."Db`01AZq%=J689g4DV%:)(5]4STf91)5@ErP&W=@g&
%EnSqM;]%@bXbl-47cB'<*.c/k\V*eg6LROLAgR0qn<dGpQWA7AS=W5_F>XsMY6DoPHP-kC)[F&f=77Rh>+NN_HFk**rC1*/)RI49
%Aq:3)15C(V,V+jZ[X(+Q`oPSa*QbVn'thOr3]E6C'&a&bD%7HpSn1[n]TGo24)&D%YW]725.>\-'V@_$E;`OAZI=aK6gnYMIYq>Y
%Z5_L<^gVl#$4do:9V1:u2][EaknH%4K+<<s0=aluB0n?USfb](d/1jZ+=cEA0L$OdV)F:Qke?&ldqIH.Q:kg]A@C2CQ]/m34D:l6
%$CaFqh7TB8jC$X$;q[;=Y,785"(d^LRC*;H9t-1BaXdpVP(?k?+P.:.`W;deM1ZjB2BtmTLL`^06.IFVeM*8Kr0Oo2cPYK(kbc85
%%c9'gL`j79-A,VQHkQ3J<IlVi$WW4-J*aJ?_Jh!;=@l$7TJ38O!ct;9\@<EOnUZ'='YXhm-mTr%.J+=Ak&`9c.cDUoSAMXu66^sc
%6V4d6&RpS.LYSsqiF\Mc(EJehnbGeCK<%aU;Wb7EC6Q*X$WUmDFugnk3)BlLGVBR6`7mOc>sMMYgFtfiZ*=SV>!"1i6e.[2n6j'q
%&QM%dhJ'r^_mXV0Q@5So:LVMI&.=8]MTX=u!tPQ!EU%/%AIa]1aQ,4-6capW2ht1fE>%N/SE*Mq;E./E*RR#r#=AL+g#od>9m3-`
%h>8o(:.bg]MV$MB`fC!+],5=KXg05!&6I"P)4t*r^st-e'iMObn6jg?)*q1uU@YT85#JgBeK>lA*4a2-m'4(<rh:,Br<5@sH8qq=
%'li>-J.=5.g^-e5C,W,/DO]#66mZulND_VIVD/>mFCGhK\-?+n(E"u`=(bcjYC4T1Oj"T/-[sAj;q6htY)AG;5jl\Tq"b)R7ELj*
%)ni7P'^8$-[`$37^Jdhc.;famN3M@%Kd%KVPD`>ephEK^dr/-GA\;S3VU]=1C%[naTQ1`Q<<MWf&$^.k1iH/-3mPL0eT>-r(75NA
%^mn%+nsnd&o:Di/n&\stapR70NU[X$.-'jpcUuH5@qN!OWCr5'.unGY7![*.>fIF6jqZ%4GrW::`1GX`dbMBLNC!&BaS$IKE0dWS
%rj?a9^X%&VYT[N1a;bMLnESa,).Y!eTBJ):9SV(C0r^M&@>Pr3q`<k)D1=,T-9ASH$%$p0\LB.Yn"+<E)LWN\:c=Ad;,6.`:9U9O
%Mn."Hb8>pH8NabScWq,+gO5W_`rTiC"u67'm3LK$Nl@m(^Qsgn3c8+*K#5L>\0mHu5Xp$)d+ApJY?U>%gs']uFg^a+me%XCgge[+
%:]$^<l`Of?gs&?Dfg2ZB%PaBZrT,q&H&QQa*;$?*$qs?3s)G]qK'o:qXVYD$C\nXIVca`T<4B:+9OVdf21tA.d2'0]ep@l_71cOZ
%0tRa0?./^NOke`!ZL'&uE/n.@>#^-oJ].BW\EqJ;0G$I<=jAu<5HcEo%0@J>?lNCo3,%ldO3.O'H=L_G%[s1dXg]H6i`A4$K-oiX
%_P(3a,YB>9PhhVu+";)0D!!aBjFb\1raY<TAr0^GPs2(L[f=eB@j[.$`Kn1T;nVg3*WCn3pI).Pb&>:+;uT4j]b5V>`&isl*n3]b
%IA>#rV(1G`igB-(>jqf/O+^Bc\/A"g`oQ$cX2CBgil^`io)2@6SDI7IR3n@\9@IBbKTk$_dBlVT0<8575O?36;Hc`9aX#97C\s%3
%Y_L5<7#'0\+acEj'DXX]rerj)*2r8.-A1Z6o=?[h<oM640ku4iUA2hS1etP7cmelHqDp8r%d#"M3\*tBJ]*E8,P,oDBjZWLHbWdu
%jZ_V,Y7iRq$#sJ7ErRd27$G=kiB<)l#^;.=6N]e5>Dsidd#KS<AL+&"T..<"$?r"Y1QQAigBT+O]N')q;J`>D?n)&A]Z+#/D5'AF
%6tu!UC$\6=r\RYHq?SOGq@Z^UWAb`FPSBE+Ti.@SUOe_,*'@%oEU!*7."`[QZf@b[HQ0uV.g&l2\C*jq7CgcIrU!<9A66pQ+bca,
%Xc=]dDk`p2"[rqI#S][e"idH/@\t'#,CORMPh@R7]mH7ucuToH39&-J'tulKROQ=%UlQ"COP;J'ge=&9gsiAFl/piWnIqEn0aks)
%<3m.@-e#p,C,O['X=RT2mH3l*P#'ZZ:HkXlpUneQd9G7KfcA1VG8>0sbPhJ=>sa_Q%2d2TSj-Z@N[d/&,_Or_nt=R^PUDDt>N3id
%HqR/nE+pYrfq@l%3;k-s]h+KSWbaQl'#U</E\F_LdPb9_5:lPtWRTT\O[?V/p^%RT%H"L],Sqk!AJMr79qLAA9(K]Z]WXV"=PI2"
%5d36rVq$N"CefKt?Q\sh?@n"L+X^H]C6P?laZ-]&;1e9MW)q<ghUZ@f\Hee`<>-t>bClpQi%O9KR8cCh?(#E!a@pYmK>J/.Y'bo;
%ZIk>)Pf6S7EA^p&CAT[1DO+!Q[G]uVf!/8]ShQ=OQiCpZ3""Ug6gq](W7q4g-8guqYsD)VM:))kN6*Voe0\cZUm6kUW!'ik.XU@@
%pq=mdf3Ks%Dee\BfgTGbbHVj*f1aZ+g*ee%Z8Pl9=TV3B9@0b9D&>M4B&Z0Ggu*gPj;[\U-5(M9'Y\r;!HJbp('.;FS:Xhc7+e&E
%3o4Iu_449'8MFmZC-_9/20\k-YlG@#gCd9=2l/Ek++/,-"u<hY[c%>JoS@RCiLRj;=(N.paF,ui0F8+D.CW`5IJWYT;\9]<#m'RV
%5?Edd=Q8X`h?=&tLQTMa8KLI?.)ei,rCGd^oGk!V3@]mOZ<OF6%^!q!?VbQC2Z#;QQD:8s7uJKa;0Sjf4O!WH&*3[DUC4#Y]?k,;
%`hjZna-H1UQkJ,`l"IW\3JGZK%.2h45EPUi$0?^h6Z$\VOITT>,?+C^USae-frr?8Q6-@HD\2I5Ra2EHh@4V_bpjPZhhI$#+!;9(
%7CY=@-_;d<D).q8`4bV?dtO+'(96OL<oL-WMgpbU^>CG&;@l>*if(lfHnJK^aK/:Q>%k1V"c^@R02f^r_)2Xn.,8Fi%e.[47,B'/
%nJ'Y-?K5S?4X-IN9Z0*]qs^J`PSqq@Se1%sG=jbE8SqRT$:-sZ]YQC9j1Y;o6-mYsKqP)=*pq,X2a\)!9"cCEYJDZ$l^U(BT/n(G
%i:Mn3G]>.EA?SVEQJ2=ro;%R=9lInJ#9!-+(k8O\D*IhFZ.i.3HD+M"is03=IE7Ys3:&.aAr[Xc(Kr(rr.KW+Z\ZA_'?Wj<Bd$p=
%eLC"\>4V*[@e(@,>OB9+:Pk^J)r]UO&h1/o;8psQ'hb#p"MT=Bir+SAJ:U,!Z*`'#de4H-Y?u2W./Qd3lA0)QYVEl+lru<HV#*Rl
%*DQ(j'qW.X'b(7>CTETM(bG2Up6tiHmH6lr:,8J`(<0*l3#c;E)FCITDD3E,<RB6A_o#+6#DE'WS!O5c402c(&j-\A>lOODk()eE
%+F.,'K!(-m9?^YF3L+>X>d6UZZh`e._n2[mg3_(kXK@'YKD5L*K"c0$*U<8G/q%%gp20]k6$t`"UD;\VeLdOui6#I<iJ3,OZ\J5s
%-[0!a:\s?gM[djPp%p>9n`BZ"b,9^`qN/HqUO=0b5O#L=9:u11IYNA<7H3KlYu-N14p.Xo;W'3IjfoABe&50ZDR(11fG@5g.+`k%
%=h\&H)Lq*#8dCN9*(d$Vpku7D"KFooYF40p<d+GEn'fM,M^m`P6<XVj'+=TI]e=10A(`26olMKC>tHsYrW9-AQ:g=L$T9S&oCo2,
%-ie[q'GWCnnMYeQ?-%++?b__o(@mrCo>MXRKqBL3Qde%\k9Ki@M\=hKKg4.M=E6OKQS%2AHDem"rqh+)7Y&3jYMWtQM4aG]q*piJ
%2s>#TW6J!5N%Y:tX*Pe]aKG_\X6>bg#l(L)L86*KNPBj=8=Idjo+A_[M=;1=R(t^lX\fd&Kb/^]8J`[Yd706/:(d9tSamKn2(!/b
%cR84'P.-F@Y':sI>(NkApjij'PGF&FfP%CtrYQ&!?Q<g:I$4!*7+@EVdRP6#aZ!C.Y;bTc.#=fHO:;fsC>&@a*<nBA][Um"kO3ot
%rl<[97pH<aa(+../SU58`MYao_Pr!Kg+[tP9?K*;n]:CYGJ[2ekBJ8d_!.DdrBT6m*j_G=<EqX]4Y8^*lk6`F%it85g(q7%d0Dkr
%rWnSU,khoJ-6=Q$kWM\Uo24B]>ZtF2j!L[-Ld80O%o1fB7A*CY&qQ!O+1Vj@Tc4/5gU&l(Yp"*@NG+RM_r>&[h%6>D22&)c3/h.i
%S4#PtnJi[k$)]sb)ocAs>X]H<Ca!PHV_-E4)%3\k<D-]Va_E!L7F0()PrBOU;&uT.8*,M*Vp=BuX.ReLRJVbfYGCa+XHL`06/t7r
%J+mNR<<R2C1kNYG1a"Q+,&"A1'e3"VJDWA#:-=pXhhW)<K'A5<nTDuX94,W\CHOFb[?!f,+B!#fpmkpm[`%V`[%bb+"D6t.hZ4e-
%m4XMDG_NI1@5#spUPUPEDlq$3ntmWA@3PuLO#Sc%3%ds;<Adf+Ljc_#^n[nF8??!1&i;,,`M_?<VNn$jZ'<.B^%MN0)HAXM^]Z]X
%LNN:GAN]D!Ts=V75>llQ)uHo4[t;)29(<f6%dC(_dQWXDhA94A*c_"4`qeeUiL_34TU2R`(C][t[t!jmbEmG?piFF=nFk@dEMYhH
%[Gme9*S2I;7(^6'%cd4`GI^:02[QNsW=@lqlJ(o7DM>nW1#!AJ)6_#h`_2pZnHl+bj3;cLVmk:ODd`M?9pNp8dl_IBP1sZC''E0*
%!5,f:9^N5Jl0"Xe*q'L^>^l+[cP%ZaE%_/9?'.`=s.m)Q$g6Arq0_04?%ciqQ16V3k$_trH'N1nh92:;/m)sIG0K7BF&-`KoQHf-
%0A`;'@5Q)N:?X^Eg9k`%-)XoEmVFbePjWiRU#D&?]<?(G.1Gusi^;'Ta__lMat$OrST45%;p`&5i>Gt8Ire$@L<89"_ZM0lZ!LoJ
%&$Qd1[_&NChVYn?`p-g=^Eg@hqetqh"<^I%Mj?!;U[*-H/k3>liKB_JV+jcG[Ft<H8fZ8!(4$1tI2(+@S*^hiZ_qs#&f\TWMs9m2
%)I"WHXgfF^-_f5AQl&m0;&s+gNqqk-d5Y:N(dSLF@>Gd/-X3G)_]K0qa:?^HNMT>[0JnL"_LYmE/)rE]*-bJ>Zl2$c+atJ=M$*k`
%%g![_)8[4i+J/':2"#f=5K>b!-js;6#Th!t,4ga@S6h=`5N0PBg:gB&s"r7V(LCrR@mg/Np$KJN.gI";#anAQWY]DN>X`7Io#-LA
%DI82g[u)3GaS8<[>?8McfPb+'iFg_Qh!jTVPi]fsE5'@"Ibj`;7H6(%QPF]Om+-4O>njqu6XkNZoGS?h,A)>n1ukI$jbO_9a[M&q
%D8L3'_31`%1#l8sl]eg%=Me53X2W.EDo1jMA?<fDk=ZqM6`SC#AdJg^i"YjcXNNgUfb8*nl<I8Kr,^!gK^!",,E.eoY,Y\J)DfI?
%OkMKY6Gt;Z^G0CqSd5uZXD$gX?'mTc/ZTpmo5u=<T%"W9]Vt!f2Nu6*8L^Vpr0J`0AMoBD)oa?J/%1f2/R,jo?*PE!Tk66#0V-3X
%[kH7tV@@-6\F$^tI*5r4nKdYcG=7*,,);hrf/?daC>f4BV<(ZXpbf*+B""s#`RG-H]67f=L6#;Trp]Bk4*C?p>+T$E\u(A9B"')`
%Ki$4aGn80okW.i<^#[r48?eMB$?KqGI'j=-FG/:O3)H+#.Se\3QbioD\pZ%-Phs^1Cg=J_SDIB&=8o6_cYlb+(>O5^gsYW<Fe*_W
%\9SHrIr<rE47A#J>2!;r><DZ('Yiq<Bq[cM,e[-/*Cpo)%3b/j&3+MDLn>"\CqsS4;k"Njg6j&/8?cf07`9B%I1_N]A"6)lmE<fX
%7d!(Jr(56PDpN@$5L0tZdZSQ:<Lin^M,-,0PF\hmREmcFna4X5VkF'2;i,.\b*4Tg,^>%<3l[X'Bdprsb7c22HbF7'YtR%p@q0+6
%De:f1E-@kZ\Dt-`nPXDqA^>_P7cu7P2^t.GYq.n%U3M,gX)L/oKF:GD`_L<fbM2&Y"6iL(8ef2QkDZ`R)5H[uqcnG%7cVFLbq#=W
%0K>'@BT:N!!5Zf;8O*P">Gs[fCU<g3#,+U&$ClRZ=oN[b?l!NFG&sr-'1;84&#IF'hDT,m;W<C.8ZhJ-rVi(bW`E*P\nRRR$5]*D
%jt)?0q\%jD/4<Fp6XOl.*0]I"jK!_QDeYp`-[Dc[H.%\gUus3MM.O[2P?pnU[:fD":btU[GFF[2HHT#5L"!Q*l@m6&.lci#ld"WM
%<J4R_<N7AV8Y1=1c:6hD9*R0rIhEH5#@"Sq]1,\A3OqW<C'<g+WpM:%d43pLeIfdoQ:L'to8n5JjA#8RS)*_dYj&J4K/qTtl5:Dd
%mM**->\C67*1J]t+[s=P/YP(BABNOkZK5ns(4(lEFI^5/pgI^/Gpf(4bagFCeU62[=UPSG0(t"CGkL^JUpF41)GAYXM3G*+oueag
%-gp>MdljCm+!`Ztdf/^=Ic9r$p$^1p?o*;Gh>aP?*']8'fXufUN16(dV3RNO0ZaC-C`fIm)ue^ga%iTK1@9`rYC9b5b/^OcI_1Ai
%0`hd<&pN-VRs-</ZmMrocK,/&&m!7Z-(1X,][UR,Dt7W!ZFh2BTV8d,V/_0qfMc,g*<#grs.*7)N.f^GKpbm[A?sqAmERp=Q?Jm`
%dmQiIPe9*u+?qaK]q3a8bR3IEhPW)Wh!";V<dW8`QHAl<fQhi:\pn%Do,Muf2cO+NT&p'n+aV4WZ"2WA)>Aq7qXT8Y[1Sn1[48:s
%M3,tS=R/rZ"oF5@WD$EC$U(_]L@g\l6+-CQY@?Zt1?;7$e?%n9o"G""eAEp3X0b.nV6kc,7'tBl=#5q3;*$JoYk9nSMILr2GMPiS
%PV<&P:DqcEdWF@kH6Q6idpMJn.j,#"'PC8;&LHSe!0sCbH/1AN0%OPhL9q<::k"Z+W/=l^NMWkK4.<hI8God7+(WMCd:70R-bHet
%S<ch":ap7keQ*"a7R(T.8-<hNCrK17n"sZV9C^lpF8LAIJ9C+_H/hr3CtKk,b89gb@6qXsGrR:Z`(nRFUj?Np-#Fg[ThR:N;bg*X
%2CR0Z34Bnl.)'_9qlMcOo\0d/7g66NfLhpf5/:ANn]7(](DGG%#>0gRKK'q13je`n4<WZ%j3L:'()c,k0WJ&#cD*,PY5=mG74anV
%[#tI?IsVpu^$(e4Do3'YC\m(PRg7@N,jT5,-F#[t?GPghe&nO@7@1""*)rYpLb^?YZ"ZpD^j#;pSqT_s+5<Hn;0pkWGcW4h'<''i
%dm/O./Af"G$D\51gZ@",$ie"k_^Sh2WpiKe,@B,FK\C?Y^EuVlH.>V$c*"?eV#"<m7hTL1]oeGk7dt'1(.m1Lmai<^P9Y;9SA]"<
%9)Hs59E@9Z-_L_nHC7*MEIB/4?"*O3Q:<\as#1g%-O1%u=$KF4#__:f8*L=7MajU'Z4/*jLU^P?s$s3lPo15HWe`K)j\PfI.td(E
%#;VJlb0ti%TdT6b4Xo;qW+k]D>B?eF-Hn@f:/+i6P3&h]WImWVp&$/pFkYi++?nR:^HKK@MdKbG;3P5E?Hg&GM0sbDh^IE;H:q=&
%k'<knc9sO\8_.uska'Le.le^EnOb&LZG5bgUOel6qou4g[7Xm,3+'S+q2?=s%*$7m<F!Mp;O,%<0FW"!:Jjt#-*K+o[''5;Ub9oY
%W(I5&[R\%CBA\&d.*l>N6Q9lSehW^fH]"F`.)J8:'1'jpi6t(*0?UNVUpb&+d*4,,@sEQA\[?%I[7f5!>#o3#_6#RpS@dKB\mIuI
%[?csV(5CL%W>NiZ*OJ[[d`HDfBC/=76&C5bIQoC1d=^renF=s$]44]`+Wa0U2Bh7d=bbK%NM!E,eYTk21A_Wt_/ORWAQA2r#jf:I
%4N*:8p2;VXJ(j4h95h]RV1Qi3QV-4&6*Xd&h;jW4k[%.XGIAHRP"s/(K*Z</>N=VbNJ]f(](4EH.@Y)3itC6:k?[K)lH)F3("=!X
%db$+Sn;;=Q$mD>f94a(%o8lV-*kM/miL<n"CB>9/B%X`DMCZ5_l2H=T[acte1:+A$a7ZMlY>A@hhrahFS"cB-O\Sg/1dNE#h3*oc
%[EX+[0lF>[-Ej;hOOi5kA+qbKbZ3e3V*UF]BZ[;V*.C&;bsc:nTh7jJmXRF:O^L1\0PE%n4D$$KFt9'\[@0#<$OT+ijjd:F_P0)"
%]+8S+:LI-F)*5`<rAU$5#]^)R=3,N<TN;>2o<e>WJP84r>Z>@:9i4AZCmoB>^Zs:O&2f.e\S`[oNA=*s)'i8EN]2>d33iP`T7?b#
%]5N1FbK&;r?bN:,b>U7cY_PGs>65IJ`@jGSC65QbUO'T:aClR3cWAn3=/JZ5AJF:+KZBscK:BuG\1I!lafnWNQ^mt>66h!PGpL;T
%_81,3;h'Qd!rX`.rR#t6R?jn9.6&^1AchMc\X83W0a_Cnk4f8uck;7UIO8lUWfYI'P)4;o9C&7P<A"F.U?n]fB[M+LYk6hLrFbg#
%c]iT1Ojm5G8100QE0<+[KO#XPp`<.>@9B^jePI&0"(BYP@j2F6697l(RU;5IQ/R!e4D7>o;>OsfU5s%ZAZU's<OUF5OTfK$#Kc6)
%bS/aRW-`=oB7/[dZ#^pi=c=A*/#TZ>(qZG/1MrL`PW8!D8_esp]3>Y[Kh/.>.FbV++c4RoX>TL$"Sl(%maX`q(AnusO#L)mM]o0C
%aYAZ,Z<#pY3h:)^#7?H,YH*N;E&)JdRZNMHN@ZW">okl1kJe@pXM8gB`QM/A=oD^LmX"0QVP(,XaN4I=#euQmMBBdqc5jeJI>?3p
%5-d!i6.pbdot*F!`a^B*]LVi=Rh*!RkH;*MS?=/68!:DYjcEEP?(ETL05WqgZGj$h5Iujs#(C$.VC[pr44PkO[M#4Q&JVSg';'/Y
%GEmc%oK:so:05#n[a1V^J-#f[S9f$dHgq4sqo[rG4G:jEW)fZ!.;c7(Wcos_<e5Z-"tC0--CNiCHn?OJ.*0hRUm<dK>.WUdRTTe$
%nQ?$SdSd-qj_FL#eML)',/u'V[;'k!_a.E7<.N'=7c\T$4Yrp'Gmh/cO,7mgEN[pR"5<mHn#^mt)3iSC$%h94QQCHEL5t6C'T<//
%^]2LO5Q0!EiNnC=c,:oZKn0agi5Yu<:N5s7\">7V0G#uA+Z!G%>hWNQegJCI'?pB-@#X(+EEUFg/1@GZ.)Zr++7R'o^#$[!Ye<Eu
%A*+^[8MK!7S0PpA:?=<(f7XkP4MV(10Z!*3r(mpNWl;?q=L3fjKFU?5P^Ip_EEsp]-4,_eJFK4do2M@5L/*Fh!t#LYEXH,JiAG(^
%i$/\Y,WPp\?WcZ`cTGgB)s%@,RZ"(6Nl<(g]?=@`GeH=\n-8u+(;<<9WQY7Vg!I.:M?$^DKI`[<\Z=p`XqNS`$$#QioN]1EA<[bU
%NsY'kKUbEFb:1M"]QN(b).Ii9]u5I')E=Gp*EcWB_/T%\HslSqkJrN4CIXUI,7,''d!hUs,Ok*oHREL+@H%b]bAe@*QU1Lsk#1#q
%o$7dSF^V/KBnV"t(qP/:Q?`jNmMipVWR&*p&2=&EKIp[n=q2D3CRQi-RDlcRLZp'DBY`IZZYf&*-k)b&J1RVVjV4;/PIo?#=oi0j
%)C;JOP'`$f/cdN,hF!Y^_!BPLIBhoe%Q>g^1_+*5Q9f^OY#?SI"sRI3/cqq&;`E*rk8G]6Ye5Ce_75#^F!\TZ-=9ECgIO;2/Q?<>
%75AIG"qecBC*&nO,j(5A;o84S_-Pu@*@?pD()2$pEUuMcL1@neS,8d_WQ!(anAE*`#^CX"F&/p3C_f?STj\?Oc-uQR[5Obd1DX,+
%/:#HA<atj>X+*t)&SBld'.n#^_bj50Z`PQ@OY%8M81WWK!`GolesYfrhF_6sor?JW^]LU-^cMmJ[0Urh['a#qZ!P,6<2$\4ITC9E
%?4-d"Bdhoi":Udo\"$fKAL]nfP*lk9=G/=1+'`(FL.Gp#\.bSsXDS_]JqB&JkBu^p^&WS]RU:k0P*6<X-9h*[PS.c/Js->@:+;S4
%!t*9,.C^KhfZ0'GjV_h?JjFntf9bAO0*[8s6#8V#9oOE'"iKKCSi&a-4o]cd%e+#S]Q8-V;gu.?'L.@Yr8dfo_U]:lD%h$;gJgoj
%S>):,o,^]m:FF+C]'[;\K`R5%L2h>3J&;"lIla#_A!aFK3;+5.NYFH[e[,I5EuV\7.c]#+?0@GlU;9udo8Nop:cMgD0KY!;ET*l+
%j)g#glB?3K%Q)QUYQN,O)iTo!g/=Jd_Do#]4;?G!k5kn4&`_PR:)Tra<dApa[HQPl`fSF7QAou'l5X_S8I(euS0um%m(jOYcCp65
%`%Z`_hBd,Uj1W>&&D$bTkphmMdi?BN6j.\_eXK;Mq)!3<B,YGEPVu/C8cKAIl_1\B_#/87ac;]_$Z'Nr!]t/WReFQISGN_$j#!Bt
%dF^dA)-\j'!bWF'`Wl#c0Zf6g!>>`^'s?DNhA4qE+Z/1]%j4Us2rgq2_pK2/"I?ctR1@hCGFBhJ[F@I?nT0JX4#5Rm48O47hDE6"
%(X7P-Ahk];bh/,=@uNKab%3>n-i)pErL@fiU<@1!9,IH8ULoH$l?:"iGN'Fo"J$'=aDWH=OA+5pZ@3P7;>`AY6WGf[3L`,gc75@=
%bX(381QSj\+#)0-"(T!j">,VHI+aM'^X]bqW$)t&*/#,KA<hk`q?*/B>K)0;/`XiM^JqJ[U.&Jkh;=JP=_5TA']HK9\*5H)KGSYa
%N/soCaCYd,^t?m/fLB6e!okisFQHK=St$NJihL:KB=c3brH[O[][f(@;\jM)$f)hiE8cag;,:4LI;1Xg`Fq&5!]JNh@(!];SE+?!
%E\7E?r*3Wff.hGZW*M:1FQ;%J2kJ999j,L.C06aO_lRI]>&'obUh73TY-quDOpB_YU9"Ecd?s^KGU@//54I&Xbs#W-;_0WIUVPqj
%)';R@CEY2M=G3tDY%6b[k.6t`AXhqIc^AZ7SE]1FN/:hHc9g*KNF[Q%a@u=AcLQFgqNb@)#L99EW]DJ&hU[ll4n:@H]OCBE+6]Sq
%>8jQ=1$)5F1E+lML)a4DM7#/`Q=NVG3`-C-L#hHJU8m5:XMRe7:HrJ*bGLV#ZLF:S$4^0++Cc)qAD.31patNk%'%*D]7R%/3@%r\
%8/1#=L"3"_>J<4b,!tJ6h.^,k&ePRY1Fs9dC/!<2^m"mT/f*&PI))T<kH2a7p][On?XTX'[4pQUg4`OG$@B(4p%.ei8JP#'Y=$bb
%YU?VQUWG`JKcmaKSqTkP^p`cm_Iko`4g@=]@YMTsN=e.3\RJ5RP&,(IqN16/%2P=IYe]=-"[5b?R6h+tNlVm$L*eS`NU]>u^t=cX
%A6_6*:tS^(`jjBG@/7/g0QXs]ip5,!5J(/ZfZWYt]PAd!8!+RNOAU&\aKK6^qAEjXI@OBKA=&*&C.=W/,a!>5I#Gp1`crfMWBW%E
%ZVbt@S-o@7ajZBqH[6(Mi#&4'</N._*M0BN-EC1/o(qs@1$Q.uoFld)ZY!H_(8nF$Y;;E9Oae"2r)oS(OZPCcAYIV+Yp7:60L^'b
%;u&sl6bap0'+G!V%?)lYL@IrT=C?/9N#ao%JWEnOW"%]@ZU&"qM(N5[`Ni@DdrG!n:M`F4.O#9A$I%R((aHmG=[7rTN[D,D#7uh4
%QC$Ba67<G?CM/U]MD"*.Gpm#0cRG?rTY#pa2%L-aYeUsY+H7s@U09uDr?u-J@TRGJ%H_EI%?Tge>XQD%%ljIb5JDKjoj7)N00*?@
%QVCAj4tc/!_F\"l-"[3+n]JUX4L>k9YG7T0%<+VHP;-A:$(LsfDj]1%UKm%:_#EFRN!JT:R530s&:KC"\IIRB]&Ns7fb7p:'#0(=
%/n*^A*qYG*2Z578pMSnVnf/>:6TiK]^iU6<q$K;q'HX)4-aC't\nnSD(Gm2.4!)4<0#tn6*qtfN0V6;HEjeu^j&LaGh1hG2/[]"L
%-Js!dg6Zs?A]D8FYONIEB9]&Fp?5^g$bEB3);o^r1?2Yu7A_HZQeO3CI6UKkgD\FUTo4N[enLZ2DiMW/j71JF$[p-FG`7XPTMA3<
%a-Pl?Ord>(iP@OGClLL05*"^\Nm33m.T#tISd1_-et.lkHb[G6pshelk2pdKI#)uX:"(ld$.YK)']1iJjP&=&Q4U?o>J\d5Bl^KY
%.qm+C(_?-nq7^l\1m/EYH`7J7GtcMXXZNgeFRuZNK6F9A#Q*6IOkMKQ,7EU*A>1s(K#!Dd1WJl@(GY5\B"eJE1!QsDdgtVLV]<gY
%,N%gW`[C+PQ4o0)5@M-c>Mqe-EMsmj9QUY9raLs:d5L'TTUYbHaM'Ae-[7E*5$lXW&PpF-q]5k:D2O)K]@F(32Cs#WkC!l,]1;NK
%@(*ns9A3.P\LAD^GZd_RQFqsP'K0i0@tRU>E=$'9*hP/73=N?5GjH.d'9f4!a[Be.@I=9,:n9<S>smrsHIE&C&ps8q30._F)EXni
%R?4n2V<$W)B[,N$fs&t[2H30aL0Yb1]Z5(ho<Z+g5G$:AJK88s@$28E-007gPKXK]IrTInk9BhJj9?J4\e?h4_EC=]mT/732],h]
%+]h)UW5+-meQ=6?iVEu9kE'&H![;/$QZFL4\)A&\F7c&$2j<@!]#TsLOM!ZQn^otVJA+%&T=i/bj'h:'SJ%;pT"kOe10uA7)l9+l
%NC[b3eS.p@d?#@PH4`c-&6nbi9Lt=h<eMVuO3DI0'P&cFaQYs"&!-'PSd.lSA/]#:4s@C<-QIj(,)'pO3^]S_iN0N6Bm_,#cf()o
%j2q"j2N.ldcCp\Vc'D5\GGahFK..5PQt0"N_,,!ZLB(O`(Gj(N.cn=2c,;d8G<sm]J$31IGen_un<X"c#KMPBd!C(s6mtsmioO9>
%0h5agab_2f7quI;)Ue);#0LUTdoqpTnV"Oj5S:[J*KB2PNUU/0Ti>:YLeT/E<oJ`V6@juZ1$`&=E>4Wdnl]XT(lq.5NiX'fHWnFH
%FbBE-/=?4`69:)Tks&*C[M77oMI&^C7!PeX>,+&FH5&ePMCo&r;4otUNY>QE`a]dc('o$@5\)'F@k-Us*qY%1l9b\F`CYVD,/(g%
%Yf.5alb/A91IsGp@pBG6WCY2ElBu>-_(K;;gl,MQZ/)oqWa<>B+CE2o$Z+eX)40?Dds*PZVl56*3AM4h$4fT<-/ttR05]T@U&@Zi
%I\EKp-tlOV=5Xa5T4M%k@SUFU//X^_esT(Y_\S+RPI;^%,0n#Y,YN=3_Z%ZUfkERupWpJM1rnJf6$`$=.sWAZrko5H'K`H340B8N
%$@K_>jh;2sD6X$_[:)2MpOnM5M:Oq;:`sHapdAX)B^%@8V\>HgJC2+*hef_7Z]V++]k8:i%VN5Yae`Xm^Q$^p@*[%KPBiT9:NLTA
%8,<lraD,-<==ubu;2j*?;4jb3B0I$c$47<l?#ErLo=fNF?eb=RSd!1ch:J#K7@+&dd678qAXs0q&TW2/._NWne)G%E=B*rf3fVIA
%'*\65Dl5pkem_OY`\b-NN)ND-M88'A;OJtek+0@/_0cYbYPRn$.Xe&p6/eS9*R-M2D&G,TkM5E\j"td/)VVjRBUfkja&`Vr!,&=7
%c(rb"ONVl*[^;ZeF%8l4+n/le:6e`&-"a/n3hu3O24M^&cXaGEkT8d+>>Crm)oHQ6DWRD[L9^7X&X?_Ec`!S[3:i:-HYSa8Zb^Cb
%>+XeI>0rX]/ML8I$-uYuc'_9SfC$r^q_s$$p;arGp$[C#:>AUQDp)CoGg3o\`q\W7p7jhF-hf=N`-j.Ih>&+89kbn7b#5sS0s>BK
%$Du!j,u,2@Qn8uK]1Eke1#'Af_pi(,1;VBXX`dE<Tq82L4jbb77&t8?f7U$91m)(48A6F6YDMC+@p^Z#37g!$7;JWDb!\+@M<Z`-
%jdm.IP)7opV`nB_302Hqm#P[5a[VZ2:KnE_%D)TkZO'P]E8U\Rq3p!M8b=b3/1pjbh01X98iP;q-`Z^7;%&o)i?[ha6"r'!M(b#%
%6SlrRDH[c7[uotinOglM;kt&n.f<=V>S1*Ao2`+DiFUdMnk5[p'%aJV:sEUH)Vd_EkG8YHOl!`*08Q*j0Q-]^.RV&dB`MX9F,jHg
%9@#PnE("6V%4-82_qXcYAui23\(@7u*h8iWTip^fB?nh(iS<he2)_8EKZe;=)"g3NG,tCgLTO6V^$S&AH$R]9glq#f+Sf^Z5&U)g
%o/rkorm&G>1:+Q'''Df>h9SL,YsO%DE,W,s-:W6X?t@17'oWT,O>(fH[ZaB7=^!<Q;SA.6X0guKMQr)+0SMRE8XLFCRM5)aU_P@/
%p<u&>Q1n@R`<4]i]q4+K;`th[(+X&SUDI+F?r:OPoQh`jR]"+sR-,nHkUMqhQFpA^<hQL!1GlLTI&E@&nuYT`DR7.%;pk=cGF<nO
%^&&p\C@7)V-/M4/4=``+*u+?@Xi5E'M#gSOG!SGT%k.ffI#fn@aCBcG.H=)/lCfsSMPMW+$K`"\e&g?hh6OPPG#.PFj^$)s4XKq=
%Du=ceY<&QgF=[pY2.\EV/tGp&j*,"&X^@se"6Oco^C8j9&?KHdd\_C-<ncoeTbF@#Hc_m8k3kS0Y6+<NK+XtUp2:!=d^_4<b6]"T
%5l+*:+IuHN&DsuDWlm>9M<Y3QL1Sj??ZMXdj-N?2pFh%'d]n>15'3q=EhC-mNm>\5r<1>m%u2mepapsdRlJ^?mMe$,WNc-XG[>CH
%Ku6FSFK>g:>FEA_1GT7"n?F.S1n"4GO:4hu+FIV02rF+!AJVs"dRT,s8b<)(im><<mu.\]eot_?0#&r(99O$8X?rCH<2cYRD&DQc
%^Z7%coB2GJZt"YT`<HGgQM;cl(!326:^AnK`^;$"TjS"o(h`j73C)PH8;FnjP[Bc(I,8-m62(GH_a^/LR4"lI1A]e`<rX=/%#:P7
%GWs/XLNGQr_1n*hoNl-t%_eSLEsU?(7cj>'(SH0;l3/a%L0B&hDP61r%6@==+<CDLE.p:t=H3B$&jf.rd]je_S)%HjUP@oX"+p=!
%Gb;fmW`e^e9S/B<dZ\:@BM!\abtQ\K_gr;>\5526_FY##_pI",-0U&jas.;P4@r#H&pjOgq/SVt3F9VN0Ah!ud^lun7*iWnHZX]I
%'?oU:=>!n')?EGMG>I1`peUdR(s,4J0WSaM]bQXSl(Z'.@*1W+\VDX.<^<&Cggums3jY'g!iK@3bX4C&"\sT\%J_.!js"PVOLldD
%R23Og-Wn1>0<hZ1EfgrgK.3_I5o=A*<?2TD;K4El^]i`=&CDI`3n_`nI&5u7%/]ZKY[iZJ!uDpf5UX;<?OqpS4\9WNFMcH5]d-]r
%]o`k)bRb?k_*4@$QsYpMV3A:MO=Z.],od/Z3%&,0,s..8AMnj9><B9E?GM*$QXE2G$S9W+ZuM(hE<=R>JIJZh?#.gb.n3bRSW9s!
%8;C;&XKn*KX)QT$s(H/S(05_S<M&f-6^&+$nW;o`Q)c?FccCnO%WXp-bYT.&#C12<AV+*8ea+\YT^s94;NM$:9;.2?*'.-]Xng"a
%cb>3WjKjIee):/A9.14mN$6VHaW1'XikQc*,*8NS4EM0S96;:,6T?S6!<nuS6ub@1*_]E01)g:PPT?W!`D/2^>`aX4a6CD`L0^;&
%fD]5hS:l=I;!87r@FbbY.h)_`KPj!1,hNf?Mnn(7kq+@_3G%^=0&S2O2Tn/#ok6QYAXHM:D#Bs#/lh?jeFBlt[*DXsK$WtMZ6j[p
%+$mh<!P_#_L0;RmZYq$>6p5Ws':mLg&2arT%4DRf*<W<N"84d[?n/?2#@@W@i?]>XD_Zq&,$=3.&^[:/JohhE5rr,,TEjWsG1/>V
%p:]C^2q9kKr,=CmQ4rhho.$_KOW4(mi$GbQA*H#h<MV$+[1]'3N>"r>O7!<O"j^sHOM#MPDDbCM0^gfM*OKd`V/9[t7G)A6X=_:6
%$h%kBGW?pG`OmObjCC"YQAN)L>?RnQUl/U\iO*Q7Z^gBs>jEkWK'AV`'+:3XeE5*Z+qnCNYfR0\MI5KWC4_gJmc^#1SV?=;QAa#G
%BS,qbAuE!8'#l`D1dQ(W((R?`..=NJX5C1dbF1dU*K47IgZkHj=t&q_\M`l(B)WSab.Y^M`WiK8Wu"<"S/$^7d,#X$9p2padb:/`
%>'O?=,u"8?9B.QZ([!S^jq&A(:;BJ=&^*LXIM&M)eKPShm?-:M?;6Z[]M!.Cm_g;uZA9/egL:P,M>!*o)AiIXV\C<(99DmMWA@Q>
%Ec^;f(:db:F9bB]Wf9G`8jZl14_kjS4AFfB8RI2$ji!0q_;llk!k?!dJc/_ZIhp\/`CU=c&utnu&FN[O@!R0.qnnRl1@:,`JY^Uo
%%\'M-MYA/H9]MY^EgWhh0OscG(euShS^3M)kBg!-@:;YhaeB\!<'Ue;X[GTDa_a?R#q]me<`GDtA"d;+8dM[MD*]>H#i5X!lSi/n
%GW#3%TdE2DYpYrJ2U7+L[=e3Dbrti&9l(+XFARP?UBj;^7c@/M%EPVt#u)Eq@R=$T\.-<1)3p4b<&uS)8J)J4ZVKB&MJ+d@/?dlr
%l=>NAg#P5C2*p>kO*KM2i=`"In_;j_<\[:R`(d.``AoD&83eVq@D0&]@Nl,Ed)u]^)c4bqT"tcD6!5$k5R<ZQD*d.j2FYW',m#km
%@kD\g-t5nQF.A>GF26o@KQl*_H8\Gmr2mo^5[NZH9%97.8OSY05lB9sRRG2cp-fkUF<R[E)9%=mB;j+5+MZJI\`0=g7R2"5e^7J5
%&P:hJd)h:p=YNrd%kF/E&r!&1f76L^?,E*H1@$*^"BXR;MYjm"Xq<5Qhs/!#(UYTc`g#Y"'3D/=WX)*sk%/NFQ[hDu&ZLnn;+Il$
%1jr(g3"W9H)atAA"L4mmOK])^>k9cm=;PtKNPsIX0\)[9"smEm&>/0q,5.BDZlKp56ZoB7d.S?lS4Vo++E8&"^!r0(qQ[*'N^aC'
%Mr^kg,STOfZ/O[('PMMW*j;Be]J8@*a%,S\-)H8U2<lnrh\]6B,YY0J9&I_YlghjneKa:Naok@fAd'`JNL-kR'e'/W&5_)KIWEW^
%#JfU9N5R#mn.H)_ZJ!6kj#q@Bltk<uYY-.+BY:RZ[A5I]//Wb72LojOCC7rc(]0pLi!Ki-Wb3LL6V`K\).JSo4UX7oY)14pC:*%I
%/e_b@'P4L22D3N^#r-?8>H$D34W&R3d!R3Ko9S[4\qR0(--`0ma_<=QYco!>5qXQU-'R/J&/T8o,$*qE8nbr\gQ>R4gt5.GHsN=^
%cDi=*E<9SR3V;:c>e[uL8/\R5jL^YIPD^X*Klm4RX.#2%*sl;A+Q_saK%7%lEJY:3-oq03G0<oO(mZ'4/l)@tKGH``^P)VWGsE&Q
%>\D"EVP\LT7">j\PO\VjrR"C#GFrpg-"oXDVjmaM0ZlQlb8=_U6)NH84?JO"PBk&Y,UY5Wb'FXJ^?"q%OmXo(F6tY2'/1&M*R4;I
%U6rc8rQ>o1o[NBgSALJT!t$kZ[[e<XS7-k/9mk\KiChjsQ4PAW.0R'bJcqYn+_PWL`$r^^k]IhN(VPpG(9sCF'4ne7%ALj$#f`hS
%lQskJW)lmO2(1S1\p3=Ta[llDRD6siRZE5PQhdb)?09Na4AdLfG`6LMKWRX,jl:%u0D[hA+2?D6^=A'1=<_]g?[52O&4g(bS$3AI
%n6"RJGUqV$1r@F&D,/=:7WZ+K/uA-c>]/SCR=7)i`a%q^'$@01o=T\aWn_9uV5m$:>qO3>2Q1ONs-DgIaQ<pQ-C?F'_I?V-:l[.`
%Zuf_bD*L-Qf')qUf[1[!4^Y,JemQ-nL)Dp>HAl`3I66_(-3q>2N$hC_8]>Sg>'YBoQ4-hC>0UO5,jtRglBg)tA_$`>4&^+p`-g]/
%iASPl[ObNL=:SC%!gY&u/1jus8c7\Rj#;D\s8MiC^\n)/+9),mT0N;F2o#1?5Q0gg\,Z=(Vf2:KP!6K*-fne\/7C=h./i58=&\$B
%6/=WA`8J&"mDTe#dFMH>Qj))8Lo$rj94srg(kX,1-H:3gF7h'u$L6bS-AEnd4bEfkA`!b&=DsW7iFUn^B>J!l%,PRfKRbkFc[s%c
%(qe$K'B5TL5osm2KlXi((U2lBjg/@[/<nai!?9<h9gLcU30_\LM#s`7!K!/dJZ3\:]M"'6HNk#O&8u=A?:$e6=7`*/Juc)O$"8"e
%VbgbT$`<MJTqga!P)/KaG_()kfkU*eHXM8u_"u>il*[ATeJ,e\>MFF)K#oh%Vg)hZ*g$&!N.a6,\=<V!.@@B!9sF/T=&Q7f&p`D1
%6DrIU\KmUnM+%T-JE>d\kOH>e*Yd0e!?::5g`?UN"!%](#hhC,(XD,s(4-$Q?^Yp:eb.62\!(i`-42.mKCS=O`Vgmu_OX%?3s&hQ
%bmrEhGtN8@Oe]eA&sjAd*7[9+Jd#&uoAh1HFBpq=D^\Ufn;TOE:EoRGT>n?6!Df$qE3X-jT<!G9868JmOAJl%Gs($s:M>e46Aqc&
%R1$;_p)$(^/`e'e`DNEtHmPL>'WLFtMGssU6nH#;^`pkG-kX/;!+8S_fHQ\_2cuETceoc9M%gF'#nadS:P#SDc+0'1*Wq2t=<.>3
%j9PbW6H)[%Zsm@s;s%X$Pl`FQ1,8I0V<ueI5Vb<L#SJ?)]ma;EU/A5teIWlFJ-4?a.9)psh-AdCb(Kp!4VIPqLZ2Ybr%g7Z&g8N=
%%f8=RhM8A_eLt22NF"kg']iC4_E>uhhDDF<HdYRAT4\d6W,BUNKTrneXp:n?2pt,OQF:.PZ#THc#nSCR`?*Oap-Y5f5]5dVA:d*E
%rm=Eb7,8QV?G`?>n=`N^Z!,im(?#T2qVZspT1b?PBF^c(</8`M1G>2(7J5#rqHps$Ha<%N:O.cJ9.%ihh]7qm0#9N>W<'i/bq627
%g9_hQW_@c&'/[*ML4e=5MF.5@\XKqS'cR](]H,j16apFG;hjW([gB;?_6Jp[i`3-&\*)2)pC,No[`>Dm]_/c_1eDZQMdS>f&%`:E
%lqiaenE/\a\cY/S+?6aq-?e<er@O#A>V+n<*5,%iJ@?S)`:kUu#WTt[RV,-Xn%i/?J.:IupU.^'`.e/;b%u4pX";FV0,XIn"[$eZ
%>Id_<MKOSo"WP8k9QX*[k;3j/[Gc+JV_[eu+7li(OGWSZi[9HNB2s_h*UK4*'"YPS]A,!=T`^-X^qjo:Fb\;2jUTq]8]&O9BIa:t
%n2;eRY;'p(.,YutlsQ;g[EW:VS:oor882*#Pu/PYhJg]mq>0J_KUK<-(U3D[$l`(4W[.'r)$q<1Ef:<_LKT0U=mQaZ@qMPcI8L4S
%_=-.-1&Ya/8ffTMGrI83)8G@7Qd/jkTZ;"pj8t+8c!!Sb_*LNB&:VLb-0T)N%)Z5_QTM/6e:<G[oui)W5^1H"<HA$sN8@9i02.@X
%S$0g_2BXuXAQuROkuUW&TP*`3ICD4J@b46%"pr>W/C_@Zj@"];%2'.sg%Ts9>qBVGXY<DeeH>nC;[Ql+/,;@!L(q&$`ka'bWM!pm
%@VG?3MT1gZpgIT7TMZ)=LZ:3Ei<b_8[=]WHW4G.P]KMdoSfNr'4^J^3ScGaI6W-f[2_X+A*K\-AO^01&mfa]U.8Wu#W-<5l*$cNj
%ek)&7j'7i*$$[Z+bYo92AX$[RedP:kB0amUpOi4V0TL1*:fi%nS.d.e2T4@BpD3TrfEU2Ki(X2=#]A\m;Lk&9BZUJ/+?4PLEVbs(
%#.*)I(nAM`&r:Bq7*^2V/&m<@J2tiZnZ`OPVooqlnh.ah0B&91c8=G.jAUIpVJBfkb^ro&cOmDkbT,Q+>!3I6nOLI>27k4aj/KYj
%*DE"cnf8*_1hQ%0Hu1Vd+dcelMq:pJ>uGuH8n5jLs-(1W3dJg9"W+,YX4?2MT/fr>&1^G1'dbSAN>:HlQju'*AhRWPAuq-!Li^5F
%1]ML84(g3Tl>O,jQ_8L+?-W`.oN/!9&nFkNY`KuC,cnbNI'$OFriir4*3(lSTDA&b`2\2.C]NcgLR4hh:IqDtP'KV=k.0HQmd[L)
%S/E42$l,;7J<`,l`0dZ7?uA/2!V+@WqO<p<e<=Q40MO3g(ES1kSY@Vl+R%*Gjnl2D9\L-uSMCf^V2_ROek#!TEu<Ul7"Pn00pWD6
%j2ggI"ZJFr,XsZt8909M,plD]WKU-qU`=fh]Qsl9.!aS#/apE:6.p.]^_87GaTY7/COqBf^o"@@9@bU.Js#;5\HD.8K(TO>,Ch&*
%:.!hD2T2/7(7>Xc@&)mgE8V[I.j:;uiK&lSTQb#OCs;,]_&3P,ro<m(iVQ"[&^uKVlmG3g:;s@*mV$*9\uF>leLVZFYZc$]eTHqW
%d`6C%I[LgG*,,7OTFr?$qOM,phln4d%=o+?Zj4Y;fA$8=pre1PF42i':Y5T&`\6S.hU:>J/fLV\9.a\b+OJ>\"PLgBq`lkEQ0cli
%Yq>4D/:[FNPWjUq\SU#@'D5uN9("@G!<kSbe@_S%Y)]GF_(G,E5IUs#29hbmW.JcX.,SUEn6"/SeN_ND:f[WB?da)?M,g^IGZU0`
%3C`,9(In5k&B>'#T%&q.CsWiL=t\ZH*.r8BZB7s4g,OgIH"j!Wmf@jZr7?:Ujs#`leLiIWkIU-k/R<+I]i;?%%ARHM]bAI%l*%66
%e8J_]rAdck[2M1Z1SV1eH:CJfK+Z0q-DAQspj3oYF]$Xol3h>*+VTl5T#r1;0>.?sm4aLI0<bp6WlD3=a<Z(`S1JuV*^;5dpS<_V
%7T6]9S*!L]S..+D(/&S01q;k6KagfO`n"!85?UZk&?J-FZ^H^AqNkFdcYQCQTm95l0Zc:'7[8-Fcr(U+nVkn4@mSl$fg]!!#Ei^A
%j@&Bb0%-OJ7i'Y\c.]LLVI/\]J/H%;Z-[M%i;FGIrB19@+e"^eS+q?c*hV)%&)gr#9Mrf?.(g/5<&7D\?IUTPDrkH8"6t,@iOrCh
%MW[D1,q_58#eDrrVgk\V/V`D>5_2Hs"uau9_e,#OX0Ma"Ygq?u^b=7G[q`V([#2!be($):cSm\o*WIl.Zh=@",B]]u\?8<]jBdI(
%QIqD6,+87AqV_qB,(^E*H;>Yj)+B>b//\O,GBdp@G8U5o3VHYj>29;AK>5$gbHY)GNO9*Xp0qF3"Ud$IeTY;^7aBT0Z0]6ZHQ;K`
%fl(#'7F7:qT.B2"]<RY?YqM@Lmhj="YT`d"j[]2edUN\?(e40g>;[*MUj"\j,pWo</.I:?9fk-\]n<ADBokn7YB,Z&`3NQgPX\L8
%lW=EmFU))c4p:MhdsPQ43f^K2eF9B<m4.\T%-TpHODX[R,.i>79QPXd+=E%@Ssa`F$fmQ/6"IYo[Rtp9Y/YmC>l@`s+ItPRHH.GU
%#D*'c*%[j9OF`Oti_@MEr[M)e9Fhj&gB^*4<!%m"&@i_M2^uL%TXTl-r<:PGD)kF9P<g;orY8EHZBNOaOpZn:)b%h4<CA@t@hkeS
%D)BM0ZF:ZW01S<u$I_&@3&Q/I)LH8mGrtfMG-q55o$VHkq;J6d%+^b/s5s==?iSaKa5;@?hk.[ZJ)C7plX/Nkr6p.EoB1&lpCH0Z
%ol&aenC92kr8Ta9kM&eiI.uIrc,R5B^]2c\5QC6?O$A'm_mc7er6+j7GCQpuW;b_Iropo,qtI:Cnc&VTppUb~>
%AI9_PrivateDataEnd
